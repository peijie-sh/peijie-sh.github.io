<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lingpj&#39;s blog</title>
  <subtitle>不忘初心，方得始终</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://peijie-sh.github.io/"/>
  <updated>2018-06-16T01:58:49.397Z</updated>
  <id>https://peijie-sh.github.io/</id>
  
  <author>
    <name>Joepis</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用Spring事件机制实现异步</title>
    <link href="https://peijie-sh.github.io/2018/06/15/%E4%BD%BF%E7%94%A8Spring%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6%E5%AE%9E%E7%8E%B0%E5%BC%82%E6%AD%A5/"/>
    <id>https://peijie-sh.github.io/2018/06/15/使用Spring事件机制实现异步/</id>
    <published>2018-06-15T09:21:43.000Z</published>
    <updated>2018-06-16T01:58:49.397Z</updated>
    
    <content type="html"><![CDATA[<p>当把一个事件发布到Spring提供的<code>ApplicationContext</code>中，被监听器侦测到，就会执行对应的处理方法。</p>
<h1 id="事件本身"><a href="#事件本身" class="headerlink" title="事件本身"></a>事件本身</h1><p>事件是一个自定义的类，需要继承Spring提供的<code>ApplicationEvent</code>。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Data</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyEvent</span> <span class="keyword">extends</span> <span class="title">ApplicationEvent</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String msg;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyEvent</span><span class="params">(Object source, String msg)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(source);</div><div class="line">        <span class="keyword">this</span>.msg = msg;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h1 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h1><p>基本方法是实现<code>ApplicationListener</code>接口，自定义一个监听器，实现<code>onApplicationEvent()</code>方法，然后添加到<code>ApplicationContext</code>。<br>比如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyListener</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">MyEvent</span>&gt; </span>&#123;  </div><div class="line"></div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(MyEvent event)</span> </span>&#123;  </div><div class="line">        System.out.print(<span class="string">"监听到MyEvent事件"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">...</div><div class="line"><span class="comment">// SpringBoot的启动类中添加监听器</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		SpringApplication application = <span class="keyword">new</span> SpringApplication(MyApplication.class);</div><div class="line">		application.addListeners(<span class="keyword">new</span> MyListener());</div><div class="line">		application.run(args);</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>也可以使用注解<code>@EventListener</code>（推荐）：原理就是通过扫描这个注解，创建监听器并添加到<code>ApplicationContext</code>。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@Slf</span>4j</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyEventHandler</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@EventListener</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleEvent</span><span class="params">(MyEvent event)</span> </span>&#123;</div><div class="line">        log.info(<span class="string">"------------处理事件：&#123;&#125;"</span>, event.getMsg());</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Thread.sleep(<span class="number">5</span> * <span class="number">1000L</span>);</div><div class="line">            log.info(<span class="string">"事件1(5s)处理完成"</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="事件发布"><a href="#事件发布" class="headerlink" title="事件发布"></a>事件发布</h1><p>可以通过上下文对象的发布方法<code>ConfigurableApplicationContext::publishEvent()</code>来发布。<br>也可以实现<code>ApplicationEventPublisherAware</code>接口来发布（推荐）。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@Slf</span>4j</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventService</span> <span class="keyword">implements</span> <span class="title">ApplicationEventPublisherAware</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> ApplicationEventPublisher publisher;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationEventPublisher</span><span class="params">(ApplicationEventPublisher applicationEventPublisher)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.publisher = applicationEventPublisher;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doEventWork</span><span class="params">(String msg)</span> </span>&#123;</div><div class="line">        log.info(<span class="string">"------------publish event:"</span> + msg);</div><div class="line">        MyEvent event = <span class="keyword">new</span> MyEvent(<span class="keyword">this</span>, msg);</div><div class="line">        publisher.publishEvent(event);</div><div class="line">        <span class="keyword">return</span> <span class="string">"OK"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootTest</span></div><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventServiceTest</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> EventService service;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eventTest</span><span class="params">()</span> </span>&#123;</div><div class="line">        String msg=<span class="string">"Java Code"</span>;</div><div class="line">        service.doEventWork(msg);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://user-gold-cdn.xitu.io/2018/6/15/16402c8b84e8e00b?w=1371&amp;h=78&amp;f=png&amp;s=15710" alt=""></p>
<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>如果2个事件之间是继承关系，会先监听到子类事件，处理完再监听父类。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MyEvent2 extends MyEvent</span></div><div class="line"></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@Slf</span>4j</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyEventHandler</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@EventListener</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleEvent</span><span class="params">(MyEvent event)</span> </span>&#123;</div><div class="line">        log.info(<span class="string">"------------处理事件：&#123;&#125;"</span>, event.getMsg());</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Thread.sleep(<span class="number">5</span> * <span class="number">1000L</span>);</div><div class="line">            log.info(<span class="string">"事件1(5s)处理完成"</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@EventListener</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleEvent2</span><span class="params">(MyEvent2 event)</span> </span>&#123;</div><div class="line">        log.info(<span class="string">"------------处理事件2：&#123;&#125;"</span>, event.getMsg());</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Thread.sleep(<span class="number">10</span> * <span class="number">1000L</span>);</div><div class="line">            log.info(<span class="string">"事件2(10s)处理完成"</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当我publish一个子类事件MyEvent2时，日志如下：<br><img src="https://user-gold-cdn.xitu.io/2018/6/15/16402ca4e7d6a8c4?w=1421&amp;h=136&amp;f=png&amp;s=33952" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当把一个事件发布到Spring提供的&lt;code&gt;ApplicationContext&lt;/code&gt;中，被监听器侦测到，就会执行对应的处理方法。&lt;/p&gt;
&lt;h1 id=&quot;事件本身&quot;&gt;&lt;a href=&quot;#事件本身&quot; class=&quot;headerlink&quot; title=&quot;事件本身&quot;&gt;&lt;/a&gt;事件本身&lt;/h1&gt;&lt;p&gt;事件是一个自定义的类，需要继承Spring提供的&lt;code&gt;ApplicationEvent&lt;/code&gt;。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Data&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyEvent&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ApplicationEvent&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String msg;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyEvent&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Object source, String msg)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(source);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.msg = msg;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="https://peijie-sh.github.io/categories/Spring/"/>
    
    
      <category term="SpringBoot" scheme="https://peijie-sh.github.io/tags/SpringBoot/"/>
    
      <category term="Event" scheme="https://peijie-sh.github.io/tags/Event/"/>
    
  </entry>
  
  <entry>
    <title>TCP的3次握手和4次挥手过程</title>
    <link href="https://peijie-sh.github.io/2018/04/09/TCP%E7%9A%843%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C4%E6%AC%A1%E6%8C%A5%E6%89%8B%E8%BF%87%E7%A8%8B/"/>
    <id>https://peijie-sh.github.io/2018/04/09/TCP的3次握手和4次挥手过程/</id>
    <published>2018-04-09T02:15:35.000Z</published>
    <updated>2018-04-14T12:45:39.754Z</updated>
    
    <content type="html"><![CDATA[<h1 id="建立连接（3次握手）"><a href="#建立连接（3次握手）" class="headerlink" title="建立连接（3次握手）"></a>建立连接（3次握手）</h1><p><img src="https://upload-images.jianshu.io/upload_images/4059338-8dec28773da8005b.png" alt="TCP3次握手.png"></p>
<a id="more"></a>
<ul>
<li>SYN是标志位，设置SYN=1，表示请求建立连接</li>
<li>服务端会同时和多个客户端建立连接，所以在报文交互时，需要带上序号seq，在响应是seq+1，以此来检测报文合法性</li>
</ul>
<h3 id="连接过程"><a href="#连接过程" class="headerlink" title="连接过程"></a>连接过程</h3><ul>
<li>客户端：我想建立一个连接。状态：CLOSED -&gt; SYN SENT</li>
<li>服务端：可以，我同意建立连接。状态：LISTEN -&gt; SYN RCVD</li>
<li>客户端：好的，我收到你的确认，我准备好接收数据了。状态：SYN SENT -&gt; ESTABLISHED</li>
<li>服务端听到客户端准备好了，也进入准备状态。状态：SYN RCVD -&gt; ESTABLISHED</li>
</ul>
<p>至此，TCP连接就建立完毕，开始互相发送数据了。</p>
<h1 id="断开连接（4次挥手）"><a href="#断开连接（4次挥手）" class="headerlink" title="断开连接（4次挥手）"></a>断开连接（4次挥手）</h1><p><img src="https://upload-images.jianshu.io/upload_images/4059338-140f04e2f323b7b5.png" alt="TCP4次挥手.png"></p>
<ul>
<li>FIN是标志位，设置FIN=1，表示请求断开连接</li>
</ul>
<h3 id="断开连接过程"><a href="#断开连接过程" class="headerlink" title="断开连接过程"></a>断开连接过程</h3><ul>
<li>客户端：我数据发完了，我要断开连接了。状态：ESTABLISHED -&gt; FIN WAIT 1</li>
<li>服务端：好，我知道你要断开连接了。状态：ESTABLISHED -&gt; CLOSE WAIT</li>
</ul>
<p>此时，客户端确认服务端已经知道要断开了。但是，服务端可能还有数据没发送完，所以客户端还能接收数据但不会发送数据。状态：FIN WAIT 1 -&gt; FIN WAIT 2</p>
<p>过了一会，服务端数据发完了。</p>
<ul>
<li>服务端：我准备好了，断开连接吧。状态：CLOSE WAIT -&gt; LAST ACK</li>
<li>客户端：好，那我断开连接了，再见。状态：FIN WAIT 2 -&gt; TIME WAIT</li>
<li>服务端：客户端已经断开了，我也断开吧。状态：LAST ACK -&gt; CLOSED</li>
<li>客户端等待2个MSL时间以后断开连接，状态：TIME WAIT -&gt; CLOSED</li>
</ul>
<h1 id="TCP握手挥手的状态"><a href="#TCP握手挥手的状态" class="headerlink" title="TCP握手挥手的状态"></a>TCP握手挥手的状态</h1><table>
<thead>
<tr>
<th style="text-align:center">状态</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">CLOSED</td>
<td style="text-align:center">关闭状态，没有连接活动或正在进行</td>
</tr>
<tr>
<td style="text-align:center">LISTEN</td>
<td style="text-align:center">监听状态，服务器正在等待连接进入</td>
</tr>
<tr>
<td style="text-align:center">SYN SENT</td>
<td style="text-align:center">已经发出连接请求，等待确认</td>
</tr>
<tr>
<td style="text-align:center">SYN RCVD</td>
<td style="text-align:center">收到一个连接请求，尚未确认</td>
</tr>
<tr>
<td style="text-align:center">ESTABLISHED</td>
<td style="text-align:center">连接建立，正常数据传输状态</td>
</tr>
<tr>
<td style="text-align:center">FIN WAIT 1</td>
<td style="text-align:center">（主动关闭）已经发送关闭请求，等待确认</td>
</tr>
<tr>
<td style="text-align:center">FIN WAIT 2</td>
<td style="text-align:center">（主动关闭）收到对方关闭确认，等待对方关闭请求</td>
</tr>
<tr>
<td style="text-align:center">TIME WAIT</td>
<td style="text-align:center">完成双向关闭，等待所有分组死掉</td>
</tr>
<tr>
<td style="text-align:center">CLOSE WAIT</td>
<td style="text-align:center">（被动关闭）收到对方关闭请求，已经确认</td>
</tr>
<tr>
<td style="text-align:center">LAST ACK</td>
<td style="text-align:center">（被动关闭）等待最后一个关闭确认，并等待所有分组死掉</td>
</tr>
<tr>
<td style="text-align:center">CLOSING</td>
<td style="text-align:center">双方同时尝试关闭，等待对方确认</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;建立连接（3次握手）&quot;&gt;&lt;a href=&quot;#建立连接（3次握手）&quot; class=&quot;headerlink&quot; title=&quot;建立连接（3次握手）&quot;&gt;&lt;/a&gt;建立连接（3次握手）&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/4059338-8dec28773da8005b.png&quot; alt=&quot;TCP3次握手.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="工具杂谈" scheme="https://peijie-sh.github.io/categories/%E5%B7%A5%E5%85%B7%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="TCP/IP" scheme="https://peijie-sh.github.io/tags/TCP-IP/"/>
    
  </entry>
  
  <entry>
    <title>JDK8和JDK9双版本共存</title>
    <link href="https://peijie-sh.github.io/2017/09/30/JDK8%E5%92%8CJDK9%E5%8F%8C%E7%89%88%E6%9C%AC%E5%85%B1%E5%AD%98/"/>
    <id>https://peijie-sh.github.io/2017/09/30/JDK8和JDK9双版本共存/</id>
    <published>2017-09-30T02:11:25.000Z</published>
    <updated>2018-04-14T12:45:39.668Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/4059338-19a112548aeefa7b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="java9.jpg"></p>
<a id="more"></a>
<p>以前安装JDK，需要手动配置环境变量。JDK8多了自动配置环境变量，所以可以不用手动配置。<br>如果我已经装了JDK8，还想再装一个JDK9，安装完，自动配置的环境变量会指向JDK9版本。</p>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><ol>
<li>删除自动配置的环境变量<br>自动配置的环境变量是一个隐藏目录：<code>C:\ProgramData\Oracle\Java\javapath</code>，删掉这个目录下的3个exe文件，系统就无法匹配到了。</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/4059338-8a87044b407e014f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="jdk.png"></p>
<ol>
<li>手动配置环境变量<br>自动匹配是匹配不到了，所以我们用老办法，手动配置环境变量即可。<br>这样，我们可以根据环境变量里配置的JDK版本去实现版本切换了。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4059338-19a112548aeefa7b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;java9.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://peijie-sh.github.io/categories/Java/"/>
    
    
      <category term="JDK" scheme="https://peijie-sh.github.io/tags/JDK/"/>
    
  </entry>
  
  <entry>
    <title>搭建日志分析系统ELK</title>
    <link href="https://peijie-sh.github.io/2017/08/18/%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%E7%B3%BB%E7%BB%9FELK/"/>
    <id>https://peijie-sh.github.io/2017/08/18/搭建日志分析系统ELK/</id>
    <published>2017-08-18T06:11:43.000Z</published>
    <updated>2018-04-14T12:45:39.763Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/4059338-cf6a458b1e4dc0e5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="elasticsearch.jpg"></p>
<h1 id="日志分析组件3件套："><a href="#日志分析组件3件套：" class="headerlink" title="日志分析组件3件套："></a>日志分析组件3件套：</h1><ul>
<li>E：<code>Elasticsearch</code>是一个搜索引擎，基于<code>Lucene</code>，天然分布式，很容易水平扩展，屏蔽了复杂的分布式概念，对外提供<code>RESTful</code>API。</li>
<li>L：<code>Logstash</code>用于收集日志，写入<code>Elasticsearch</code>。</li>
<li>K：<code>Kibana</code>是一个展示层，基于NodeJS，可以图标形式展示数据，界面简洁。<a id="more"></a>
这3大组件，都可以在 <a href="https://www.elastic.co/cn/products" target="_blank" rel="external">这里</a> 直接下载。</li>
</ul>
<h1 id="搭建安装步骤："><a href="#搭建安装步骤：" class="headerlink" title="搭建安装步骤："></a>搭建安装步骤：</h1><ul>
<li><p>下载elasticsearch，解压后，运行<code>bin/elasticsearch -d</code>，以守护进程形式启动，打开localhost:9200会返回json信息如下，说明启动成功。<br><img src="http://upload-images.jianshu.io/upload_images/4059338-38c4534a2a73570c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="json.png"></p>
</li>
<li><p>下载Logstash，解压，在/bin/config下创建一个配置文件<code>vi logstash.conf</code>。</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">input &#123;</div><div class="line">  tcp &#123;</div><div class="line">    host =&gt; <span class="string">"192.168.1.91"</span> <span class="comment"># 要监听的日志来源地址</span></div><div class="line">    port =&gt; 4567</div><div class="line">    mode =&gt; <span class="string">"server"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">output &#123;</div><div class="line">  stdout&#123; codec =&gt; rubydebug &#125;</div><div class="line">  elasticsearch &#123;</div><div class="line">    hosts =&gt; [<span class="string">"192.168.1.91:9200"</span>]  <span class="comment"># elasticsearch中配置的host地址</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>指定配置文件并后台启动：<code>bin/logstash -f logstash.conf &amp;</code>。</li>
<li>在你的应用程序中配置日志输出到<code>Logstash</code>，比如<code>Logback.xml</code><ol>
<li>引入logstash-logback-encoder：<code>compile group: &#39;net.logstash.logback&#39;, name: &#39;logstash-logback-encoder&#39;, version: &#39;4.11&#39;</code></li>
<li>配置logback.xml</li>
</ol>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"stash"</span> <span class="attr">class</span>=<span class="string">"net.logstash.logback.appender.LogstashTcpSocketAppender"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">destination</span>&gt;</span>192.168.1.91:4567<span class="tag">&lt;/<span class="name">destination</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- encoder is required --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">"net.logstash.logback.encoder.LogstashEncoder"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"stdout"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"fileout"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"stash"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>下载Kibana，解压后启动：<code>bin/kibana &amp;</code>，打开<code>localhost:5601</code>即可。</li>
</ul>
<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ul>
<li>在安装Elasticsearch的时候，配置文件中我们把network.host改为0.0.0.0允许远程访问后，启动会报错，请按照 <a href="http://blog.csdn.net/u012246178/article/details/63253531" target="_blank" rel="external">如下操作</a>，放开linux的系统限制。</li>
<li><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html" target="_blank" rel="external">Elasticsearch入门参考手册</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4059338-cf6a458b1e4dc0e5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;elasticsearch.jpg&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;日志分析组件3件套：&quot;&gt;&lt;a href=&quot;#日志分析组件3件套：&quot; class=&quot;headerlink&quot; title=&quot;日志分析组件3件套：&quot;&gt;&lt;/a&gt;日志分析组件3件套：&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;E：&lt;code&gt;Elasticsearch&lt;/code&gt;是一个搜索引擎，基于&lt;code&gt;Lucene&lt;/code&gt;，天然分布式，很容易水平扩展，屏蔽了复杂的分布式概念，对外提供&lt;code&gt;RESTful&lt;/code&gt;API。&lt;/li&gt;
&lt;li&gt;L：&lt;code&gt;Logstash&lt;/code&gt;用于收集日志，写入&lt;code&gt;Elasticsearch&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;K：&lt;code&gt;Kibana&lt;/code&gt;是一个展示层，基于NodeJS，可以图标形式展示数据，界面简洁。
    
    </summary>
    
      <category term="NoSQL" scheme="https://peijie-sh.github.io/categories/NoSQL/"/>
    
    
      <category term="Logback" scheme="https://peijie-sh.github.io/tags/Logback/"/>
    
      <category term="Elasticsearch" scheme="https://peijie-sh.github.io/tags/Elasticsearch/"/>
    
      <category term="Logstash" scheme="https://peijie-sh.github.io/tags/Logstash/"/>
    
      <category term="Kibana" scheme="https://peijie-sh.github.io/tags/Kibana/"/>
    
  </entry>
  
  <entry>
    <title>Java8学习笔记之新日期API</title>
    <link href="https://peijie-sh.github.io/2017/05/08/Java8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%96%B0%E6%97%A5%E6%9C%9FAPI/"/>
    <id>https://peijie-sh.github.io/2017/05/08/Java8学习笔记之新日期API/</id>
    <published>2017-05-08T09:10:12.000Z</published>
    <updated>2017-06-24T12:19:27.315Z</updated>
    
    <content type="html"><![CDATA[<p>Java8对日期API做了改进，提供了许多好用的方法和接口。<br>首先，最基本也最重要的3个对象：</p>
<ul>
<li><code>LocalDate</code>：日期对象</li>
<li><code>LocalTime</code>：时间对象</li>
<li><code>LocalDateTime</code>：日期时间对象，是<code>LocalDate</code>和<code>LocalTime</code>的合集</li>
</ul>
<h1 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h1><p>以上这3个对象，都各自有3种创建方式。</p>
<ol>
<li>通过<code>.now()</code>得到当前日期时间对象。</li>
<li>通过<code>.of()</code>直接指定年月日，时分秒。</li>
<li><code>LocalDate</code>和<code>LocalTime</code>通过解析字符串创建，<code>LocalDateTime</code>可以通过前2个对象创建。</li>
</ol>
<a id="more"></a>
<h2 id="LocalDate对象3种创建方式以及相关方法示例"><a href="#LocalDate对象3种创建方式以及相关方法示例" class="headerlink" title="LocalDate对象3种创建方式以及相关方法示例"></a>LocalDate对象3种创建方式以及相关方法示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">localDate</span><span class="params">()</span> </span>&#123;</div><div class="line">    LocalDate date = LocalDate.of(<span class="number">2017</span>, <span class="number">5</span>, <span class="number">3</span>);</div><div class="line">    <span class="keyword">int</span> year = date.getYear();<span class="comment">// 2017</span></div><div class="line">    Month month = date.getMonth();<span class="comment">// MAY</span></div><div class="line">    <span class="keyword">int</span> day = date.getDayOfMonth();<span class="comment">// 3</span></div><div class="line">    DayOfWeek dow = date.getDayOfWeek();<span class="comment">// Wednesday</span></div><div class="line">    <span class="keyword">int</span> len = date.lengthOfMonth();<span class="comment">// 31</span></div><div class="line">    <span class="keyword">boolean</span> leap = date.isLeapYear();<span class="comment">// false</span></div><div class="line">    System.out.println(year + <span class="string">", "</span> + month + <span class="string">", "</span> + day + <span class="string">", "</span> + dow + <span class="string">", "</span> + len + <span class="string">", "</span> + leap);</div><div class="line"></div><div class="line">    LocalDate date2 = LocalDate.now();</div><div class="line">    <span class="keyword">int</span> year2 = date2.get(ChronoField.YEAR);<span class="comment">// 2017</span></div><div class="line">    <span class="keyword">int</span> month2 = date2.get(ChronoField.MONTH_OF_YEAR);<span class="comment">// 5</span></div><div class="line">    <span class="keyword">int</span> day2 = date2.get(ChronoField.DAY_OF_MONTH);<span class="comment">// 3</span></div><div class="line">    <span class="keyword">int</span> dow2 = date2.get(ChronoField.DAY_OF_WEEK);<span class="comment">// 3</span></div><div class="line">    System.out.println(year2 + <span class="string">", "</span> + month2 + <span class="string">", "</span> + day2 + <span class="string">", "</span> + dow2);</div><div class="line"></div><div class="line">    <span class="comment">// 写2017-3-18会报错，DateTimeParseException异常，可以传一个DateTimeFormatter自定义格式</span></div><div class="line">    LocalDate date3 = LocalDate.parse(<span class="string">"2017-03-18"</span>);</div><div class="line">    <span class="keyword">int</span> year3 = date3.get(ChronoField.YEAR);</div><div class="line">    <span class="keyword">int</span> month3 = date3.get(ChronoField.MONTH_OF_YEAR);</div><div class="line">    <span class="keyword">int</span> day3 = date3.get(ChronoField.DAY_OF_MONTH);</div><div class="line">    <span class="keyword">int</span> dow3 = date3.get(ChronoField.DAY_OF_WEEK);</div><div class="line">    System.out.println(year3 + <span class="string">", "</span> + month3 + <span class="string">", "</span> + day3 + <span class="string">", "</span> + dow3);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="LocalTime对象3种创建方式以及相关方法示例"><a href="#LocalTime对象3种创建方式以及相关方法示例" class="headerlink" title="LocalTime对象3种创建方式以及相关方法示例"></a>LocalTime对象3种创建方式以及相关方法示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">localTime</span><span class="params">()</span> </span>&#123;</div><div class="line">    LocalTime time = LocalTime.of(<span class="number">11</span>, <span class="number">06</span>, <span class="number">23</span>);</div><div class="line">    <span class="keyword">int</span> hour = time.getHour();</div><div class="line">    <span class="keyword">int</span> minute = time.getMinute();</div><div class="line">    <span class="keyword">int</span> second = time.getSecond();</div><div class="line">    System.out.println(hour + <span class="string">":"</span> + minute + <span class="string">":"</span> + second);</div><div class="line"></div><div class="line">    LocalTime time2 = LocalTime.now();</div><div class="line">    <span class="keyword">int</span> hour2 = time2.get(ChronoField.HOUR_OF_DAY);</div><div class="line">    <span class="keyword">int</span> minute2 = time2.get(ChronoField.MINUTE_OF_HOUR);</div><div class="line">    <span class="keyword">int</span> second2 = time2.get(ChronoField.SECOND_OF_MINUTE);</div><div class="line">    System.out.println(hour2 + <span class="string">":"</span> + minute2 + <span class="string">":"</span> + second2);</div><div class="line"></div><div class="line">    <span class="comment">// 写13:5:43会报错，DateTimeParseException异常，可以传一个DateTimeFormatter自定义格式</span></div><div class="line">    LocalTime time3 = LocalTime.parse(<span class="string">"13:05:43"</span>);</div><div class="line">    <span class="keyword">int</span> hour3 = time3.get(ChronoField.HOUR_OF_DAY);</div><div class="line">    <span class="keyword">int</span> minute3 = time3.get(ChronoField.MINUTE_OF_HOUR);</div><div class="line">    <span class="keyword">int</span> second3 = time3.get(ChronoField.SECOND_OF_MINUTE);</div><div class="line">    System.out.println(hour3 + <span class="string">":"</span> + minute3 + <span class="string">":"</span> + second3);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="LocalDateTime对象3种创建方式以及相关方法示例"><a href="#LocalDateTime对象3种创建方式以及相关方法示例" class="headerlink" title="LocalDateTime对象3种创建方式以及相关方法示例"></a>LocalDateTime对象3种创建方式以及相关方法示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">localDateTime</span><span class="params">()</span> </span>&#123;</div><div class="line">    LocalDate date = LocalDate.now();</div><div class="line">    LocalTime time = LocalTime.now();</div><div class="line"></div><div class="line">    <span class="comment">// 创建LocalDateTime</span></div><div class="line">    LocalDateTime dateTime = LocalDateTime.of(<span class="number">2017</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">11</span>, <span class="number">53</span>, <span class="number">23</span>);</div><div class="line">    LocalDateTime dateTime2 = LocalDateTime.of(date, time);</div><div class="line">    LocalDateTime dateTime3 = date.atTime(<span class="number">11</span>, <span class="number">53</span>, <span class="number">23</span>);</div><div class="line">    LocalDateTime dateTime4 = date.atTime(time);</div><div class="line">    LocalDateTime dateTime6 = time.atDate(date);</div><div class="line"></div><div class="line">    <span class="comment">// 转化</span></div><div class="line">    LocalDate date2 = dateTime2.toLocalDate();</div><div class="line">    LocalTime time2 = dateTime2.toLocalTime();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="时间间隔对象"><a href="#时间间隔对象" class="headerlink" title="时间间隔对象"></a>时间间隔对象</h1><ul>
<li><code>Duration</code>：可以传2个localTime对象，localDateTime对象或者Instant对象</li>
<li><code>Period</code>：用年，月，日建模，可以传2个localDate对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">between</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">//        Duration d1 = Duration.between(time1, time2);</span></div><div class="line"><span class="comment">//        Duration d2 = Duration.between(dateTime1, dateTime2);</span></div><div class="line"><span class="comment">//        Duration d3 = Duration.between(instant1, instant2);</span></div><div class="line">        Period tenDays = Period.between(LocalDate.of(<span class="number">2014</span>, <span class="number">3</span>, <span class="number">8</span>), LocalDate.of(<span class="number">2014</span>, <span class="number">3</span>, <span class="number">18</span>));</div><div class="line"></div><div class="line">        Duration threeMinutes = Duration.ofMinutes(<span class="number">3</span>);</div><div class="line">        Duration threeMinutes2 = Duration.of(<span class="number">3</span>, ChronoUnit.MINUTES);</div><div class="line">        Period tenDays2 = Period.ofDays(<span class="number">10</span>);</div><div class="line">        Period threeWeeks = Period.ofWeeks(<span class="number">3</span>);</div><div class="line">        Period twoYearsSixMonthsOneDay = Period.of(<span class="number">2</span>, <span class="number">6</span>, <span class="number">1</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h1 id="修改日期时间对象"><a href="#修改日期时间对象" class="headerlink" title="修改日期时间对象"></a>修改日期时间对象</h1><h2 id="直接使用-with-来修改对应的年月日时分秒属性"><a href="#直接使用-with-来修改对应的年月日时分秒属性" class="headerlink" title="直接使用.with()来修改对应的年月日时分秒属性"></a>直接使用<code>.with()</code>来修改对应的年月日时分秒属性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">editDateTime</span><span class="params">()</span> </span>&#123;</div><div class="line">    LocalDate date1 = LocalDate.of(<span class="number">2014</span>, <span class="number">3</span>, <span class="number">18</span>);<span class="comment">// 2014-03-18</span></div><div class="line">    LocalDate date2 = date1.withYear(<span class="number">2011</span>);<span class="comment">// 2011-03-18</span></div><div class="line">    LocalDate date3 = date2.withDayOfMonth(<span class="number">25</span>);<span class="comment">// 2011-03-25</span></div><div class="line">    LocalDate date4 = date3.with(ChronoField.MONTH_OF_YEAR, <span class="number">9</span>);<span class="comment">// 2011-09-25</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="在现有对象上做相对修改"><a href="#在现有对象上做相对修改" class="headerlink" title="在现有对象上做相对修改"></a>在现有对象上做相对修改</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">editDateTime</span><span class="params">()</span> </span>&#123;</div><div class="line">    LocalDate date1 = LocalDate.of(<span class="number">2014</span>, <span class="number">3</span>, <span class="number">18</span>);<span class="comment">// 2014-03-18</span></div><div class="line">    LocalDate date2 = date1.plusWeeks(<span class="number">1</span>);<span class="comment">// 2014-03-25</span></div><div class="line">    LocalDate date3 = date2.minusYears(<span class="number">3</span>);<span class="comment">// 2011-03-25</span></div><div class="line">    LocalDate date4 = date3.plus(<span class="number">6</span>, ChronoUnit.MONTHS);<span class="comment">// 2011-09-25</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="自定义修改日期"><a href="#自定义修改日期" class="headerlink" title="自定义修改日期"></a>自定义修改日期</h2><p>如果要对日期做一些复杂的修改，那么可以通过<code>TemporalAdjusters</code>接口实现复杂逻辑。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">adjust</span><span class="params">()</span> </span>&#123;</div><div class="line">    LocalDate date1 = LocalDate.of(<span class="number">2017</span>, <span class="number">5</span>, <span class="number">8</span>);<span class="comment">// 2017-05-08</span></div><div class="line">    LocalDate date2 = date1.with(TemporalAdjusters.nextOrSame(DayOfWeek.SUNDAY));<span class="comment">// 2017-05-14</span></div><div class="line">    LocalDate date3 = date2.with(TemporalAdjusters.lastDayOfMonth());<span class="comment">// 2017-05-31</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>jdk为我们实现了一些常用的方法：</p>
<ul>
<li>dayOfWeekInMonth：创建一个新的日期，它的值为同一个月中每一周的第几天</li>
<li>firstDayOfMonth：创建一个新的日期，它的值为当月的第一天</li>
<li>firstDayOfNextMonth：创建一个新的日期，它的值为下月的第一天</li>
<li>firstDayOfNextYear：创建一个新的日期，它的值为明年的第一天</li>
<li>firstDayOfYear：创建一个新的日期，它的值为当年的第一天</li>
<li>firstInMonth：创建一个新的日期，它的值为同一个月中，第一个符合星期几要求的值</li>
<li>lastDayOfMonth：创建一个新的日期，它的值为当月的最后一天</li>
<li>lastDayOfNextMonth：创建一个新的日期，它的值为下月的最后一天</li>
<li>lastDayOfNextYear：创建一个新的日期，它的值为明年的最后一天</li>
<li>lastDayOfYear：创建一个新的日期，它的值为今年的最后一天</li>
<li>lastInMonth：创建一个新的日期，它的值为同一个月中，最后一个符合星期几要求的值</li>
<li>next/previous：创建一个新的日期，并将其值设定为日期调整后或者调整前，第一个符合指定星期几要求的日期</li>
<li>nextOrSame/previousOrSame：创建一个新的日期，并将其值设定为日期调整后或者调整前，第一个符合指定星期几要求的日期，如果该日期已经符合要求，直接返回该对象</li>
</ul>
<h1 id="自定义格式化输出日期"><a href="#自定义格式化输出日期" class="headerlink" title="自定义格式化输出日期"></a>自定义格式化输出日期</h1><p>新版本，我们拥有一个线程安全的类：<code>DateTimeFormatter</code><br>来看代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">formatPrint</span><span class="params">()</span> </span>&#123;</div><div class="line">    LocalDate date = LocalDate.of(<span class="number">2014</span>, <span class="number">3</span>, <span class="number">18</span>);</div><div class="line">    String s1 = date.format(DateTimeFormatter.BASIC_ISO_DATE);<span class="comment">// 20140318</span></div><div class="line">    String s2 = date.format(DateTimeFormatter.ISO_LOCAL_DATE);<span class="comment">// 2014-03-18</span></div><div class="line"></div><div class="line">    LocalDate date1 = LocalDate.parse(<span class="string">"20140318"</span>, DateTimeFormatter.BASIC_ISO_DATE);</div><div class="line">    LocalDate date2 = LocalDate.parse(<span class="string">"2014-03-18"</span>, DateTimeFormatter.ISO_LOCAL_DATE);</div><div class="line"></div><div class="line">    <span class="comment">// 自定义格式</span></div><div class="line">    DateTimeFormatter formatter = DateTimeFormatter.ofPattern(<span class="string">"dd/MM/yyyy"</span>);</div><div class="line">    String formattedDate = date.format(formatter);</div><div class="line">    System.out.println(formattedDate);<span class="comment">// 18/03/2014</span></div><div class="line">    LocalDate date3 = LocalDate.parse(formattedDate, formatter);</div><div class="line"></div><div class="line">    <span class="comment">// 带时区的日期(本地化)</span></div><div class="line">    DateTimeFormatter italianFormatter = DateTimeFormatter.ofPattern(<span class="string">"d. MMMM yyyy"</span>, Locale.ITALIAN);</div><div class="line">    String formattedDate2 = date.format(italianFormatter); <span class="comment">// 18. marzo 2014</span></div><div class="line">    LocalDate date4 = LocalDate.parse(formattedDate2, italianFormatter);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java8对日期API做了改进，提供了许多好用的方法和接口。&lt;br&gt;首先，最基本也最重要的3个对象：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LocalDate&lt;/code&gt;：日期对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LocalTime&lt;/code&gt;：时间对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LocalDateTime&lt;/code&gt;：日期时间对象，是&lt;code&gt;LocalDate&lt;/code&gt;和&lt;code&gt;LocalTime&lt;/code&gt;的合集&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;对象的创建&quot;&gt;&lt;a href=&quot;#对象的创建&quot; class=&quot;headerlink&quot; title=&quot;对象的创建&quot;&gt;&lt;/a&gt;对象的创建&lt;/h1&gt;&lt;p&gt;以上这3个对象，都各自有3种创建方式。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过&lt;code&gt;.now()&lt;/code&gt;得到当前日期时间对象。&lt;/li&gt;
&lt;li&gt;通过&lt;code&gt;.of()&lt;/code&gt;直接指定年月日，时分秒。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LocalDate&lt;/code&gt;和&lt;code&gt;LocalTime&lt;/code&gt;通过解析字符串创建，&lt;code&gt;LocalDateTime&lt;/code&gt;可以通过前2个对象创建。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Java" scheme="https://peijie-sh.github.io/categories/Java/"/>
    
    
      <category term="时间日期API" scheme="https://peijie-sh.github.io/tags/%E6%97%B6%E9%97%B4%E6%97%A5%E6%9C%9FAPI/"/>
    
      <category term="java8" scheme="https://peijie-sh.github.io/tags/java8/"/>
    
  </entry>
  
  <entry>
    <title>Java8学习笔记之Stream API</title>
    <link href="https://peijie-sh.github.io/2017/04/26/Java8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8BStream%20API/"/>
    <id>https://peijie-sh.github.io/2017/04/26/Java8学习笔记之Stream API/</id>
    <published>2017-04-26T03:28:37.000Z</published>
    <updated>2017-06-24T12:19:27.314Z</updated>
    
    <content type="html"><![CDATA[<p>Stream是Java8引入的一个重度使用lambda表达式的API。<br>Stream可以用流的方式处理数据集合，在Java8之前，我们处理这些集合，是需要迭代器的，比如iterator，这是外部迭代；而Stream是内部迭代，我们不用关心集合内部元素是如何迭代的，计算机会自动帮我们选择最适合的实现方式。</p>
<h1 id="如何创建一个流"><a href="#如何创建一个流" class="headerlink" title="如何创建一个流"></a>如何创建一个流</h1><ol>
<li>最常见的，有一个集合对象<code>List&lt;String&gt; strs = Arrays.asList(&quot;Java 8 &quot;, &quot;Lambdas &quot;, &quot;In &quot;, &quot;Action&quot;);</code>，直接调用<code>strs.stream()</code>就得到一个<code>Stream&lt;String&gt;</code>的流。<br>如果想使用并行流增加性能，请使用<code>strs.parallelStream()</code>，或<code>strs.stream().parallel()</code>。</li>
<li>由值创建：<code>Stream&lt;String&gt; stream = Stream.of(&quot;Java 8 &quot;, &quot;Lambdas &quot;, &quot;In &quot;, &quot;Action&quot;);</code><a id="more"></a></li>
<li><p>由数组创建：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span>[] numbers = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>&#125;;</div><div class="line"><span class="keyword">int</span> sum = Arrays.stream(numbers).sum();</div></pre></td></tr></table></figure>
</li>
<li><p>由文件创建：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 统计文本文件中有多少个不同的单词</span></div><div class="line"><span class="keyword">long</span> uniqueWords = <span class="number">0</span>;</div><div class="line"><span class="keyword">try</span> (Stream&lt;String&gt; lines = Files.lines(Paths.get(<span class="string">"data.txt"</span>), Charset.defaultCharset())) &#123;</div><div class="line">    uniqueWords = lines.flatMap(line -&gt; Arrays.stream(line.split(<span class="string">" "</span>)))</div><div class="line">            .distinct()</div><div class="line">            .count();</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>由函数生成流：<code>Stream.iterate()</code>和<code>Stream.generate()</code>可以生产无限流，即元素有无穷多个。一般来说，应该使用limit(n)来对这种流加以限制，以避免产生无穷多个元素。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">iterator</span><span class="params">()</span> </span>&#123;</div><div class="line">    Stream.iterate(<span class="number">0</span>, n -&gt; n + <span class="number">2</span>).limit(<span class="number">10</span>).forEach(System.out::println);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generate</span><span class="params">()</span> </span>&#123;</div><div class="line">    Stream.generate(Math::random).limit(<span class="number">5</span>).forEach(System.out::println);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="Stream常用方法"><a href="#Stream常用方法" class="headerlink" title="Stream常用方法"></a>Stream常用方法</h1><blockquote>
<p>Stream API 支持两种类型的操作：中间操作（如filter或map）和终端操作（如count、findFirst、forEach和reduce）。</p>
</blockquote>
<p>我用一个筛选菜单的需求作为示例。</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dish</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String name;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> vegetarian;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> calories;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Type type;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Dish</span><span class="params">(String name, <span class="keyword">boolean</span> vegetarian, <span class="keyword">int</span> calories, Type type)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.name = name;</div><div class="line">            <span class="keyword">this</span>.vegetarian = vegetarian;</div><div class="line">            <span class="keyword">this</span>.calories = calories;</div><div class="line">            <span class="keyword">this</span>.type = type;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> name;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isVegetarian</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> vegetarian;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCalories</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> calories;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Type <span class="title">getType</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> type;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> name;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Type &#123;MEAT, FISH, OTHER&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> List&lt;Dish&gt; <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Arrays.asList(</div><div class="line">                <span class="keyword">new</span> Dish(<span class="string">"pork"</span>, <span class="keyword">false</span>, <span class="number">800</span>, Type.MEAT),</div><div class="line">                <span class="keyword">new</span> Dish(<span class="string">"beef"</span>, <span class="keyword">false</span>, <span class="number">700</span>, Type.MEAT),</div><div class="line">                <span class="keyword">new</span> Dish(<span class="string">"chicken"</span>, <span class="keyword">false</span>, <span class="number">400</span>, Type.MEAT),</div><div class="line">                <span class="keyword">new</span> Dish(<span class="string">"french fries"</span>, <span class="keyword">true</span>, <span class="number">530</span>, Type.OTHER),</div><div class="line">                <span class="keyword">new</span> Dish(<span class="string">"rice"</span>, <span class="keyword">true</span>, <span class="number">350</span>, Type.OTHER),</div><div class="line">                <span class="keyword">new</span> Dish(<span class="string">"season fruit"</span>, <span class="keyword">true</span>, <span class="number">120</span>, Type.OTHER),</div><div class="line">                <span class="keyword">new</span> Dish(<span class="string">"pizza"</span>, <span class="keyword">true</span>, <span class="number">550</span>, Type.OTHER),</div><div class="line">                <span class="keyword">new</span> Dish(<span class="string">"prawns"</span>, <span class="keyword">false</span>, <span class="number">300</span>, Type.FISH),</div><div class="line">                <span class="keyword">new</span> Dish(<span class="string">"salmon"</span>, <span class="keyword">false</span>, <span class="number">450</span>, Type.FISH));</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="过滤筛选"><a href="#过滤筛选" class="headerlink" title="过滤筛选"></a>过滤筛选</h2><blockquote>
<p>谓词：返回boolean的函数</p>
</blockquote>
<ul>
<li><p>filter()：接受一个谓词，返回符合条件的元素集合</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">filter</span><span class="params">()</span> </span>&#123;</div><div class="line">    List&lt;Dish&gt; menu = init();</div><div class="line">    List&lt;Dish&gt; vegetarianMenu = menu.stream()</div><div class="line">            .filter(Dish::isVegetarian)</div><div class="line">            .collect(Collectors.toList());</div><div class="line">    Assert.assertEquals(<span class="number">4</span>, vegetarianMenu.size());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>distinct()：返回集合中各异的元素集合(去重)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">distinct</span><span class="params">()</span> </span>&#123;</div><div class="line">    List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>);</div><div class="line">    numbers.stream().distinct().forEach(System.out::println);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>limit()：截取流中指定数量的元素，返回一个不超过给定长度的流。如果流是有序的，则最多会返回前n个元素。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">``` java</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">limit</span><span class="params">()</span> </span>&#123;</div><div class="line">        List&lt;Dish&gt; menu = init();</div><div class="line">        menu.stream()</div><div class="line">                .filter(d -&gt; d.getCalories() &gt; <span class="number">300</span>)</div><div class="line">                .limit(<span class="number">3</span>)</div><div class="line">                .forEach(System.out::println);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>skip()：跳过指定数量元素，返回一个扔掉了前n个元素的流。如果流中元素不足n个，则返回一个空流。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">skip</span><span class="params">()</span> </span>&#123;</div><div class="line">    List&lt;Dish&gt; menu = init();</div><div class="line">    menu.stream()</div><div class="line">            .filter(d -&gt; d.getCalories() &gt; <span class="number">300</span>)</div><div class="line">            .limit(<span class="number">3</span>)</div><div class="line">            .skip(<span class="number">2</span>)</div><div class="line">            .forEach(System.out::println);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h2><ul>
<li><p>map()：接受一个函数作为参数。这个函数会被应用到每个元素上，并将其映射成一个新的元素。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">()</span> </span>&#123;</div><div class="line">    List&lt;Dish&gt; menu = init();</div><div class="line">    List&lt;String&gt; dishNames = menu.stream().map(m -&gt; m.getName()).collect(Collectors.toList());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>flatMap()：一个流中的每个值都换成另一个流，然后把所有的流连接起来成为一个流，即扁平化为一个流。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flatMap</span><span class="params">()</span> </span>&#123;</div><div class="line">    String[] arrayOfWords = &#123;<span class="string">"Goodbye"</span>, <span class="string">"World"</span>&#125;;</div><div class="line">    List&lt;String&gt; words = Arrays.asList(arrayOfWords);</div><div class="line">    words.stream()</div><div class="line">            .map(w -&gt; w.split(<span class="string">""</span>))</div><div class="line">            .flatMap(Arrays::stream)</div><div class="line">            .distinct()</div><div class="line">            .forEach(System.out::println);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>上面例子中，<code>split()</code>得到的是String[] 而不是String，因此各个数组并不是分别映射成一个流，而是映射成流的内容。所有使用map(Arrays::stream)时生成的单个流都被合并起来，变为一个流。</p>
<h2 id="匹配"><a href="#匹配" class="headerlink" title="匹配"></a>匹配</h2><p>匹配比较简单，返回一个boolean</p>
<ul>
<li>anyMatch()：至少匹配一个</li>
<li>allMatch()：全部匹配</li>
<li>noneMatch()：全部不匹配，和allMatch相反</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">anyMatch</span><span class="params">()</span> </span>&#123;</div><div class="line">    List&lt;Dish&gt; menu = init();</div><div class="line">    Assert.assertEquals(<span class="keyword">true</span>, menu.stream().anyMatch(Dish::isVegetarian));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">allMatch</span><span class="params">()</span> </span>&#123;</div><div class="line">    List&lt;Dish&gt; menu = init();</div><div class="line">    Assert.assertEquals(<span class="keyword">true</span>, menu.stream().allMatch(d -&gt; d.getCalories() &lt; <span class="number">1000</span>));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">noneMatch</span><span class="params">()</span> </span>&#123;</div><div class="line">    List&lt;Dish&gt; menu = init();</div><div class="line">    Assert.assertEquals(<span class="keyword">true</span>, menu.stream().noneMatch(d -&gt; d.getCalories() &gt;= <span class="number">1000</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><p>查找有2个方法：<code>findFirst()</code>和<code>findAny()</code>，返回一个<code>Optional&lt;T&gt;</code>集合。<br>如果你不关心返回的元素是哪个，请使用<code>findAny()</code>，因为它在使用并行流时限制较少。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findFirst</span><span class="params">()</span> </span>&#123;</div><div class="line">    List&lt;Integer&gt; someNumbers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</div><div class="line">    Optional&lt;Integer&gt; firstSquareDivisibleByThree =</div><div class="line">            someNumbers.stream()</div><div class="line">                    .map(x -&gt; x * x)</div><div class="line">                    .filter(x -&gt; x % <span class="number">3</span> == <span class="number">0</span>)</div><div class="line">                    .findFirst(); <span class="comment">// 9</span></div><div class="line">    System.out.println(firstSquareDivisibleByThree.get());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAny</span><span class="params">()</span> </span>&#123;</div><div class="line">    List&lt;Integer&gt; someNumbers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</div><div class="line">    Optional&lt;Integer&gt; firstSquareDivisibleByThree =</div><div class="line">            someNumbers.stream()</div><div class="line">                    .map(x -&gt; x * x)</div><div class="line">                    .filter(x -&gt; x % <span class="number">3</span> == <span class="number">0</span>)</div><div class="line">                    .findAny(); <span class="comment">// 9</span></div><div class="line">    System.out.println(firstSquareDivisibleByThree.get());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="归约"><a href="#归约" class="headerlink" title="归约"></a>归约</h2><p>归约在汇总结合内所有数据的时候使用。比如求 max，min，sum。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">()</span> </span>&#123;</div><div class="line">    List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</div><div class="line">    <span class="keyword">int</span> sum = numbers.stream().reduce(<span class="number">0</span>, Integer::sum);</div><div class="line">    System.out.println(sum);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="原始类型流特化"><a href="#原始类型流特化" class="headerlink" title="原始类型流特化"></a>原始类型流特化</h1><p>流在内部迭代的过程中，对基本类型会自动装箱和拆箱。为了避免不需要的装箱拆箱，Java8提供了<code>IntStream</code>、<code>DoubleStream</code>和<code>LongStream</code></p>
<ul>
<li>普通流转特化流：mapToInt(), mapToLong(), mapToDouble()</li>
<li>特化流转普通流：boxed()</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">boxedStream</span><span class="params">()</span> </span>&#123;</div><div class="line">    List&lt;Dish&gt; menu = init();</div><div class="line">    <span class="comment">// 特化</span></div><div class="line">    IntStream intStream = menu.stream().mapToInt(Dish::getCalories);</div><div class="line">    <span class="comment">// 转回普通Stream</span></div><div class="line">    Stream&lt;Integer&gt; stream = intStream.boxed();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Java 8引入了两个可以用于IntStream和LongStream的静态方法，用于生成给定范围的数字流：</p>
<ul>
<li>range(min, max)：随机生成的数字不包含max，即(min, max)</li>
<li>rangeClosed(min, max)：随机生成的数字包含max，即(min, max]</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Stream是Java8引入的一个重度使用lambda表达式的API。&lt;br&gt;Stream可以用流的方式处理数据集合，在Java8之前，我们处理这些集合，是需要迭代器的，比如iterator，这是外部迭代；而Stream是内部迭代，我们不用关心集合内部元素是如何迭代的，计算机会自动帮我们选择最适合的实现方式。&lt;/p&gt;
&lt;h1 id=&quot;如何创建一个流&quot;&gt;&lt;a href=&quot;#如何创建一个流&quot; class=&quot;headerlink&quot; title=&quot;如何创建一个流&quot;&gt;&lt;/a&gt;如何创建一个流&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;最常见的，有一个集合对象&lt;code&gt;List&amp;lt;String&amp;gt; strs = Arrays.asList(&amp;quot;Java 8 &amp;quot;, &amp;quot;Lambdas &amp;quot;, &amp;quot;In &amp;quot;, &amp;quot;Action&amp;quot;);&lt;/code&gt;，直接调用&lt;code&gt;strs.stream()&lt;/code&gt;就得到一个&lt;code&gt;Stream&amp;lt;String&amp;gt;&lt;/code&gt;的流。&lt;br&gt;如果想使用并行流增加性能，请使用&lt;code&gt;strs.parallelStream()&lt;/code&gt;，或&lt;code&gt;strs.stream().parallel()&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;由值创建：&lt;code&gt;Stream&amp;lt;String&amp;gt; stream = Stream.of(&amp;quot;Java 8 &amp;quot;, &amp;quot;Lambdas &amp;quot;, &amp;quot;In &amp;quot;, &amp;quot;Action&amp;quot;);&lt;/code&gt;
    
    </summary>
    
      <category term="Java" scheme="https://peijie-sh.github.io/categories/Java/"/>
    
    
      <category term="java8" scheme="https://peijie-sh.github.io/tags/java8/"/>
    
      <category term="Stream API" scheme="https://peijie-sh.github.io/tags/Stream-API/"/>
    
  </entry>
  
  <entry>
    <title>Java8学习笔记之Lambda表达式</title>
    <link href="https://peijie-sh.github.io/2017/04/19/Java8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8BLambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://peijie-sh.github.io/2017/04/19/Java8学习笔记之Lambda表达式/</id>
    <published>2017-04-19T08:40:34.000Z</published>
    <updated>2017-06-24T12:19:27.314Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/4059338-39a526e6dbd5707d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Lambda.jpg"><br>使用Lambda表达式，我们可以很简洁地传递代码（通常是匿名函数）。</p>
<h1 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h1><p>Lambda表达式主要分为三部分：参数列表，箭头，Lambda 主体</p>
<a id="more"></a>
<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><ul>
<li>(parameters) -&gt; expression</li>
<li>(parameters) -&gt; { statements; }</li>
</ul>
<p>如果表达式只有一行，用第一种，多行用第二种。</p>
<p>Java8中，标注了<code>@FunctionalInterface</code>，表明这个接口将是一个函数式接口，它里面只能有一个抽象方法。</p>
<h1 id="常用的函数式接口"><a href="#常用的函数式接口" class="headerlink" title="常用的函数式接口"></a>常用的函数式接口</h1><p>JDK已经为我们提供了很多常用的函数式接口：</p>
<ul>
<li>Predicate：<code>java.util.function.Predicate&lt;T&gt;</code>接口定义了一个名叫test的抽象方法，它接受泛型T对象，并返回一个boolean。在需要表示一个涉及类型T的布尔表达式时可以使用。</li>
<li>Consumer：<code>java.util.function.Consumer&lt;T&gt;</code>定义了一个名叫accept的抽象方法，它接受泛型T的对象，没有返回（void）。如果需要访问类型T的对象，并对其执行某些操作，就可以使用这个接口。</li>
<li>Supplier：<code>java.util.function.Supplier&lt;T&gt;</code>不接受对象，返回一个泛型对象T。在需要new一个对象实例时可以使用。</li>
<li>Function：<code>java.util.function.Function&lt;T, R&gt;</code>接口定义了一个叫作apply的方法，它接受一个泛型T的对象，并返回一个泛型R的对象。如果需要定义一个Lambda，将输入对象的信息映射到输出，就可以使用这个接口。</li>
</ul>
<h1 id="原始类型特化"><a href="#原始类型特化" class="headerlink" title="原始类型特化"></a>原始类型特化</h1><p>我们知道，泛型只能绑定到引用类型的对象。因此，在使用泛型绑定基本类型的时候，Java会为我们自动装箱和拆箱，但这是会消耗性能的。<br>如果输入和输出都是基本类型时，Java8为我们提供了新的函数式接口，以避免自动装箱拆箱。</p>
<p>简单列举一部分：</p>
<ul>
<li>Predicate：<code>IntPredicate</code>, <code>LongPredicate</code>, <code>DoublePredicate</code></li>
<li>Consumer：<code>IntConsumer</code>,<code>LongConsumer</code>, <code>DoubleConsumer</code></li>
<li>Supplier：<code>BooleanSupplier</code>, <code>IntSupplier</code>, <code>LongSupplier</code>, <code>DoubleSupplier</code></li>
<li>Function：<code>IntFunction&lt;R&gt;</code>,<code>LongToDoubleFunction</code>,<code>ToLongFunction&lt;T&gt;</code></li>
</ul>
<p>从命名可以轻易看出从什么类型转成什么类型，可以在<code>java.util.function</code>包下查看所有接口。</p>
<h1 id="使用局部变量"><a href="#使用局部变量" class="headerlink" title="使用局部变量"></a>使用局部变量</h1><p>在使用lambda时，主体代码块内允许使用的外部变量。但是，不允许改变外部变量。这些变量应该声明为<code>final</code>或者事实上是<code>final</code>的（即之后代码中不会改变）</p>
<h1 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h1><p>方法引用主要有三类：</p>
<ul>
<li>指向静态方法的方法引用<ul>
<li>Lambda: <code>(args) -&gt; ClassName.staticMethod(args)</code></li>
<li>方法引用：<code>ClassName :: staticMethod</code></li>
</ul>
</li>
<li>指向任意类型实例方法的方法引用<ul>
<li>Lambda: <code>(arg0, rest) -&gt; arg0.instanceMethod(rest)</code></li>
<li>方法引用：<code>ClassName :: instanceMethod</code>(arg0 是 ClassName 类型的)</li>
</ul>
</li>
<li>指向现有对象的实例方法的方法引用<ul>
<li>Lambda: <code>(args) -&gt; expr.instanceMethod(args)</code></li>
<li>方法引用：<code>expr :: intanceMethod</code></li>
</ul>
</li>
</ul>
<p>除此之外，还有构造函数引用：<code>ClassName :: new</code><br>比如用Map来将构造函数映射到字符串值：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> Map&lt;String, Function&lt;Integer, Fruit&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line"><span class="keyword">static</span> &#123;</div><div class="line">    map.put(<span class="string">"apple"</span>, Apple::<span class="keyword">new</span>);</div><div class="line">    map.put(<span class="string">"orange"</span>, Orange::<span class="keyword">new</span>);</div><div class="line">    <span class="comment">// etc...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Fruit <span class="title">giveMeFruit</span><span class="params">(String fruit, Integer weight)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> map.get(fruit.toLowerCase()).apply(weight);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="复合-Lambda-表达式"><a href="#复合-Lambda-表达式" class="headerlink" title="复合 Lambda 表达式"></a>复合 Lambda 表达式</h1><p>Comparator、Predicate和Function等函数式接口都有几个可以用来结Lambda表达式的默认方法。</p>
<h2 id="比较器复合"><a href="#比较器复合" class="headerlink" title="比较器复合"></a>比较器复合</h2><ol>
<li><p>普通排序<code>comparing()</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Comparator&lt;Apple&gt; c = Comparator.comparing(Apple::getWeight);</div></pre></td></tr></table></figure>
</li>
<li><p>逆序<code>reversed()</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">inventory.sort(comparing(Apple::getWeight).reversed());</div></pre></td></tr></table></figure>
</li>
<li><p>比较器链<code>thenComparing()</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">inventory.sort(comparing(Apple::getWeight).reversed()</div><div class="line">    .thenComparing(Apple::getCountry));</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="谓词复合"><a href="#谓词复合" class="headerlink" title="谓词复合"></a>谓词复合</h2><p>3个方法增强已有的Predicate接口：</p>
<ul>
<li><code>and</code>：与</li>
<li><code>or</code>：或</li>
<li><code>negate</code>：非</li>
</ul>
<p><strong>请注意，and和or方法是按照在表达式链中的位置，从左向右确定优先级的。</strong>因此，a.or(b).and(c)可以看作(a || b) &amp;&amp; c。</p>
<h2 id="函数复合"><a href="#函数复合" class="headerlink" title="函数复合"></a>函数复合</h2><p>Function接口有<code>andThen</code>和<code>compose</code>两个默认方法，它们都会返回Function的一个实例。</p>
<p>举个例子：<br>有2个函数，一个加1，一个乘2<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Function&lt;Integer, Integer&gt; f = x -&gt; x + <span class="number">1</span>; <span class="comment">// f(x)=x+1</span></div><div class="line">Function&lt;Integer, Integer&gt; g = x -&gt; x * <span class="number">2</span>; <span class="comment">// g(x)=2x</span></div></pre></td></tr></table></figure></p>
<ol>
<li><p><code>andThen()</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Function&lt;Integer, Integer&gt; h = f.andThen(g); <span class="comment">// g(f(x))</span></div><div class="line"><span class="keyword">int</span> result = h.apply(<span class="number">1</span>); <span class="comment">// 4</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>compose()</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Function&lt;Integer, Integer&gt; h = f.compose(g); <span class="comment">// f(g(x))</span></div><div class="line"><span class="keyword">int</span> result = h.apply(<span class="number">1</span>); <span class="comment">// 3</span></div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4059338-39a526e6dbd5707d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Lambda.jpg&quot;&gt;&lt;br&gt;使用Lambda表达式，我们可以很简洁地传递代码（通常是匿名函数）。&lt;/p&gt;
&lt;h1 id=&quot;结构&quot;&gt;&lt;a href=&quot;#结构&quot; class=&quot;headerlink&quot; title=&quot;结构&quot;&gt;&lt;/a&gt;结构&lt;/h1&gt;&lt;p&gt;Lambda表达式主要分为三部分：参数列表，箭头，Lambda 主体&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://peijie-sh.github.io/categories/Java/"/>
    
    
      <category term="java8" scheme="https://peijie-sh.github.io/tags/java8/"/>
    
      <category term="Lambda表达式" scheme="https://peijie-sh.github.io/tags/Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java8学习笔记之行为参数化</title>
    <link href="https://peijie-sh.github.io/2017/04/19/Java8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%8F%82%E6%95%B0%E5%8C%96/"/>
    <id>https://peijie-sh.github.io/2017/04/19/Java8学习笔记之行为参数化/</id>
    <published>2017-04-19T05:10:12.000Z</published>
    <updated>2017-06-24T12:19:27.315Z</updated>
    
    <content type="html"><![CDATA[<p>用一个例子说明<code>行为参数化</code>带来的变化 - 从苹果仓库中筛选苹果</p>
<h1 id="版本1"><a href="#版本1" class="headerlink" title="版本1"></a>版本1</h1><p>从一个苹果集合中选出绿的苹果<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Apple&gt; <span class="title">filterGreenApples</span><span class="params">(List&lt;Apple&gt; inventory)</span> </span>&#123;</div><div class="line">        List&lt;Apple&gt; result = <span class="keyword">new</span> ArrayList&lt;Apple&gt;();</div><div class="line">        <span class="keyword">for</span> (Apple apple : inventory) &#123;</div><div class="line">            <span class="keyword">if</span> (<span class="string">"green"</span>.equals(apple.getColor()) &#123;</div><div class="line">                result.add(apple);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h1 id="版本2"><a href="#版本2" class="headerlink" title="版本2"></a>版本2</h1><p>这时，如果需求变了，要从集合中选出红苹果，我们会这样<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Apple&gt; <span class="title">filterApplesByColor</span><span class="params">(List&lt;Apple&gt; inventory, String color)</span> </span>&#123;</div><div class="line">        List&lt;Apple&gt; result = <span class="keyword">new</span> ArrayList&lt;Apple&gt;();</div><div class="line">        <span class="keyword">for</span> (Apple apple : inventory) &#123;</div><div class="line">            <span class="keyword">if</span> (apple.getColor().equals(color)) &#123;</div><div class="line">                result.add(apple);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>然后传入颜色参数来筛选<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">List&lt;Apple&gt; apples = filterApplesByColor(inventory, <span class="string">"red"</span>);</div></pre></td></tr></table></figure></p>
<h1 id="版本3"><a href="#版本3" class="headerlink" title="版本3"></a>版本3</h1><p>但是，如果现在要选出重量超过150g的苹果呢？在方法参数列表中多加一个weight么？<br>你会发现我们所有的代码，只有if判断中的条件发生了变化，这违反了DRY原则(Don’t Repeat Yourself)。</p>
<p>所以，我们把整个具体行为作为参数来传递，这样，方法体本身的代码就可以复用了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 定义一个接口</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ApplePredicate</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Apple apple)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppleHeavyWeightPredicate</span> <span class="keyword">implements</span> <span class="title">ApplePredicate</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Apple apple)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> apple.getWeight() &gt; <span class="number">150</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppleGreenColorPredicate</span> <span class="keyword">implements</span> <span class="title">ApplePredicate</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Apple apple)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"green"</span>.equals(apple.getColor());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Apple&gt; <span class="title">filterApples</span><span class="params">(List&lt;Apple&gt; inventory, ApplePredicate p)</span> </span>&#123;</div><div class="line">    List&lt;Apple&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="keyword">for</span> (Apple apple : inventory) &#123;</div><div class="line">        <span class="keyword">if</span> (p.test(apple)) &#123;</div><div class="line">            result.add(apple);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在，我们可以很灵活的调用了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">List&lt;Apple&gt; redAndHeavyApples = filterApples(inventory, <span class="keyword">new</span> AppleHeavyWeightPredicate());</div></pre></td></tr></table></figure></p>
<h1 id="版本4"><a href="#版本4" class="headerlink" title="版本4"></a>版本4</h1><p>其实，接口的具体实现，我们只会用到一次。所以，我们可以改成匿名类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">List&lt;Apple&gt; redApples = filterApples(inventory, <span class="keyword">new</span> ApplePredicate() &#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Apple apple)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"red"</span>.equals(apple.getColor());</div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure></p>
<p>现在，代码已经变得非常简洁和灵活了。</p>
<h1 id="版本5"><a href="#版本5" class="headerlink" title="版本5"></a>版本5</h1><p>从Java8开始，我们可以利用Lambda表达式，进一步改进代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">List&lt;Apple&gt; result = filterApples(inventory, (Apple apple) -&gt; <span class="string">"red"</span>.equals(apple.getColor()));</div></pre></td></tr></table></figure></p>
<p>现在，调用方法，我们只要一行代码，而且代码的可读性非常好。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用一个例子说明&lt;code&gt;行为参数化&lt;/code&gt;带来的变化 - 从苹果仓库中筛选苹果&lt;/p&gt;
&lt;h1 id=&quot;版本1&quot;&gt;&lt;a href=&quot;#版本1&quot; class=&quot;headerlink&quot; title=&quot;版本1&quot;&gt;&lt;/a&gt;版本1&lt;/h1&gt;&lt;p&gt;从一个苹果集合中选出绿的苹果&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; List&amp;lt;Apple&amp;gt; &lt;span class=&quot;title&quot;&gt;filterGreenApples&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(List&amp;lt;Apple&amp;gt; inventory)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        List&amp;lt;Apple&amp;gt; result = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;Apple&amp;gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (Apple apple : inventory) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&quot;green&quot;&lt;/span&gt;.equals(apple.getColor()) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                result.add(apple);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://peijie-sh.github.io/categories/Java/"/>
    
    
      <category term="java8" scheme="https://peijie-sh.github.io/tags/java8/"/>
    
      <category term="Lambda表达式" scheme="https://peijie-sh.github.io/tags/Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>HTML转图片利器：wkhtmltox</title>
    <link href="https://peijie-sh.github.io/2017/04/01/HTML%E8%BD%AC%E5%9B%BE%E7%89%87%E5%88%A9%E5%99%A8%EF%BC%9Awkhtmltox/"/>
    <id>https://peijie-sh.github.io/2017/04/01/HTML转图片利器：wkhtmltox/</id>
    <published>2017-04-01T06:07:22.000Z</published>
    <updated>2017-04-01T12:02:37.910Z</updated>
    
    <content type="html"><![CDATA[<p>关于<code>wkhtmltox</code>，是一个可以把HTML转换为图片和pdf的工具。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4059338-27a3b4979a3084c2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="wkhtmltox.jpg"></p>
<p>不多介绍了，详见官网 <a href="https://wkhtmltopdf.org/" target="_blank" rel="external">https://wkhtmltopdf.org/</a></p>
<a id="more"></a>
<h1 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h1><ol>
<li><p>下载下来是tar.xz文件，首先解压：<br><code>tar -vxf wkhtmltox-0.12.4_linux-generic-amd64.tar.xz</code></p>
</li>
<li><p>解压得到一个目录wkhtmltox，把wkhtmltoimage和wkhtmltopdf复制到<code>/usr/bin</code>目录，更改所有者，并增加可执行属性</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">sudo cp wkhtmltox/bin/wkhtmltopdf /usr/bin/</div><div class="line">sudo cp wkhtmltox/bin/wkhtmltoimage /usr/bin/</div><div class="line">sudo chown root:root /usr/bin/wkhtmltopdf</div><div class="line">sudo chown root:root /usr/bin/wkhtmltoimage</div><div class="line">sudo chmod +x /usr/bin/wkhtmltopdf</div><div class="line">sudo chmod +x /usr/bin/wkhtmltoimage</div></pre></td></tr></table></figure>
</li>
<li><p>注意事项</p>
</li>
</ol>
<p>有时候为了让程序可以执行这个命令，可能需要配置环境变量</p>
<ul>
<li>编辑配置文件 <code>vi .bashrc</code></li>
<li>添加环境变量 <code>export PATH=$PATH:/opt/wkhtmltox/bin</code></li>
<li>让修改生效 <code>source .bashrc</code>让修改生效</li>
</ul>
<p>如果网页上的中文，转成图片后变成乱码方块，请安装相关字体 :)</p>
<h1 id="关于使用"><a href="#关于使用" class="headerlink" title="关于使用"></a>关于使用</h1><p>执行<code>wkhtmltoimage www.bing.com bing.png</code>，就会在当前目录下生成了一张png图片。<br><img src="http://upload-images.jianshu.io/upload_images/4059338-b81b7a7129404297.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="bing.png"></p>
<p>这个命令还可以增加一些参数，比如常用的设置宽高，图片质量等参数<br>执行<code>wkhtmltoimage --crop-w 410 --width 410 --quality 50 www.bing.com bing2.png</code>看看</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4059338-3c6b126b35acc5f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="bing2.png"></p>
<p>说明:</p>
<ul>
<li><code>--crop-w 410</code>：截图宽度410px</li>
<li><code>--width 410</code>：浏览器模拟宽度410px</li>
<li><code>--quality 50</code>：图片质量(这个值越大，图片质量越高，当然文件也会比较大)</li>
</ul>
<p>还有更多参数用法，请 <code>wkhtmltoimage -h</code>查看。<br>HTML转pdf同理，<code>wkhtmltopdf -h</code>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于&lt;code&gt;wkhtmltox&lt;/code&gt;，是一个可以把HTML转换为图片和pdf的工具。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4059338-27a3b4979a3084c2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;wkhtmltox.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;不多介绍了，详见官网 &lt;a href=&quot;https://wkhtmltopdf.org/&quot;&gt;https://wkhtmltopdf.org/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="工具杂谈" scheme="https://peijie-sh.github.io/categories/%E5%B7%A5%E5%85%B7%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="wkhtmltox" scheme="https://peijie-sh.github.io/tags/wkhtmltox/"/>
    
      <category term="Linux" scheme="https://peijie-sh.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot中使用Redis实现缓存</title>
    <link href="https://peijie-sh.github.io/2017/03/30/SpringBoot%E4%B8%AD%E4%BD%BF%E7%94%A8Redis%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98/"/>
    <id>https://peijie-sh.github.io/2017/03/30/SpringBoot中使用Redis实现缓存/</id>
    <published>2017-03-30T09:11:13.000Z</published>
    <updated>2018-04-14T12:45:39.733Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Data Redis为我们封装了Redis客户端的各种操作，简化使用。</p>
<ul>
<li>当Redis当做数据库或者消息队列来操作时，我们一般使用RedisTemplate来操作</li>
<li>当Redis作为缓存使用时，我们可以将它作为Spring Cache的实现，直接通过注解使用</li>
</ul>
<p>关于RedisTemplate的使用可参考：<a href="http://blog.didispace.com/springbootredis/" target="_blank" rel="external">http://blog.didispace.com/springbootredis/</a></p>
<h1 id="下面总结使用Redis作为缓存"><a href="#下面总结使用Redis作为缓存" class="headerlink" title="下面总结使用Redis作为缓存"></a>下面总结使用Redis作为缓存</h1><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><p>SpringBoot从1.4版本开始，<code>spring-boot-starter-redis</code>依赖改名了。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  redis:</span></div><div class="line"><span class="attr">    host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></div><div class="line"><span class="attr">    port:</span> <span class="number">6379</span></div><div class="line"><span class="attr">    timeout:</span> <span class="number">0</span></div><div class="line"><span class="attr">    database:</span> <span class="number">0</span></div><div class="line"><span class="attr">    pool:</span></div><div class="line"><span class="attr">      max-active:</span> <span class="number">8</span></div><div class="line"><span class="attr">      max-wait:</span> <span class="bullet">-1</span></div><div class="line"><span class="attr">      max-idle:</span> <span class="number">8</span></div><div class="line"><span class="attr">      min-idle:</span> <span class="number">0</span></div></pre></td></tr></table></figure>
<p>这样，SpringBoot将会自动配置redis，注入相关bean，我们就可以使用<code>@CacheConfig</code>，<code>@Cacheable</code>，<code>@CachePut</code>，<code>@CacheEvict</code>了。</p>
<h1 id="使用Cache注解时的问题"><a href="#使用Cache注解时的问题" class="headerlink" title="使用Cache注解时的问题"></a>使用Cache注解时的问题</h1><p>缓存对象集合中，缓存是以key-value形式保存的。当不指定缓存的key时，SpringBoot会使用<code>SimpleKeyGenerator</code>生成key。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleKeyGenerator</span> <span class="keyword">implements</span> <span class="title">KeyGenerator</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">generate</span><span class="params">(Object target, Method method, Object... params)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> generateKey(params);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Generate a key based on the specified parameters.</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">generateKey</span><span class="params">(Object... params)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (params.length == <span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">return</span> SimpleKey.EMPTY;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (params.length == <span class="number">1</span>) &#123;</div><div class="line">			Object param = params[<span class="number">0</span>];</div><div class="line">			<span class="keyword">if</span> (param != <span class="keyword">null</span> &amp;&amp; !param.getClass().isArray()) &#123;</div><div class="line">				<span class="keyword">return</span> param;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> SimpleKey(params);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">SimpleKey</span><span class="params">(Object... elements)</span> </span>&#123;</div><div class="line">	Assert.notNull(elements, <span class="string">"Elements must not be null"</span>);</div><div class="line">	<span class="keyword">this</span>.params = <span class="keyword">new</span> Object[elements.length];</div><div class="line">	System.arraycopy(elements, <span class="number">0</span>, <span class="keyword">this</span>.params, <span class="number">0</span>, elements.length);</div><div class="line">	<span class="keyword">this</span>.hashCode = Arrays.deepHashCode(<span class="keyword">this</span>.params);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>查看源码可以发现，它是使用方法参数组合生成的一个key。<br><strong>此时有一个问题：</strong><br>如果2个方法，参数是一样的，但执行逻辑不同，那么将会导致执行第二个方法时命中第一个方法的缓存。<br>解决办法是在<code>@Cacheable</code>注解参数中指定key，或者自己实现一个<code>KeyGenerator</code>，在注解中指定KeyGenerator。<br>但是如果这样的情况很多，每一个都要指定key、KeyGenerator很麻烦。</p>
<p>Spring同样提供了方案：继承<code>CachingConfigurerSupport</code>并重写<code>keyGenerator()</code></p>
<p>下面贴出代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EnableCaching</span></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisCacheConfig</span> <span class="keyword">extends</span> <span class="title">CachingConfigurerSupport</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> JedisConnectionFactory jedisConnectionFactory;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate <span class="title">redisTemplate</span><span class="params">()</span> </span>&#123;</div><div class="line">        StringRedisTemplate redisTemplate = <span class="keyword">new</span> StringRedisTemplate(jedisConnectionFactory);</div><div class="line"></div><div class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;&gt;(Object.class);</div><div class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</div><div class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</div><div class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</div><div class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</div><div class="line"></div><div class="line">        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);</div><div class="line">        redisTemplate.afterPropertiesSet();</div><div class="line">        <span class="keyword">return</span> redisTemplate;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> CacheManager <span class="title">cacheManager</span><span class="params">()</span> </span>&#123;</div><div class="line">        String[] cacheNames = &#123;<span class="string">"app_default"</span>, <span class="string">"users"</span>, <span class="string">"blogs"</span>, <span class="string">"goods"</span>, <span class="string">"configs"</span>, <span class="string">"info"</span>&#125;;</div><div class="line">        RedisCacheManager redisCacheManager = <span class="keyword">new</span> RedisCacheManager(redisTemplate(), Arrays.asList(cacheNames));</div><div class="line">        redisCacheManager.setDefaultExpiration(<span class="number">86400</span>);</div><div class="line">        <span class="keyword">return</span> redisCacheManager;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Cache <span class="title">cache</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> cacheManager().getCache(<span class="string">"app_default"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> KeyGenerator <span class="title">keyGenerator</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (target, method, objects) -&gt; &#123;</div><div class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">            sb.append(target.getClass().getName());</div><div class="line">            sb.append(<span class="string">"::"</span> + method.getName() + <span class="string">":"</span>);</div><div class="line">            <span class="keyword">for</span> (Object obj : objects) &#123;</div><div class="line">                sb.append(obj.toString());</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> sb.toString();</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>此时，缓存的key是包名+方法名+参数列表，这样就很难会冲突了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring Data Redis为我们封装了Redis客户端的各种操作，简化使用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当Redis当做数据库或者消息队列来操作时，我们一般使用RedisTemplate来操作&lt;/li&gt;
&lt;li&gt;当Redis作为缓存使用时，我们可以将它作为Spring Cache的实现，直接通过注解使用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于RedisTemplate的使用可参考：&lt;a href=&quot;http://blog.didispace.com/springbootredis/&quot;&gt;http://blog.didispace.com/springbootredis/&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;下面总结使用Redis作为缓存&quot;&gt;&lt;a href=&quot;#下面总结使用Redis作为缓存&quot; class=&quot;headerlink&quot; title=&quot;下面总结使用Redis作为缓存&quot;&gt;&lt;/a&gt;下面总结使用Redis作为缓存&lt;/h1&gt;&lt;h2 id=&quot;引入依赖&quot;&gt;&lt;a href=&quot;#引入依赖&quot; class=&quot;headerlink&quot; title=&quot;引入依赖&quot;&gt;&lt;/a&gt;引入依赖&lt;/h2&gt;&lt;p&gt;SpringBoot从1.4版本开始，&lt;code&gt;spring-boot-starter-redis&lt;/code&gt;依赖改名了。&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-data-redis&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.5.2.RELEASE&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="https://peijie-sh.github.io/categories/Spring/"/>
    
    
      <category term="SpringBoot" scheme="https://peijie-sh.github.io/tags/SpringBoot/"/>
    
      <category term="Cache" scheme="https://peijie-sh.github.io/tags/Cache/"/>
    
      <category term="Redis" scheme="https://peijie-sh.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>手动安装redis-3.2.8的详细步骤</title>
    <link href="https://peijie-sh.github.io/2017/03/30/%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85redis-3.2.8%E7%9A%84%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/"/>
    <id>https://peijie-sh.github.io/2017/03/30/手动安装redis-3.2.8的详细步骤/</id>
    <published>2017-03-30T02:40:27.000Z</published>
    <updated>2017-04-01T12:47:24.809Z</updated>
    
    <content type="html"><![CDATA[<p>CentOS6.7使用yum安装有时候没有比较新的版本，所以手动安装，下面记录一下步骤。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4059338-13f399d148cd1ad3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="redis"></p>
<h1 id="下载最新版本"><a href="#下载最新版本" class="headerlink" title="下载最新版本"></a>下载最新版本</h1><p>以3.2.8为例，附上地址：<a href="https://redis.io/" target="_blank" rel="external">redis-3.2.8.tar.gz</a></p>
<a id="more"></a>
<h1 id="解压，编译，安装redis"><a href="#解压，编译，安装redis" class="headerlink" title="解压，编译，安装redis"></a>解压，编译，安装redis</h1><ul>
<li>解压：<code>tar -zxvf redis-3.2.8.tar.gz</code></li>
<li>进入目录：<code>cd redis-3.2.8</code></li>
<li>编译：<code>make &amp;&amp; make install</code></li>
<li><p>创建相关目录：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mkdir -p /opt/redis-3.2.8/bin</div><div class="line">mkdir -p /opt/redis-3.2.8/log</div><div class="line">mkdir -p /opt/redis-3.2.8/pid</div><div class="line">mkdir -p /opt/redis-3.2.8/db</div></pre></td></tr></table></figure>
</li>
<li><p>将编译后的可执行文件复制到自己的安装目录：<code>ln -s /usr/local/bin/redis-* /opt/redis-3.2.8/bin</code></p>
</li>
<li>复制配置文件到安装目录：<code>cp redis.conf /opt/redis-3.2.8/</code></li>
</ul>
<h1 id="配置redis"><a href="#配置redis" class="headerlink" title="配置redis"></a>配置redis</h1><ul>
<li>编辑redis.conf：<code>cd /opt/redis-3.2.8</code>，<code>vi redis.conf</code><ul>
<li>redis默认只允许本机连接，所以注释掉这行配置就可以远程访问：<code>\# bind 127.0.0.1</code></li>
<li>redis3.0版本增加了保护模式，需要我们设置密码，如果不想设置密码，就关闭保护模式：<code>protected-mode no</code></li>
<li>设置redis以守护线程方式启动：<code>daemonize yes</code></li>
<li>配置pid，log，db文件的保存地址：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">pidfile /opt/redis-3.2.8/pid/redis.pid</div><div class="line">logfile /opt/redis-3.2.8/log/redis.log</div><div class="line">dir /opt/redis-3.2.8/db</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<p>其他配置就默认即可，有需要再自行修改</p>
<ul>
<li><p>编写redis启动脚本：<code>vi /etc/init.d/redis</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Simple Redis init.d script conceived to work on Linux systems</span></div><div class="line"><span class="comment"># as it does use of the /proc filesystem.</span></div><div class="line">PATH=/opt/redis-3.2.8/bin:/sbin:/usr/bin:/bin</div><div class="line">REDISPORT=6379</div><div class="line">EXEC=/opt/redis-3.2.8/bin/redis-server</div><div class="line">CLIEXEC=/opt/redis-3.2.8/bin/redis-cli</div><div class="line">PIDFILE=/opt/redis-3.2.8/pid/redis.pid</div><div class="line">CONF=<span class="string">"/opt/redis-3.2.8/redis.conf"</span></div><div class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></div><div class="line">    start)</div><div class="line">        <span class="keyword">if</span> [ <span class="_">-f</span> <span class="variable">$PIDFILE</span> ]</div><div class="line">        <span class="keyword">then</span></div><div class="line">                <span class="built_in">echo</span> <span class="string">"<span class="variable">$PIDFILE</span> exists, process is already running or crashed"</span></div><div class="line">        <span class="keyword">else</span></div><div class="line">                <span class="built_in">echo</span> <span class="string">"Starting Redis server..."</span></div><div class="line">                <span class="variable">$EXEC</span> <span class="variable">$CONF</span></div><div class="line">        <span class="keyword">fi</span></div><div class="line">        ;;</div><div class="line">    stop)</div><div class="line">        <span class="keyword">if</span> [ ! <span class="_">-f</span> <span class="variable">$PIDFILE</span> ]</div><div class="line">        <span class="keyword">then</span></div><div class="line">                <span class="built_in">echo</span> <span class="string">"<span class="variable">$PIDFILE</span> does not exist, process is not running"</span></div><div class="line">        <span class="keyword">else</span></div><div class="line">                PID=$(cat <span class="variable">$PIDFILE</span>)</div><div class="line">                <span class="built_in">echo</span> <span class="string">"Stopping ..."</span></div><div class="line">                <span class="variable">$CLIEXEC</span> -p <span class="variable">$REDISPORT</span> shutdown</div><div class="line">                <span class="keyword">while</span> [ -x /proc/<span class="variable">$&#123;PID&#125;</span> ]</div><div class="line">                <span class="keyword">do</span></div><div class="line">                    <span class="built_in">echo</span> <span class="string">"Waiting for Redis to shutdown ..."</span></div><div class="line">                    sleep 1</div><div class="line">                <span class="keyword">done</span></div><div class="line">                <span class="built_in">echo</span> <span class="string">"Redis stopped"</span></div><div class="line">        <span class="keyword">fi</span></div><div class="line">        ;;</div><div class="line">    *)</div><div class="line">        <span class="built_in">echo</span> <span class="string">"Please use start or stop as first argument"</span></div><div class="line">        ;;</div><div class="line"><span class="keyword">esac</span></div></pre></td></tr></table></figure>
</li>
<li><p>设置服务权限：<code>chmod a+x /etc/init.d/redis</code></p>
</li>
</ul>
<h1 id="相关使用"><a href="#相关使用" class="headerlink" title="相关使用"></a>相关使用</h1><ul>
<li>启动：<code>service redis start</code></li>
<li>关闭：<code>service redis stop</code></li>
<li>查看：<code>ps -ef | grep redis</code>，<code>netstat -anptu | grep 6379</code></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CentOS6.7使用yum安装有时候没有比较新的版本，所以手动安装，下面记录一下步骤。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4059338-13f399d148cd1ad3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;redis&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;下载最新版本&quot;&gt;&lt;a href=&quot;#下载最新版本&quot; class=&quot;headerlink&quot; title=&quot;下载最新版本&quot;&gt;&lt;/a&gt;下载最新版本&lt;/h1&gt;&lt;p&gt;以3.2.8为例，附上地址：&lt;a href=&quot;https://redis.io/&quot;&gt;redis-3.2.8.tar.gz&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="NoSQL" scheme="https://peijie-sh.github.io/categories/NoSQL/"/>
    
    
      <category term="Linux" scheme="https://peijie-sh.github.io/tags/Linux/"/>
    
      <category term="Redis" scheme="https://peijie-sh.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>谈谈Java中的代理</title>
    <link href="https://peijie-sh.github.io/2017/02/17/%E8%B0%88%E8%B0%88Java%E4%B8%AD%E7%9A%84%E4%BB%A3%E7%90%86/"/>
    <id>https://peijie-sh.github.io/2017/02/17/谈谈Java中的代理/</id>
    <published>2017-02-17T07:36:35.000Z</published>
    <updated>2017-03-04T12:49:08.010Z</updated>
    
    <content type="html"><![CDATA[<p>代理是Java常用的设计模式，代理类通过调用被代理类的相关方法，实现对相关方法增强。比如加入事务、日志、报警发邮件等操作。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4059338-83f70e36399f4ad0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="java.png"><br><a id="more"></a></p>
<h1 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h1><p>静态代理，就是由程序员手动编写代理类或者用工具生成代理类的代码，再进行编译生成class文件，实现代理。比如简单工厂模式。</p>
<p>用法：</p>
<ul>
<li>代理类和目标类都实现相同接口。</li>
<li>代理类持有目标类的引用。</li>
</ul>
<p>缺点：<br>静态代理要为每个目标类创建一个代理类，当需要代理的对象太多，那么代理类也变得很多。代理类违背了可重复代理只写一次的原则。</p>
<h1 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h1><p>为了解决静态代理的缺点，于是引入了动态代理。<br>它有一个好处，那就是不用写很多代理类，生成的代理类数量是固定的。<br>一般动态代理分为2种：</p>
<h2 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h2><p>JDK动态代理是JDK自带的，不依赖第三方框架。<br>它的实现原理，就是利用Java的反射机制，创建一个实现接口的代理类。</p>
<p>用法：</p>
<ul>
<li>被代理对象必须实现接口。</li>
<li>代理对象由代理工厂自动生成。</li>
</ul>
<p>下面贴个例子</p>
<p>接口类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;   </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>;   </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>实现类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;   </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;   </div><div class="line">    System.out.println(<span class="string">"do 了 some thing ..."</span>);   </div><div class="line">  &#125;   </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>代理工厂：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;  </div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;  </div><div class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;  </div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Object target;</div><div class="line"></div><div class="line">    <span class="comment">//绑定委托对象，并返回代理类</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">bind</span><span class="params">(Object target)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.target = target;</div><div class="line">        <span class="comment">//绑定该类实现的所有接口，取得代理类 </span></div><div class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(target.getClass().getClassLoader(),</div><div class="line">                target.getClass().getInterfaces(), <span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy , Method method , Object[] args)</span><span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        Object result = <span class="keyword">null</span>;</div><div class="line">        <span class="comment">//这里就可以进行所谓的AOP编程了</span></div><div class="line">        <span class="comment">//在调用具体函数方法前，执行功能处理</span></div><div class="line">        result = method.invoke(target, args);</div><div class="line">        <span class="comment">//在调用具体函数方法后，执行功能处理</span></div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>测试类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestProxy</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">           ProxyHandler proxy = <span class="keyword">new</span> ProxyHandler();</div><div class="line">           <span class="comment">//绑定该类实现的所有接口</span></div><div class="line">           Subject sub = (Subject) proxy.bind(<span class="keyword">new</span> RealSubject());</div><div class="line">           sub.doSomething();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="CGLIB代理"><a href="#CGLIB代理" class="headerlink" title="CGLIB代理"></a>CGLIB代理</h2><p>使用CGLIB代理需要引入CGLIB库，它使用字节码技术实现代理。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;</div><div class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;</div><div class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodProxy;</div><div class="line">      </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CGLibProxy</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;    </div><div class="line">    </div><div class="line">    <span class="keyword">private</span> Object targetObject;<span class="comment">// CGLib需要代理的目标对象    </span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">createProxyObject</span><span class="params">(Object obj)</span> </span>&#123;    </div><div class="line">        <span class="keyword">this</span>.targetObject = obj;    </div><div class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();    </div><div class="line">        enhancer.setSuperclass(obj.getClass());    </div><div class="line">        enhancer.setCallback(<span class="keyword">this</span>);    </div><div class="line">        Object proxyObj = enhancer.create();    </div><div class="line">        <span class="keyword">return</span> proxyObj;<span class="comment">// 返回代理对象    </span></div><div class="line">    &#125;    </div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object proxy, Method method, Object[] args,    </span></span></div><div class="line">            MethodProxy methodProxy) <span class="keyword">throws</span> Throwable &#123;    </div><div class="line">        Object obj = <span class="keyword">null</span>;    </div><div class="line">        <span class="keyword">if</span> (<span class="string">"addUser"</span>.equals(method.getName())) &#123;<span class="comment">// 过滤方法    </span></div><div class="line">            checkPopedom();<span class="comment">// 检查权限    </span></div><div class="line">        &#125;    </div><div class="line">        obj = method.invoke(targetObject, args);    </div><div class="line">        <span class="keyword">return</span> obj;    </div><div class="line">    &#125;    </div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkPopedom</span><span class="params">()</span> </span>&#123;    </div><div class="line">        System.out.println(<span class="string">"检查权限  checkPopedom()!"</span>);    </div><div class="line">    &#125;    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    </div><div class="line">		Subject sub = (Subject) <span class="keyword">new</span> CGLibProxy().createProxyObject(<span class="keyword">new</span> RealSubject());</div><div class="line">		sub.doSomething();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2种动态代理的区别"><a href="#2种动态代理的区别" class="headerlink" title="2种动态代理的区别"></a>2种动态代理的区别</h2><p>JDK动态代理是利用反射机制生成一个实现代理接口的匿名类，在调用具体方法前调用InvokeHandler来处理。<br>而CGLIB动态代理是利用asm开源包，加载代理对象类的class文件，修改其字节码生成子类来处理。</p>
<p>在 Spring 中，</p>
<ul>
<li>如果目标对象实现了接口，默认情况下会采用JDK动态代理实现AOP </li>
<li>如果目标对象实现了接口，可以强制使用CGLIB实现AOP </li>
<li>如果目标对象没有实现了接口，必须采用CGLIB库，Spring会自动在JDK动态代理和CGLIB之间转换</li>
</ul>
<p>如何强制使用CGLIB实现AOP？</p>
<ul>
<li>添加CGLIB依赖</li>
<li>在Spring配置文件中加入<code>&lt;aop:aspectj-autoproxy proxy-target-class=&quot;true&quot;/&gt;</code></li>
<li>如果是SpringBoot，在配置文件设置<code>spring.aop.proxy-target-class=true</code></li>
</ul>
<p>JDK动态代理和CGLIB字节码生成的区别？</p>
<ul>
<li>JDK动态代理只能对实现了接口的类生成代理，而不能针对未实现接口的类</li>
<li>CGLIB是针对类实现代理，主要是对指定的类生成一个子类，覆盖其中的方法</li>
<li>因为是继承，所以该类或方法最好不要声明成final</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;代理是Java常用的设计模式，代理类通过调用被代理类的相关方法，实现对相关方法增强。比如加入事务、日志、报警发邮件等操作。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4059338-83f70e36399f4ad0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;java.png&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="https://peijie-sh.github.io/categories/Java/"/>
    
    
      <category term="动态代理" scheme="https://peijie-sh.github.io/tags/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>谈谈Java中的堆与栈</title>
    <link href="https://peijie-sh.github.io/2017/02/16/%E8%B0%88%E8%B0%88Java%E4%B8%AD%E7%9A%84%E5%A0%86%E4%B8%8E%E6%A0%88/"/>
    <id>https://peijie-sh.github.io/2017/02/16/谈谈Java中的堆与栈/</id>
    <published>2017-02-16T07:25:12.000Z</published>
    <updated>2017-03-04T12:49:08.011Z</updated>
    
    <content type="html"><![CDATA[<p><strong>在<code>JVM</code>中，内存主要被分为5类</strong><br><img src="http://upload-images.jianshu.io/upload_images/4059338-8a05e9cb9a61a962.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="JVM内存结构.jpg"></p>
<a id="more"></a>
<h1 id="堆Heap"><a href="#堆Heap" class="headerlink" title="堆Heap"></a>堆<code>Heap</code></h1><ul>
<li>存放关键字<code>new</code>创建的对象和数组。</li>
<li>堆内存被所有线程共享。</li>
<li>这块内存区由<code>JVM</code>（Java虚拟机）自己管理。当使用new创建对象时，不必指定分配空间的大小，<code>JVM</code>会动态自动分配一块区域；在程序执行过程中，没有指向此对象的引用时，此对象就被标记为可被回收状态，将由<code>GC</code>（垃圾回收器）在一个不确定的时间自动回收，释放所占的内存空间。</li>
</ul>
<h1 id="虚拟机栈VM-Stack"><a href="#虚拟机栈VM-Stack" class="headerlink" title="虚拟机栈VM Stack"></a>虚拟机栈<code>VM Stack</code></h1><ul>
<li>存放8种基本类型的数据和对象引用（不是对象）。</li>
<li>每个线程有自己的单独的栈。</li>
<li>先进后出，后进先出。</li>
<li>因为主要存放基本类型数据变量，所以分配空间比堆快。当超出变量的作用域，将由编译器立即释放空间。</li>
</ul>
<h1 id="本地方法栈Native-Method-Stack"><a href="#本地方法栈Native-Method-Stack" class="headerlink" title="本地方法栈Native Method Stack"></a>本地方法栈<code>Native Method Stack</code></h1><p>程序调用本地方法的内存区域。</p>
<h1 id="程序计数器-Program-Counter-Register"><a href="#程序计数器-Program-Counter-Register" class="headerlink" title="程序计数器 Program Counter Register"></a>程序计数器 <code>Program Counter Register</code></h1><p>一块较小的内存空间，可看作是当前线程所执行的字节码的 行号指示器。</p>
<p>通过改变计数器的值来选取下一条需要执行的字节码指令。（分支、循环、跳转、异常处理、线程恢复等）基础功能都依赖与其完成。</p>
<p>特点：</p>
<ul>
<li>线程私有：因为 Java 虚拟机的多线程是通过 线程轮流切换 并 分配处理器执行时间 来实现的，在某一时刻，只会执行一条线程。因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器。</li>
<li>无内存溢出：如果线程正在执行的是一个 Java 方法，这个计数器记录的是正在 执行的虚拟机字节码指令的地址；如果正在执行的是 Native 方法，这个计数器值则为空（Undefined）。此内存区域是唯一一个在 Java 虚拟机程序规范中没有规定任何 OutOfMemoryError 情况的区域。</li>
</ul>
<h1 id="方法区Method-Area"><a href="#方法区Method-Area" class="headerlink" title="方法区Method Area"></a>方法区<code>Method Area</code></h1><ul>
<li>跟堆一样，被所有的线程共享。</li>
<li>是一个内存逻辑区域，是<code>JVM</code>在装载类文件时，用于存储类型信息(类的描述信息)：<ul>
<li>类的基本信息：<ul>
<li>每个类的全限定名</li>
<li>每个类的直接超类的全限定名(可约束类型转换)</li>
<li>该类是类还是接口</li>
<li>该类型的访问修饰符</li>
<li>直接超接口的全限定名的有序列表</li>
</ul>
</li>
<li>已装载类的详细信息：<ul>
<li>运行时常量池：在方法区中，每个类型都对应一个常量池，存放该类型所用到的所有常量，常量池中存储了诸如文字字符串、final变量值、类名和方法名常量。它们以数组形式通过索引被访问，是外部调用与类联系及类型对象化的桥梁。（存的可能是个普通的字符串，然后经过常量池解析，则变成指向某个类的引用）</li>
<li>字段信息：字段信息存放类中声明的每一个字段的信息，包括字段的名、类型、修饰符。<br>字段名称指的是类或接口的实例变量或类变量，字段的描述符是一个指示字段的类型的字符串，如private A a=null;则a为字段名，A为描述符，private为修饰符。</li>
<li>方法信息：类中声明的每一个方法的信息，包括方法名、返回值类型、参数类型、修饰符、异常、方法的字节码。<br>(在编译的时候，就已经将方法的局部变量、操作数栈大小等确定并存放在字节码中，在装载的时候，随着类一起装入方法区。)</li>
<li>静态成员变量：类中的静态成员变量和静态代码块。</li>
<li>到类classloader的引用：到该类的类装载器的引用。</li>
<li>到类class的引用：虚拟机为每一个被装载的类型创建一个class实例，用来代表这个被装载的类。</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<p>具体可参考 <a href="http://www.jianshu.com/p/989c90f339b9" target="_blank" rel="external">传送门</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;在&lt;code&gt;JVM&lt;/code&gt;中，内存主要被分为5类&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4059338-8a05e9cb9a61a962.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;JVM内存结构.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://peijie-sh.github.io/categories/Java/"/>
    
    
      <category term="JVM" scheme="https://peijie-sh.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC统一异常处理总结</title>
    <link href="https://peijie-sh.github.io/2017/02/15/SpringMVC%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%80%BB%E7%BB%93/"/>
    <id>https://peijie-sh.github.io/2017/02/15/SpringMVC统一异常处理总结/</id>
    <published>2017-02-15T08:11:13.000Z</published>
    <updated>2018-04-14T12:45:39.747Z</updated>
    
    <content type="html"><![CDATA[<p>在一个Spring MVC项目中，使用统一异常处理，可以使维护代码变得容易。下面总结一下常用的3种方法。<br><img src="http://upload-images.jianshu.io/upload_images/4059338-24a47cdd2121897b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="try-catch"></p>
<h1 id="实现HandlerExceptionResolver接口"><a href="#实现HandlerExceptionResolver接口" class="headerlink" title="实现HandlerExceptionResolver接口"></a>实现<code>HandlerExceptionResolver</code>接口</h1><p>实现<code>HandlerExceptionResolver</code>接口，实现<code>resolveException()</code>方法，根据传入的异常类型做出处理。</p>
<a id="more"></a>
<h1 id="继承AbstractHandlerExceptionResolver类"><a href="#继承AbstractHandlerExceptionResolver类" class="headerlink" title="继承AbstractHandlerExceptionResolver类"></a>继承<code>AbstractHandlerExceptionResolver</code>类</h1><p>继承<code>AbstractHandlerExceptionResolver</code>类，和第一种方式类似，因为<code>AbstractHandlerExceptionResolver</code>实现了<code>HandlerExceptionResolver</code>接口。<br>所以，我们继承之后也是重写<code>resolveException()</code>方法，再处理各种异常。</p>
<h1 id="使用注解-ControllerAdvice处理"><a href="#使用注解-ControllerAdvice处理" class="headerlink" title="使用注解@ControllerAdvice处理"></a>使用注解<code>@ControllerAdvice</code>处理</h1><p>推荐使用这种方法，比较直观。下面上代码：</p>
<p>首先是自定义异常类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceDoesNotExistException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">7833283455112352655L</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ResourceDoesNotExistException</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ResourceDoesNotExistException</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(message);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ResourceDoesNotExistException</span><span class="params">(String message, Throwable cause)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(message, cause);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ResourceDoesNotExistException</span><span class="params">(Throwable cause)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(cause);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">ResourceDoesNotExistException</span><span class="params">(String message, Throwable cause, <span class="keyword">boolean</span> enableSuppression, <span class="keyword">boolean</span> writableStackTrace)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(message, cause, enableSuppression, writableStackTrace);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后是全局异常统一处理类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ControllerAdvice</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@ExceptionHandler</span>(value = OtherException.class)</div><div class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">defaultErrorHandler</span><span class="params">(HttpServletRequest req, Exception ex)</span> </span>&#123;</div><div class="line">        <span class="comment">// 其他异常处理逻辑...</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@ExceptionHandler</span>(value = ResourceDoesNotExistException.class)</div><div class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">notFoundErrorHandler</span><span class="params">(HttpServletRequest req, ResourceDoesNotExistException ex)</span> </span>&#123;</div><div class="line">        ModelAndView mav = <span class="keyword">new</span> ModelAndView();</div><div class="line">        mav.setViewName(<span class="string">"404"</span>);</div><div class="line">        <span class="keyword">return</span> mav;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>添加<code>@ControllerAdvice</code>注解的类是集中处理异常的地方，可以同时存在多个这样的类，用来做更细粒度的划分。<br>在这个类中，我们可以对每一种异常编写一种处理逻辑，在方法上使用<code>@ExceptionHandler</code>注解修饰，传入指定的异常类型即可。<br>如果是RESTful风格，不返回视图，也可使用<code>@RestControllerAdvice</code>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在一个Spring MVC项目中，使用统一异常处理，可以使维护代码变得容易。下面总结一下常用的3种方法。&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4059338-24a47cdd2121897b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;try-catch&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;实现HandlerExceptionResolver接口&quot;&gt;&lt;a href=&quot;#实现HandlerExceptionResolver接口&quot; class=&quot;headerlink&quot; title=&quot;实现HandlerExceptionResolver接口&quot;&gt;&lt;/a&gt;实现&lt;code&gt;HandlerExceptionResolver&lt;/code&gt;接口&lt;/h1&gt;&lt;p&gt;实现&lt;code&gt;HandlerExceptionResolver&lt;/code&gt;接口，实现&lt;code&gt;resolveException()&lt;/code&gt;方法，根据传入的异常类型做出处理。&lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="https://peijie-sh.github.io/categories/Spring/"/>
    
    
      <category term="Spring" scheme="https://peijie-sh.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring Task定时任务的配置和使用</title>
    <link href="https://peijie-sh.github.io/2017/02/15/Spring%20Task%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>https://peijie-sh.github.io/2017/02/15/Spring Task定时任务的配置和使用/</id>
    <published>2017-02-15T03:33:12.000Z</published>
    <updated>2018-04-14T12:45:39.727Z</updated>
    
    <content type="html"><![CDATA[<p>记录下<code>Spring</code>自带的定时任务用法。</p>
<h1 id="spring中使用定时任务"><a href="#spring中使用定时任务" class="headerlink" title="spring中使用定时任务"></a>spring中使用定时任务</h1><h2 id="基于xml配置文件使用定时任务"><a href="#基于xml配置文件使用定时任务" class="headerlink" title="基于xml配置文件使用定时任务"></a>基于xml配置文件使用定时任务</h2><p>首先配置spring开启定时任务<br><a id="more"></a><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span>  </span></div><div class="line">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>   </div><div class="line">    <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span>  </div><div class="line">    <span class="attr">xmlns:task</span>=<span class="string">"http://www.springframework.org/schema/task"</span>  </div><div class="line">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span>  </div><div class="line">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span>   </div><div class="line">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans   </span></div><div class="line">    http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  </div><div class="line">    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd    </div><div class="line">    http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd    </div><div class="line">    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd    </div><div class="line">    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd    </div><div class="line">    http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.0.xsd"&gt;  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">task:annotation-driven</span> /&gt;</span> <span class="comment">&lt;!-- 定时器开关--&gt;</span>  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myTask"</span> <span class="attr">class</span>=<span class="string">"com.spring.task.MyTask"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">task:scheduled-tasks</span>&gt;</span>  </div><div class="line">        <span class="comment">&lt;!-- 这里表示的是每隔五秒执行一次 --&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">task:scheduled</span> <span class="attr">ref</span>=<span class="string">"myTask"</span> <span class="attr">method</span>=<span class="string">"show"</span> <span class="attr">cron</span>=<span class="string">"*/5 * * * * ?"</span> /&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">task:scheduled</span> <span class="attr">ref</span>=<span class="string">"myTask"</span> <span class="attr">method</span>=<span class="string">"print"</span> <span class="attr">cron</span>=<span class="string">"*/10 * * * * ?"</span>/&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">task:scheduled-tasks</span>&gt;</span>  </div><div class="line">      </div><div class="line">    <span class="comment">&lt;!-- 自动扫描的包名 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.spring.task"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>定义自己的任务执行逻辑</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.spring.task;  </div><div class="line">  </div><div class="line"><span class="comment">/** </span></div><div class="line"> * 定义任务 </div><div class="line"> */  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTask</span> </span>&#123;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;  </div><div class="line">        System.out.println(<span class="string">"show method 1"</span>);  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;  </div><div class="line">        System.out.println(<span class="string">"print method 1"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="基于注解使用定时任务"><a href="#基于注解使用定时任务" class="headerlink" title="基于注解使用定时任务"></a>基于注解使用定时任务</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.spring.task;  </div><div class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;  </div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;  </div><div class="line">  </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 基于注解的定时器  </div><div class="line"> */</div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTask2</span> </span>&#123;  </div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 定时计算。每天凌晨 01:00 执行一次</div><div class="line">     */</div><div class="line">    <span class="meta">@Scheduled</span>(cron = <span class="string">"0 0 1 * * *"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"show method 2"</span>);  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 启动时执行一次，之后每隔2秒执行一次  </div><div class="line">     */</div><div class="line">    <span class="meta">@Scheduled</span>(fixedRate = <span class="number">1000</span>*<span class="number">2</span>)   </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;  </div><div class="line">        System.out.println(<span class="string">"print method 2"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样，当项目启动，定时任务就会按照规则按时执行了。</p>
<h1 id="Spring-Boot中使用定时任务"><a href="#Spring-Boot中使用定时任务" class="headerlink" title="Spring Boot中使用定时任务"></a>Spring Boot中使用定时任务</h1><p>Spring Boot中使用更加方便。</p>
<h2 id="引入springboot-starter包"><a href="#引入springboot-starter包" class="headerlink" title="引入springboot starter包"></a>引入<code>springboot starter</code>包</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="在程序入口启动类添加-EnableScheduling，开启定时任务功能"><a href="#在程序入口启动类添加-EnableScheduling，开启定时任务功能" class="headerlink" title="在程序入口启动类添加@EnableScheduling，开启定时任务功能"></a>在程序入口启动类添加<code>@EnableScheduling</code>，开启定时任务功能</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableScheduling</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(Application.class, args);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="定义定时任务逻辑"><a href="#定义定时任务逻辑" class="headerlink" title="定义定时任务逻辑"></a>定义定时任务逻辑</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTask3</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count=<span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Scheduled</span>(cron=<span class="string">"*/6 * * * * ?"</span>)</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"this is scheduler task runing  "</span>+(count++));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="任务执行规则说明"><a href="#任务执行规则说明" class="headerlink" title="任务执行规则说明"></a>任务执行规则说明</h1><h2 id="注解参数说明"><a href="#注解参数说明" class="headerlink" title="注解参数说明"></a>注解参数说明</h2><p>先来看看<code>@Scheduled</code>注解的源码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD, ElementType.ANNOTATION_TYPE&#125;)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Repeatable</span>(Schedules.class)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Scheduled &#123;</div><div class="line"></div><div class="line">	<span class="function">String <span class="title">cron</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</div><div class="line"></div><div class="line">	<span class="function">String <span class="title">zone</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">long</span> <span class="title">fixedDelay</span><span class="params">()</span> <span class="keyword">default</span> -1</span>;</div><div class="line"></div><div class="line">	<span class="function">String <span class="title">fixedDelayString</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">long</span> <span class="title">fixedRate</span><span class="params">()</span> <span class="keyword">default</span> -1</span>;</div><div class="line"></div><div class="line">	<span class="function">String <span class="title">fixedRateString</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">long</span> <span class="title">initialDelay</span><span class="params">()</span> <span class="keyword">default</span> -1</span>;</div><div class="line"></div><div class="line">	<span class="function">String <span class="title">initialDelayString</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看出，注解中可以传8种参数：</p>
<ul>
<li>cron：指定cron表达式</li>
<li>zone：默认使用服务器默认时区。可以设置为<code>java.util.TimeZone</code>中的zoneId</li>
<li>fixedDelay：从上一个任务完成开始到下一个任务开始的间隔，单位毫秒</li>
<li>fixedDelayString：同上，时间值是<code>String</code>类型</li>
<li>fixedRate：从上一个任务开始到下一个任务开始的间隔，单位毫秒</li>
<li>fixedRateString：同上，时间值是<code>String</code>类型</li>
<li>initialDelay：任务首次执行延迟的时间，单位毫秒</li>
<li>initialDelayString：同上，时间值是<code>String</code>类型</li>
</ul>
<h2 id="cron表达式的用法"><a href="#cron表达式的用法" class="headerlink" title="cron表达式的用法"></a>cron表达式的用法</h2><p>Cron表达式是一个字符串，字符串以5或6个空格隔开，分为6或7个域，每一个域代表一个含义，Cron有如下两种语法格式： </p>
<ul>
<li>Seconds Minutes Hours DayofMonth Month DayofWeek Year </li>
<li>Seconds Minutes Hours DayofMonth Month DayofWeek</li>
</ul>
<p>每一个域可出现的字符如下： </p>
<ul>
<li>Seconds: 可出现”, - * /“四个字符，有效范围为0-59的整数 </li>
<li>Minutes: 可出现”, - * /“四个字符，有效范围为0-59的整数 </li>
<li>Hours: 可出现”, - * /“四个字符，有效范围为0-23的整数 </li>
<li>DayofMonth: 可出现”, - * / ? L W C”八个字符，有效范围为0-31的整数 </li>
<li>Month: 可出现”, - * /“四个字符，有效范围为1-12的整数或JAN-DEC </li>
<li>DayofWeek: 可出现”, - * / ? L C #”四个字符，有效范围为1-7的整数或SUN-SAT两个范围。1表示星期天，2表示星期一， 依次类推 </li>
<li>Year: 可出现”, - * /“四个字符，有效范围为1970-2099年</li>
</ul>
<p>每一个域都使用数字，但还可以出现如下特殊字符，它们的含义是： </p>
<ol>
<li><code>*</code>：表示匹配该域的任意值，假如在Minutes域使用*, 即表示每分钟都会触发事件。</li>
<li><code>?</code>：只能用在DayofMonth和DayofWeek两个域。它也匹配域的任意值，但实际不会。因为DayofMonth和 DayofWeek会相互影响。例如想在每月的20日触发调度，不管20日到底是星期几，则只能使用如下写法： 13 13 15 20 <em> ?, 其中最后一位只能用？，而不能使用</em>，如果使用*表示不管星期几都会触发，实际上并不是这样。 </li>
<li><code>-</code>：表示范围，例如在Minutes域使用5-20，表示从5分到20分钟每分钟触发一次。</li>
<li><code>/</code>：表示起始时间开始触发，然后每隔固定时间触发一次，例如在Minutes域使用5/20,则意味着5分钟触发一次，而25，45等分别触发一次。</li>
<li><code>,</code>：表示列出枚举值值。例如：在Minutes域使用5,20，则意味着在5和20分每分钟触发一次。 </li>
<li><code>L</code>：表示最后，只能出现在DayofWeek和DayofMonth域，如果在DayofWeek域使用5L,意味着在最后的一个星期四触发。</li>
<li><code>W</code>：表示有效工作日(周一到周五),只能出现在DayofMonth域，系统将在离指定日期的最近的有效工作日触发事件。例如：在 DayofMonth使用5W，如果5日是星期六，则将在最近的工作日：星期五，即4日触发。如果5日是星期天，则在6日(周一)触发；如果5日在星期一 到星期五中的一天，则就在5日触发。另外一点，W的最近寻找不会跨过月份。</li>
<li><code>LW</code>：这两个字符可以连用，表示在某个月最后一个工作日，即最后一个星期五。</li>
<li><code>#</code>：用于确定每个月第几个星期几，只能出现在DayofMonth域。例如在4#2，表示某月的第二个星期三。</li>
</ol>
<hr>
<p>参考 <a href="http://www.cnblogs.com/liuyitian/p/4108391.html" target="_blank" rel="external">cron表达式例子</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录下&lt;code&gt;Spring&lt;/code&gt;自带的定时任务用法。&lt;/p&gt;
&lt;h1 id=&quot;spring中使用定时任务&quot;&gt;&lt;a href=&quot;#spring中使用定时任务&quot; class=&quot;headerlink&quot; title=&quot;spring中使用定时任务&quot;&gt;&lt;/a&gt;spring中使用定时任务&lt;/h1&gt;&lt;h2 id=&quot;基于xml配置文件使用定时任务&quot;&gt;&lt;a href=&quot;#基于xml配置文件使用定时任务&quot; class=&quot;headerlink&quot; title=&quot;基于xml配置文件使用定时任务&quot;&gt;&lt;/a&gt;基于xml配置文件使用定时任务&lt;/h2&gt;&lt;p&gt;首先配置spring开启定时任务&lt;br&gt;
    
    </summary>
    
      <category term="Spring" scheme="https://peijie-sh.github.io/categories/Spring/"/>
    
    
      <category term="SpringBoot" scheme="https://peijie-sh.github.io/tags/SpringBoot/"/>
    
      <category term="Spring" scheme="https://peijie-sh.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>使用SpringBoot Actuator监控应用</title>
    <link href="https://peijie-sh.github.io/2017/02/13/%E4%BD%BF%E7%94%A8SpringBoot%20Actuator%E7%9B%91%E6%8E%A7%E5%BA%94%E7%94%A8/"/>
    <id>https://peijie-sh.github.io/2017/02/13/使用SpringBoot Actuator监控应用/</id>
    <published>2017-02-13T04:25:34.000Z</published>
    <updated>2018-04-14T12:45:39.758Z</updated>
    
    <content type="html"><![CDATA[<p>Actuator是Spring Boot提供的对应用系统的自省和监控的集成功能，可以对应用系统进行配置查看、相关功能统计等。</p>
<h1 id="使用Actuator"><a href="#使用Actuator" class="headerlink" title="使用Actuator"></a>使用Actuator</h1><p>引入依赖即可</p>
<ul>
<li><p><code>Maven</code>：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>Gradle</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile(&apos;org.springframework.boot:spring-boot-starter-actuator&apos;)</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="Endpoints"><a href="#Endpoints" class="headerlink" title="Endpoints"></a>Endpoints</h1><p>列举一些主要的endpoints<br><a id="more"></a><br><img src="http://img.blog.csdn.net/20170213112756666" alt="endpoints"></p>
<h1 id="配置文件属性介绍"><a href="#配置文件属性介绍" class="headerlink" title="配置文件属性介绍"></a>配置文件属性介绍</h1><h3 id="地址和端口的配置"><a href="#地址和端口的配置" class="headerlink" title="地址和端口的配置"></a>地址和端口的配置</h3><ul>
<li><code>management.port</code>：指定访问这些监控方法的端口，与逻辑接口端口分离。如果不想将这些暴露在http中，可以设置 management.port = -1</li>
<li><code>management.address</code>：指定地址，比如只能通过本机监控，可以设置 management.address = 127.0.0.1</li>
</ul>
<h3 id="敏感信息访问限制"><a href="#敏感信息访问限制" class="headerlink" title="敏感信息访问限制"></a>敏感信息访问限制</h3><p>根据上面表格，鉴权为<code>false</code>的，表示不敏感，可以随意访问，否则就是做了一些保护，不能随意访问。</p>
<blockquote>
<p>endpoints.mappings.sensitive=false</p>
</blockquote>
<p>这样需要对每一个都设置，比较麻烦。敏感方法默认是需要用户拥有<code>ACTUATOR</code>角色，因此，也可以设置关闭安全限制：</p>
<blockquote>
<p>management.security.enabled=false</p>
</blockquote>
<p>或者配合<code>Spring Security</code>做细粒度控制。</p>
<h3 id="自定义系统信息"><a href="#自定义系统信息" class="headerlink" title="自定义系统信息"></a>自定义系统信息</h3><p>可以通过访问<code>/info</code>获取信息，需要在配置文件设置<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="attr">info:</span></div><div class="line"><span class="attr">  aaa:</span></div><div class="line"><span class="attr">    name:</span> xxx</div><div class="line"><span class="attr">    email:</span> xxx@qq.com</div><div class="line"><span class="attr">  bbb:</span></div><div class="line"><span class="attr">    age:</span> <span class="number">25</span></div><div class="line"><span class="attr">    hobbies:</span> running</div><div class="line"><span class="attr">  build:</span></div><div class="line"><span class="attr">    artifact:</span> <span class="string">"@project.artifactId@"</span></div><div class="line"><span class="attr">    name:</span> <span class="string">"@project.name@"</span></div><div class="line"><span class="attr">    version:</span> <span class="string">"@project.version@"</span></div></pre></td></tr></table></figure></p>
<p>此时访问<a href="localhost:8080/info" target="_blank" rel="external">localhost:8080/info</a>返回一下信息<br><img src="http://img.blog.csdn.net/20170213115530800?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTg1MTQ3OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>如果使用<code>maven</code>，可以访问pom.xml文件的信息，用法如下:</p>
<blockquote>
<p>// 获取pom.xml中project节点下artifactId属性<br>artifact: “@project.artifactId@”</p>
</blockquote>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p><code>/shutdown</code>这个需要post方式，通过请求来关闭应用。<br>这个操作比较敏感，要想真正生效，需要以下配置:</p>
<blockquote>
<p>endpoints.shutdown.enabled: true</p>
</blockquote>
<ul>
<li>我们可以通过实现<code>HealthIndicator</code>接口，编写自己的<code>/health</code>方法逻辑。也可以增加自定义监控方法。</li>
<li>查看详细介绍，请移步 <a href="http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#production-ready" target="_blank" rel="external">官方文档</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Actuator是Spring Boot提供的对应用系统的自省和监控的集成功能，可以对应用系统进行配置查看、相关功能统计等。&lt;/p&gt;
&lt;h1 id=&quot;使用Actuator&quot;&gt;&lt;a href=&quot;#使用Actuator&quot; class=&quot;headerlink&quot; title=&quot;使用Actuator&quot;&gt;&lt;/a&gt;使用Actuator&lt;/h1&gt;&lt;p&gt;引入依赖即可&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Maven&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-actuator&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Gradle&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;compile(&amp;apos;org.springframework.boot:spring-boot-starter-actuator&amp;apos;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Endpoints&quot;&gt;&lt;a href=&quot;#Endpoints&quot; class=&quot;headerlink&quot; title=&quot;Endpoints&quot;&gt;&lt;/a&gt;Endpoints&lt;/h1&gt;&lt;p&gt;列举一些主要的endpoints&lt;br&gt;
    
    </summary>
    
      <category term="Spring" scheme="https://peijie-sh.github.io/categories/Spring/"/>
    
    
      <category term="SpringBoot" scheme="https://peijie-sh.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>在SpringBoot中使用Logback管理日志</title>
    <link href="https://peijie-sh.github.io/2017/02/11/%E5%9C%A8SpringBoot%E4%B8%AD%E4%BD%BF%E7%94%A8Logback%E7%AE%A1%E7%90%86%E6%97%A5%E5%BF%97/"/>
    <id>https://peijie-sh.github.io/2017/02/11/在SpringBoot中使用Logback管理日志/</id>
    <published>2017-02-11T07:31:35.000Z</published>
    <updated>2018-04-14T12:45:39.761Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot的默认日志配置"><a href="#SpringBoot的默认日志配置" class="headerlink" title="SpringBoot的默认日志配置"></a>SpringBoot的默认日志配置</h1><p><code>SpringBoot</code>开箱即用，默认帮你配置了日志框架，使用 <code>Commons Logging</code> ，但是默认配置也提供了对常用日志的支持，如： Java Util Logging ， Log4J , Log4J2 和 Logback。每种Logger都可以通过配置使用控制台或者文件输出日志内容。</p>
<h2 id="控制台输出"><a href="#控制台输出" class="headerlink" title="控制台输出"></a>控制台输出</h2><p>关于log日志，首先说说的5个日志级别 LEVEL：<br>从高到低分别是<code>ERROR</code>、<code>WARN</code>、<code>INFO</code>、<code>DEBUG</code>、<code>TRACE</code><br>低级别的会输出高级别信息，高级别不会输出低级别信息。例如：等级设为<code>ERROR</code>的话，<code>WARN</code>、<code>INFO</code>、<code>DEBUG</code>的信息是不会输出的。<br>在<code>SpringBoot</code>中默认配置了<code>ERROR</code> 、<code>WARN</code>和<code>INFO</code>级别的日志输出到控制台。<br>Logback中没有<code>FATAL</code>级别，它会被当作<code>ERROR</code>级别来处理。</p>
<a id="more"></a>
<h2 id="我们可以通过两种方式切换至-DEBUG-级别："><a href="#我们可以通过两种方式切换至-DEBUG-级别：" class="headerlink" title="我们可以通过两种方式切换至 DEBUG 级别："></a>我们可以通过两种方式切换至 DEBUG 级别：</h2><ul>
<li>在运行命令后加入 –debug 标志，如： $ java -jar myapp.jar –debug</li>
<li>在 <code>application.properties</code> 中配置 debug=true ，该属性置为true的时候，核心Logger（包含嵌入式容器、hibernate、spring）会输出更多内容，但是你自己应用的日志并不会输出为DEBUG级别。</li>
</ul>
<h2 id="多彩输出"><a href="#多彩输出" class="headerlink" title="多彩输出"></a>多彩输出</h2><p><code>SpringBoot</code>从1.4.0版本开始支持彩色日志输出了。<br>如果你的终端支持ANSI，设置彩色输出会让日志更具可读性。通过在 <code>application.properties</code> 中设置 <code>spring.output.ansi.enabled</code> 参数来支持。</p>
<ul>
<li><code>NEVER</code>：禁用ANSI-colored输出（默认项）</li>
<li><code>DETECT</code>：会检查终端是否支持ANSI，是的话就采用彩色输出（推荐项）</li>
<li><code>ALWAYS</code>：总是使用ANSI-colored格式输出，若终端不支持的时候，会有很多干扰信息，不推荐使用</li>
</ul>
<h2 id="文件输出"><a href="#文件输出" class="headerlink" title="文件输出"></a>文件输出</h2><p><code>SpringBoot</code>默认配置只会输出到控制台，并不会记录到文件中，但是我们通常生产环境使用时都需要以文件方式记录。</p>
<p>若要增加文件输出，需要在 <code>application.properties</code> 中配置 <code>logging.file</code> 或 <code>logging.path</code> 属性。</p>
<ul>
<li><code>logging.file</code>:设置文件，可以是绝对路径，也可以是相对路径。如： logging.file=my.log</li>
<li><code>logging.path</code>:设置目录，会在该目录下创建spring.log文件，并写入日志内容，如： logging.path=/var/log</li>
</ul>
<p><strong>日志文件会在10Mb大小的时候被截断，产生新的日志文件，默认级别为：ERROR、WARN、INFO</strong></p>
<h2 id="级别控制"><a href="#级别控制" class="headerlink" title="级别控制"></a>级别控制</h2><p>在<code>SpringBoot</code>中只需要在 <code>application.properties</code> 中进行配置完成日志记录的级别控制。</p>
<p>配置格式： logging.level.*=LEVEL</p>
<ul>
<li><code>logging.level</code> ：日志级别控制前缀， * 为包名或Logger名</li>
<li><code>LEVEL</code> ：选项TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF</li>
</ul>
<p>举例：</p>
<ul>
<li>logging.level.com.controller=DEBUG ： com.controller包下所有class以<code>DEBUG</code>级别输出</li>
<li>logging.level.root=WARN ：root日志以<code>WARN</code>级别输出</li>
</ul>
<h1 id="自定义日志配置"><a href="#自定义日志配置" class="headerlink" title="自定义日志配置"></a>自定义日志配置</h1><p>如果不想使用默认配置，只要加入自己的日志配置文件就行了。<br>由于日志服务一般都在<code>ApplicationContext</code>创建前就初始化了，它并不是必须通过<code>Spring</code>的配置文件控制。因此通过系统属性和传统的<code>Spring Boot</code>外部配置文件依然可以很好的支持日志控制和管理。</p>
<p>根据不同的日志系统，你可以按如下规则组织配置文件名，就能被正确加载：</p>
<ul>
<li>Logback： logback-spring.xml , logback-spring.groovy , logback.xml , logback.groovy</li>
<li>Log4j： log4j-spring.properties , log4j-spring.xml , log4j.properties , log4j.xml</li>
<li>Log4j2： log4j2-spring.xml , log4j2.xml</li>
<li>JDK (Java Util Logging)： logging.properties</li>
</ul>
<p><code>SpringBoot</code>官方推荐优先使用带有 <code>-spring</code> 的文件名作为你的日志配置（如使用 logback-spring.xml ，而不是 logback.xml ）</p>
<h2 id="自定义输出格式"><a href="#自定义输出格式" class="headerlink" title="自定义输出格式"></a>自定义输出格式</h2><p>在<code>SpringBoot</code>中可以通过在 <code>application.properties</code> 配置如下参数控制输出格式：</p>
<ul>
<li><code>logging.pattern.console</code>：定义输出到控制台的样式（不支持JDK Logger）</li>
<li><code>logging.pattern.file</code>：定义输出到文件的样式（不支持JDK Logger）</li>
</ul>
<p>也可以直接在日志配置文件中定义这些格式，而不是在应用配置文件中。</p>
<h2 id="常用的Logback配置文件模板"><a href="#常用的Logback配置文件模板" class="headerlink" title="常用的Logback配置文件模板"></a>常用的Logback配置文件模板</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_HOME"</span> <span class="attr">value</span>=<span class="string">"d:/logs"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 彩色日志依赖的渲染类 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">"clr"</span> <span class="attr">converterClass</span>=<span class="string">"org.springframework.boot.logging.logback.ColorConverter"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">"wex"</span></span></div><div class="line">                    <span class="attr">converterClass</span>=<span class="string">"org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"</span>/&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">"wEx"</span></span></div><div class="line">                    <span class="attr">converterClass</span>=<span class="string">"org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"</span>/&gt;</div><div class="line">    <span class="comment">&lt;!-- 彩色日志格式 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"CONSOLE_LOG_PATTERN"</span></span></div><div class="line">              <span class="attr">value</span>=<span class="string">"$&#123;CONSOLE_LOG_PATTERN:-%clr(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;)&#123;faint&#125; %clr($&#123;LOG_LEVEL_PATTERN:-%5p&#125;) %clr($&#123;PID:- &#125;)&#123;magenta&#125; %clr(--)&#123;faint&#125; %clr([%15.15t])&#123;faint&#125; %clr(%-40.40logger&#123;39&#125;)&#123;cyan&#125; %clr(:)&#123;faint&#125; %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;"</span>/&gt;</div><div class="line">    <span class="comment">&lt;!-- Console 输出设置 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"console"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">encoder</span>&gt;</span></div><div class="line">			<span class="comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span></div><div class="line">			<span class="comment">&lt;!--&lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n&lt;/pattern&gt;--&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">charset</span>&gt;</span>utf8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">appender</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 按照每天生成日志文件 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!--日志文件输出的文件名--&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/mixedSys.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 日志logger(包.类)的输出级别 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span> &gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"console"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"file"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">logger</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.springframework.boot"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 为 Hibernate sql 定制 --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- &lt;logger name="org.hibernate.type.descriptor.sql.BasicBinder"  level="TRACE" /&gt;</span></div><div class="line">    &lt;logger name="org.hibernate.type.descriptor.sql.BasicExtractor"  level="DEBUG" /&gt;</div><div class="line">    &lt;logger name="org.hibernate.SQL" level="DEBUG" /&gt;</div><div class="line">    &lt;logger name="org.hibernate.engine.QueryParameters" level="DEBUG" /&gt;</div><div class="line">    &lt;logger name="org.hibernate.engine.query.HQLQueryPlan" level="DEBUG" /&gt;  --&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 日志输出级别 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span> <span class="comment">&lt;!-- 此时debug级别的信息会被过滤 --&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"console"</span> /&gt;</span>   </div><div class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"file"</span> /&gt;</span>   </div><div class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span> </div><div class="line">    </div><div class="line">	<span class="comment">&lt;!--日志异步到数据库 --&gt;</span>    </div><div class="line">    <span class="comment">&lt;!-- &lt;appender name="DB" class="ch.qos.logback.classic.db.DBAppender"&gt;  </span></div><div class="line">        日志异步到数据库   </div><div class="line">        &lt;connectionSource class="ch.qos.logback.core.db.DriverManagerConnectionSource"&gt;  </div><div class="line">            连接池   </div><div class="line">            &lt;dataSource class="com.mchange.v2.c3p0.ComboPooledDataSource"&gt;  </div><div class="line">              &lt;driverClass&gt;com.mysql.jdbc.Driver&lt;/driverClass&gt;  </div><div class="line">              &lt;url&gt;jdbc:mysql://127.0.0.1:3306/databaseName&lt;/url&gt;  </div><div class="line">              &lt;user&gt;root&lt;/user&gt;  </div><div class="line">              &lt;password&gt;root&lt;/password&gt;  </div><div class="line">            &lt;/dataSource&gt;  </div><div class="line">        &lt;/connectionSource&gt;  </div><div class="line">    &lt;/appender&gt; --&gt;</div><div class="line">	</div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringBoot的默认日志配置&quot;&gt;&lt;a href=&quot;#SpringBoot的默认日志配置&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot的默认日志配置&quot;&gt;&lt;/a&gt;SpringBoot的默认日志配置&lt;/h1&gt;&lt;p&gt;&lt;code&gt;SpringBoot&lt;/code&gt;开箱即用，默认帮你配置了日志框架，使用 &lt;code&gt;Commons Logging&lt;/code&gt; ，但是默认配置也提供了对常用日志的支持，如： Java Util Logging ， Log4J , Log4J2 和 Logback。每种Logger都可以通过配置使用控制台或者文件输出日志内容。&lt;/p&gt;
&lt;h2 id=&quot;控制台输出&quot;&gt;&lt;a href=&quot;#控制台输出&quot; class=&quot;headerlink&quot; title=&quot;控制台输出&quot;&gt;&lt;/a&gt;控制台输出&lt;/h2&gt;&lt;p&gt;关于log日志，首先说说的5个日志级别 LEVEL：&lt;br&gt;从高到低分别是&lt;code&gt;ERROR&lt;/code&gt;、&lt;code&gt;WARN&lt;/code&gt;、&lt;code&gt;INFO&lt;/code&gt;、&lt;code&gt;DEBUG&lt;/code&gt;、&lt;code&gt;TRACE&lt;/code&gt;&lt;br&gt;低级别的会输出高级别信息，高级别不会输出低级别信息。例如：等级设为&lt;code&gt;ERROR&lt;/code&gt;的话，&lt;code&gt;WARN&lt;/code&gt;、&lt;code&gt;INFO&lt;/code&gt;、&lt;code&gt;DEBUG&lt;/code&gt;的信息是不会输出的。&lt;br&gt;在&lt;code&gt;SpringBoot&lt;/code&gt;中默认配置了&lt;code&gt;ERROR&lt;/code&gt; 、&lt;code&gt;WARN&lt;/code&gt;和&lt;code&gt;INFO&lt;/code&gt;级别的日志输出到控制台。&lt;br&gt;Logback中没有&lt;code&gt;FATAL&lt;/code&gt;级别，它会被当作&lt;code&gt;ERROR&lt;/code&gt;级别来处理。&lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="https://peijie-sh.github.io/categories/Spring/"/>
    
    
      <category term="SpringBoot" scheme="https://peijie-sh.github.io/tags/SpringBoot/"/>
    
      <category term="Logback" scheme="https://peijie-sh.github.io/tags/Logback/"/>
    
  </entry>
  
  <entry>
    <title>用SpringMVC搭建web应用</title>
    <link href="https://peijie-sh.github.io/2016/12/13/%E7%94%A8SpringMVC%E6%90%AD%E5%BB%BAweb%E5%BA%94%E7%94%A8/"/>
    <id>https://peijie-sh.github.io/2016/12/13/用SpringMVC搭建web应用/</id>
    <published>2016-12-13T03:15:35.000Z</published>
    <updated>2018-04-14T12:45:39.766Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/4059338-fe41c5b216f5ff66.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="SpringMVC"></p>
<p>在使用<code>SpringMVC</code>时，最重要的2个类就是<code>DispatcherServlet</code>和<code>ContextLoaderListener</code>。<code>DispatcherServlet</code>加载包含Web组件的bean，如控制器、视图解析器以及处理器映射，<code>ContextLoaderListener</code>加载应用中的其他bean(通常是驱动应用后端的中间层和数据层组件)。</p>
<a id="more"></a>
<h1 id="Servlet-3-0之后"><a href="#Servlet-3-0之后" class="headerlink" title="Servlet 3.0之后"></a>Servlet 3.0之后</h1><p>servlet3.0规范出来后，spring3.2有了一种简便的搭建方式。<br>直接继承<code>AbstractAnnotationConfigDispatcherServletInitializer</code>即可。<br>这个类会自动创建DispatcherServlet和ContextLoaderListener。这种方式不再需要web.xml，非常方便。</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>在Servlet 3.0环境中，容器会在类路径中查找实现javax.servlet.ServletContainerInitializer接口的类，如果能发现的话，就会用它来配置Servlet容器。<br>Spring提供了这个接口的实现，名为SpringServletContainerInitializer，这个类反过来又会查找实现WebApplicationInitializer的类并将配置的任务交给它们来完成。<br>Spring 3.2引入了一个便利的WebApplicationInitializer基础实现，也就是AbstractAnnotationConfigDispatcherServletInitializer。<br>所以我们只要继承AbstractAnnotationConfigDispatcherServletInitializer（同时也就实现了WebApplicationInitializer），在部署到Servlet 3.0容器中的时候，容器会自动发现它，并用它来配置Servlet上下文。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebInitializer</span> <span class="keyword">extends</span> <span class="title">AbstractAnnotationConfigDispatcherServletInitializer</span> </span>&#123;</div><div class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Class&lt;?&gt;[]&#123;RootConfig.class&#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 指定配置类</span></div><div class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Class&lt;?&gt;[]&#123;WebConfig.class&#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 将DispatcherServlet映射到"/"</span></div><div class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[]&#123;<span class="string">"/"</span>&#125;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Servlet-3-0之前"><a href="#Servlet-3-0之前" class="headerlink" title="Servlet 3.0之前"></a>Servlet 3.0之前</h1><p>如果你要部署在不支持servlet3.0的容器，比如tomcat6和以下版本，那就只能通过web.xml来配置了。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">version</span>=<span class="string">"2.5"</span> </span></div><div class="line">  <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">  <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></div><div class="line">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee</span></div><div class="line">      http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"&gt;</div><div class="line">  </div><div class="line">	<span class="comment">&lt;!-- 配置根上下文 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 注册Spring监听器 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">listener</span>&gt;</span> </div><div class="line">    </div><div class="line">	<span class="comment">&lt;!-- SpringMVC前端控制器 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- contextConfigLocation配置springmvc加载的配置文件（配置处理器、映射器、适配器等等） </span></div><div class="line">		如果不配置contextConfigLocation，默认加载的是/WEB-INF/servlet名称- serlvet.xml（springmvc-servlet.xml） --&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 指定servlet加载顺序，整数越小优先越高 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">	</div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4059338-fe41c5b216f5ff66.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;SpringMVC&quot;&gt;&lt;/p&gt;
&lt;p&gt;在使用&lt;code&gt;SpringMVC&lt;/code&gt;时，最重要的2个类就是&lt;code&gt;DispatcherServlet&lt;/code&gt;和&lt;code&gt;ContextLoaderListener&lt;/code&gt;。&lt;code&gt;DispatcherServlet&lt;/code&gt;加载包含Web组件的bean，如控制器、视图解析器以及处理器映射，&lt;code&gt;ContextLoaderListener&lt;/code&gt;加载应用中的其他bean(通常是驱动应用后端的中间层和数据层组件)。&lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="https://peijie-sh.github.io/categories/Spring/"/>
    
    
      <category term="Spring" scheme="https://peijie-sh.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>解决Linux下DNS配置重启失效问题</title>
    <link href="https://peijie-sh.github.io/2016/12/02/%E8%A7%A3%E5%86%B3Linux%E4%B8%8BDNS%E9%85%8D%E7%BD%AE%E9%87%8D%E5%90%AF%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/"/>
    <id>https://peijie-sh.github.io/2016/12/02/解决Linux下DNS配置重启失效问题/</id>
    <published>2016-12-02T03:59:31.000Z</published>
    <updated>2018-04-14T12:45:39.770Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/4059338-31dffaf4f06dcb24.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="DNS"></p>
<p>有时候能<code>ping</code>通ip地址，却<code>ping</code>不通域名，这就是<code>dns</code>没有配置的缘故。<br>但是DNS配置文件 <code>/etc/resolv.conf</code> 每次重启就会失效。</p>
<h1 id="那么问题来了，怎么解决每次都要配置的问题呢？"><a href="#那么问题来了，怎么解决每次都要配置的问题呢？" class="headerlink" title="那么问题来了，怎么解决每次都要配置的问题呢？"></a>那么问题来了，怎么解决每次都要配置的问题呢？</h1><h1 id="Ubuntu系统下"><a href="#Ubuntu系统下" class="headerlink" title="Ubuntu系统下"></a>Ubuntu系统下</h1><p>打开这个配置文件，发现有注释提示：</p>
<blockquote>
<p># Dynamic resolv.conf(5) file for glibc resolver(3) generated by resolvconf(8)# DO NOT EDIT THIS FILE BY HAND — YOUR CHANGES WILL BE OVERWRITTEN</p>
</blockquote>
<p>原来系统已经提示我们不要手动改此文件，因为这里每次重启会被覆盖。</p>
<h2 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h2><ul>
<li>执行<code>sudo vim /etc/network/interfaces</code></li>
<li>添加一行DNS配置，比如<code>dns-nameservers 8.8.8.8</code></li>
</ul>
<h2 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h2><ul>
<li>执行<code>sudo vim /etc/resolvconf/resolv.conf.d/base</code></li>
<li>添加DNS配置，比如<code>nameserver 8.8.8.8</code></li>
<li>如果有多个DNS就添加多行，一行一个</li>
<li>保存后执行<code>resolvconf -u</code><br>此时，再打开<code>/etc/resolv.conf</code>会发现刚才添加的DNS配置了。</li>
</ul>
<hr>
<h1 id="CentOS系统下"><a href="#CentOS系统下" class="headerlink" title="CentOS系统下"></a>CentOS系统下</h1><p>直接编辑<code>/etc/resolv.conf</code>，重启之后一样会失效。</p>
<h2 id="方法：直接将DNS配置写入网卡中"><a href="#方法：直接将DNS配置写入网卡中" class="headerlink" title="方法：直接将DNS配置写入网卡中"></a>方法：直接将DNS配置写入网卡中</h2><ul>
<li>执行 <code>cd /etc/sysconfig/network-scripts/</code></li>
<li>编辑网卡配置文件 <code>vi ifcfg-eth0</code>，在后面加入DNS配置<blockquote>
<p>DNS1=223.5.5.5<br>DNS1=223.6.6.6</p>
</blockquote>
</li>
<li>重启网卡<code>service network restart</code>即可<br>此时，再打开/etc/resolv.conf会发现刚才添加的DNS配置了。<br>以后在重启就没问题了 ^_^</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4059338-31dffaf4f06dcb24.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; 
    
    </summary>
    
      <category term="Linux" scheme="https://peijie-sh.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://peijie-sh.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux虚拟机设置静态IP</title>
    <link href="https://peijie-sh.github.io/2016/11/15/Linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81IP/"/>
    <id>https://peijie-sh.github.io/2016/11/15/Linux虚拟机设置静态IP/</id>
    <published>2016-11-15T03:08:34.000Z</published>
    <updated>2017-03-04T12:49:08.002Z</updated>
    
    <content type="html"><![CDATA[<p>照着网上的方法试了，总有几个步骤不对，反复试了几次，终于成功了，做下笔记。</p>
<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>我是win7系统（这个无所谓），本地VMWare装了Ubuntu 16.04 LTS  64位虚拟机。想在win7用xshell操作本地虚拟机。</p>
<h1 id="设置方法"><a href="#设置方法" class="headerlink" title="设置方法"></a>设置方法</h1><h2 id="配置VMware网络环境"><a href="#配置VMware网络环境" class="headerlink" title="配置VMware网络环境"></a>配置VMware网络环境</h2><p>VMware在默认安装完成之后，会创建三个虚拟的网络环境：</p>
<ul>
<li>VMnet0 ：桥接网络</li>
<li>VMnet1 ：Host-only</li>
<li>VMnet8 ：NAT</li>
</ul>
<p>其中，NAT表示VMWware内安装的Ubuntu将会在一个子网中，VMware通过网络地址转换，通过物理机的IP上网。<br>我们选择NAT方式实现Ubuntu的静态IP地址配置。<br><a id="more"></a></p>
<ol>
<li>打开VMware，在顶部依次选择：编辑 &gt; 虚拟网路编辑器，打开虚拟网路编辑器：<br><img src="http://img.blog.csdn.net/20161115104554327" alt="这里写图片描述"></li>
<li>去掉VMnet0和VMnet1，只保留VMnet8。</li>
<li>然后，去掉如下图中的“使用本地DHCP服务奖IP地址分配给虚拟机”：<br><img src="http://img.blog.csdn.net/20161115104659176" alt="这里写图片描述"></li>
<li>这里的子网IP为：192.168.8.0，子网掩码为：255.255.255.0，因此，在Ubuntu中，设置IP地址的时候，可以设置为192.168.8.x，x可以为1~255。</li>
<li>选择“NAT设置”，打开NAT设置面板：<br><img src="http://img.blog.csdn.net/20161115104851753" alt="这里写图片描述"><br>查看自己的网关地址，例如，此处的网关应该为：192.168.8.2。</li>
<li>最后，在VMWare的虚拟机管理界面，选择Ubuntu的“编辑虚拟机设置”，打开Ubuntu这个虚拟的设置界面。</li>
</ol>
<p>选择网络适配器，然后确定网络连接选中的是“自定义”中的VMnet8(NAT模式)：<br><img src="http://img.blog.csdn.net/20161115104937850" alt="这里写图片描述"></p>
<p>VMWare设置完毕。</p>
<h2 id="Ubuntu网络设置"><a href="#Ubuntu网络设置" class="headerlink" title="Ubuntu网络设置"></a>Ubuntu网络设置</h2><ol>
<li>在Ubuntu桌面的右上角，点击网络图标，然后选择“Edit Connections”：<br><img src="http://img.blog.csdn.net/20161115105137304" alt="这里写图片描述"></li>
<li><p>点击Edit按钮，在IPv4Settings选项卡中，Method选择<code>Manual</code>，点击add，编辑ip地址<br><img src="http://img.blog.csdn.net/20161115105455524" alt="这里写图片描述"><br>设置的IP地址为： IP： 192.168.8.100 子网掩码： 255.255.255.0 网关： 192.168.8.2<br>然后保存。</p>
</li>
<li><p>最后，点击Ubuntu桌面右上角的网络图标，选择<code>Disconnect</code>，断开连接。然后再打开该菜单，选择<code>Connect</code>，即可连接上网。 </p>
</li>
</ol>
<h2 id="终端配置"><a href="#终端配置" class="headerlink" title="终端配置"></a>终端配置</h2><h3 id="打开Terminal，配置静态ip"><a href="#打开Terminal，配置静态ip" class="headerlink" title="打开Terminal，配置静态ip"></a>打开Terminal，配置静态ip</h3><blockquote>
<p>sudo vi  /etc/network/interfaces</p>
</blockquote>
<p>内容改为如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">auto lo </div><div class="line">iface lo inet loopback</div><div class="line"></div><div class="line">auto ens33 </div><div class="line">iface ens33 inet static </div><div class="line">address 192.168.8.100 </div><div class="line">netmask 255.255.255.0 </div><div class="line">gateway 192.168.8.2</div></pre></td></tr></table></figure></p>
<p>这边说明一下，ubuntu15开始，网卡名<code>eth0</code>改成了<code>ens33</code>。</p>
<h3 id="配置dns"><a href="#配置dns" class="headerlink" title="配置dns"></a>配置dns</h3><blockquote>
<p>sudo vi /etc/resolv.conf</p>
</blockquote>
<p>在里面填入DNS，比如阿里的dns：223.5.5.5<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nameserver 223.5.5.5</div></pre></td></tr></table></figure></p>
<p>设置完毕。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>有的网上说要执行<code>sudo /etc/init.d/networking restart</code>重启网络。<br>但是我们之前vmware设置选择自定义的nat模式，所以执行以上命令会出错，只要vmware改为<code>桥接模式直接连接物理网络</code>，勾选<code>复制物理网络连接状态</code>，在执行就可以。</p>
<p>但是这样会导致虚拟机连不到网络，所以我最后又将连接模式改为自定义NAT模式，发现这时候，主机可以ssh连接本地虚拟机了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;照着网上的方法试了，总有几个步骤不对，反复试了几次，终于成功了，做下笔记。&lt;/p&gt;
&lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;p&gt;我是win7系统（这个无所谓），本地VMWare装了Ubuntu 16.04 LTS  64位虚拟机。想在win7用xshell操作本地虚拟机。&lt;/p&gt;
&lt;h1 id=&quot;设置方法&quot;&gt;&lt;a href=&quot;#设置方法&quot; class=&quot;headerlink&quot; title=&quot;设置方法&quot;&gt;&lt;/a&gt;设置方法&lt;/h1&gt;&lt;h2 id=&quot;配置VMware网络环境&quot;&gt;&lt;a href=&quot;#配置VMware网络环境&quot; class=&quot;headerlink&quot; title=&quot;配置VMware网络环境&quot;&gt;&lt;/a&gt;配置VMware网络环境&lt;/h2&gt;&lt;p&gt;VMware在默认安装完成之后，会创建三个虚拟的网络环境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VMnet0 ：桥接网络&lt;/li&gt;
&lt;li&gt;VMnet1 ：Host-only&lt;/li&gt;
&lt;li&gt;VMnet8 ：NAT&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中，NAT表示VMWware内安装的Ubuntu将会在一个子网中，VMware通过网络地址转换，通过物理机的IP上网。&lt;br&gt;我们选择NAT方式实现Ubuntu的静态IP地址配置。&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://peijie-sh.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://peijie-sh.github.io/tags/Linux/"/>
    
      <category term="Ubuntu" scheme="https://peijie-sh.github.io/tags/Ubuntu/"/>
    
  </entry>
  
</feed>
