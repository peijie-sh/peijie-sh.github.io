<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lingpj&#39;s blog</title>
  <subtitle>不忘初心，方得始终</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://peijie-sh.github.io/"/>
  <updated>2017-03-04T12:49:08.010Z</updated>
  <id>http://peijie-sh.github.io/</id>
  
  <author>
    <name>Lingpj</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>谈谈Java中的代理</title>
    <link href="http://peijie-sh.github.io/2017/02/17/%E8%B0%88%E8%B0%88Java%E4%B8%AD%E7%9A%84%E4%BB%A3%E7%90%86/"/>
    <id>http://peijie-sh.github.io/2017/02/17/谈谈Java中的代理/</id>
    <published>2017-02-17T07:36:35.000Z</published>
    <updated>2017-03-04T12:49:08.010Z</updated>
    
    <content type="html"><![CDATA[<p>代理是Java常用的设计模式，代理类通过调用被代理类的相关方法，实现对相关方法增强。比如加入事务、日志、报警发邮件等操作。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4059338-83f70e36399f4ad0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="java.png"><br><a id="more"></a></p>
<h1 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h1><p>静态代理，就是由程序员手动编写代理类或者用工具生成代理类的代码，再进行编译生成class文件，实现代理。比如简单工厂模式。</p>
<p>用法：</p>
<ul>
<li>代理类和目标类都实现相同接口。</li>
<li>代理类持有目标类的引用。</li>
</ul>
<p>缺点：<br>静态代理要为每个目标类创建一个代理类，当需要代理的对象太多，那么代理类也变得很多。代理类违背了可重复代理只写一次的原则。</p>
<h1 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h1><p>为了解决静态代理的缺点，于是引入了动态代理。<br>它有一个好处，那就是不用写很多代理类，生成的代理类数量是固定的。<br>一般动态代理分为2种：</p>
<h2 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h2><p>JDK动态代理是JDK自带的，不依赖第三方框架。<br>它的实现原理，就是利用Java的反射机制，创建一个实现接口的代理类。</p>
<p>用法：</p>
<ul>
<li>被代理对象必须实现接口。</li>
<li>代理对象由代理工厂自动生成。</li>
</ul>
<p>下面贴个例子</p>
<p>接口类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;   </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>;   </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>实现类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;   </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;   </div><div class="line">    System.out.println(<span class="string">"do 了 some thing ..."</span>);   </div><div class="line">  &#125;   </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>代理工厂：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;  </div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;  </div><div class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;  </div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Object target;</div><div class="line"></div><div class="line">    <span class="comment">//绑定委托对象，并返回代理类</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">bind</span><span class="params">(Object target)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.target = target;</div><div class="line">        <span class="comment">//绑定该类实现的所有接口，取得代理类 </span></div><div class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(target.getClass().getClassLoader(),</div><div class="line">                target.getClass().getInterfaces(), <span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy , Method method , Object[] args)</span><span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        Object result = <span class="keyword">null</span>;</div><div class="line">        <span class="comment">//这里就可以进行所谓的AOP编程了</span></div><div class="line">        <span class="comment">//在调用具体函数方法前，执行功能处理</span></div><div class="line">        result = method.invoke(target, args);</div><div class="line">        <span class="comment">//在调用具体函数方法后，执行功能处理</span></div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>测试类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestProxy</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">           ProxyHandler proxy = <span class="keyword">new</span> ProxyHandler();</div><div class="line">           <span class="comment">//绑定该类实现的所有接口</span></div><div class="line">           Subject sub = (Subject) proxy.bind(<span class="keyword">new</span> RealSubject());</div><div class="line">           sub.doSomething();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="CGLIB代理"><a href="#CGLIB代理" class="headerlink" title="CGLIB代理"></a>CGLIB代理</h2><p>使用CGLIB代理需要引入CGLIB库，它使用字节码技术实现代理。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;</div><div class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;</div><div class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodProxy;</div><div class="line">      </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CGLibProxy</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;    </div><div class="line">    </div><div class="line">    <span class="keyword">private</span> Object targetObject;<span class="comment">// CGLib需要代理的目标对象    </span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">createProxyObject</span><span class="params">(Object obj)</span> </span>&#123;    </div><div class="line">        <span class="keyword">this</span>.targetObject = obj;    </div><div class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();    </div><div class="line">        enhancer.setSuperclass(obj.getClass());    </div><div class="line">        enhancer.setCallback(<span class="keyword">this</span>);    </div><div class="line">        Object proxyObj = enhancer.create();    </div><div class="line">        <span class="keyword">return</span> proxyObj;<span class="comment">// 返回代理对象    </span></div><div class="line">    &#125;    </div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object proxy, Method method, Object[] args,    </span></span></div><div class="line">            MethodProxy methodProxy) <span class="keyword">throws</span> Throwable &#123;    </div><div class="line">        Object obj = <span class="keyword">null</span>;    </div><div class="line">        <span class="keyword">if</span> (<span class="string">"addUser"</span>.equals(method.getName())) &#123;<span class="comment">// 过滤方法    </span></div><div class="line">            checkPopedom();<span class="comment">// 检查权限    </span></div><div class="line">        &#125;    </div><div class="line">        obj = method.invoke(targetObject, args);    </div><div class="line">        <span class="keyword">return</span> obj;    </div><div class="line">    &#125;    </div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkPopedom</span><span class="params">()</span> </span>&#123;    </div><div class="line">        System.out.println(<span class="string">"检查权限  checkPopedom()!"</span>);    </div><div class="line">    &#125;    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    </div><div class="line">		Subject sub = (Subject) <span class="keyword">new</span> CGLibProxy().createProxyObject(<span class="keyword">new</span> RealSubject());</div><div class="line">		sub.doSomething();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2种动态代理的区别"><a href="#2种动态代理的区别" class="headerlink" title="2种动态代理的区别"></a>2种动态代理的区别</h2><p>JDK动态代理是利用反射机制生成一个实现代理接口的匿名类，在调用具体方法前调用InvokeHandler来处理。<br>而CGLIB动态代理是利用asm开源包，加载代理对象类的class文件，修改其字节码生成子类来处理。</p>
<p>在 Spring 中，</p>
<ul>
<li>如果目标对象实现了接口，默认情况下会采用JDK动态代理实现AOP </li>
<li>如果目标对象实现了接口，可以强制使用CGLIB实现AOP </li>
<li>如果目标对象没有实现了接口，必须采用CGLIB库，Spring会自动在JDK动态代理和CGLIB之间转换</li>
</ul>
<p>如何强制使用CGLIB实现AOP？</p>
<ul>
<li>添加CGLIB依赖</li>
<li>在Spring配置文件中加入<code>&lt;aop:aspectj-autoproxy proxy-target-class=&quot;true&quot;/&gt;</code></li>
<li>如果是SpringBoot，在配置文件设置<code>spring.aop.proxy-target-class=true</code></li>
</ul>
<p>JDK动态代理和CGLIB字节码生成的区别？</p>
<ul>
<li>JDK动态代理只能对实现了接口的类生成代理，而不能针对未实现接口的类</li>
<li>CGLIB是针对类实现代理，主要是对指定的类生成一个子类，覆盖其中的方法</li>
<li>因为是继承，所以该类或方法最好不要声明成final</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;代理是Java常用的设计模式，代理类通过调用被代理类的相关方法，实现对相关方法增强。比如加入事务、日志、报警发邮件等操作。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4059338-83f70e36399f4ad0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;java.png&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://peijie-sh.github.io/categories/Java/"/>
    
    
      <category term="动态代理" scheme="http://peijie-sh.github.io/tags/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>谈谈Java中的堆与栈</title>
    <link href="http://peijie-sh.github.io/2017/02/16/%E8%B0%88%E8%B0%88Java%E4%B8%AD%E7%9A%84%E5%A0%86%E4%B8%8E%E6%A0%88/"/>
    <id>http://peijie-sh.github.io/2017/02/16/谈谈Java中的堆与栈/</id>
    <published>2017-02-16T07:25:12.000Z</published>
    <updated>2017-03-04T12:49:08.011Z</updated>
    
    <content type="html"><![CDATA[<p><strong>在<code>JVM</code>中，内存主要被分为5类</strong><br><img src="http://upload-images.jianshu.io/upload_images/4059338-8a05e9cb9a61a962.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="JVM内存结构.jpg"></p>
<a id="more"></a>
<h1 id="堆Heap"><a href="#堆Heap" class="headerlink" title="堆Heap"></a>堆<code>Heap</code></h1><ul>
<li>存放关键字<code>new</code>创建的对象和数组。</li>
<li>堆内存被所有线程共享。</li>
<li>这块内存区由<code>JVM</code>（Java虚拟机）自己管理。当使用new创建对象时，不必指定分配空间的大小，<code>JVM</code>会动态自动分配一块区域；在程序执行过程中，没有指向此对象的引用时，此对象就被标记为可被回收状态，将由<code>GC</code>（垃圾回收器）在一个不确定的时间自动回收，释放所占的内存空间。</li>
</ul>
<h1 id="虚拟机栈VM-Stack"><a href="#虚拟机栈VM-Stack" class="headerlink" title="虚拟机栈VM Stack"></a>虚拟机栈<code>VM Stack</code></h1><ul>
<li>存放8种基本类型的数据和对象引用（不是对象）。</li>
<li>每个线程有自己的单独的栈。</li>
<li>先进后出，后进先出。</li>
<li>因为主要存放基本类型数据变量，所以分配空间比堆快。当超出变量的作用域，将由编译器立即释放空间。</li>
</ul>
<h1 id="本地方法栈Native-Method-Stack"><a href="#本地方法栈Native-Method-Stack" class="headerlink" title="本地方法栈Native Method Stack"></a>本地方法栈<code>Native Method Stack</code></h1><p>程序调用本地方法的内存区域。</p>
<h1 id="程序计数器-Program-Counter-Register"><a href="#程序计数器-Program-Counter-Register" class="headerlink" title="程序计数器 Program Counter Register"></a>程序计数器 <code>Program Counter Register</code></h1><p>一块较小的内存空间，可看作是当前线程所执行的字节码的 行号指示器。</p>
<p>通过改变计数器的值来选取下一条需要执行的字节码指令。（分支、循环、跳转、异常处理、线程恢复等）基础功能都依赖与其完成。</p>
<p>特点：</p>
<ul>
<li>线程私有：因为 Java 虚拟机的多线程是通过 线程轮流切换 并 分配处理器执行时间 来实现的，在某一时刻，只会执行一条线程。因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器。</li>
<li>无内存溢出：如果线程正在执行的是一个 Java 方法，这个计数器记录的是正在 执行的虚拟机字节码指令的地址；如果正在执行的是 Native 方法，这个计数器值则为空（Undefined）。此内存区域是唯一一个在 Java 虚拟机程序规范中没有规定任何 OutOfMemoryError 情况的区域。</li>
</ul>
<h1 id="方法区Method-Area"><a href="#方法区Method-Area" class="headerlink" title="方法区Method Area"></a>方法区<code>Method Area</code></h1><ul>
<li>跟堆一样，被所有的线程共享。</li>
<li>是一个内存逻辑区域，是<code>JVM</code>在装载类文件时，用于存储类型信息(类的描述信息)：<ul>
<li>类的基本信息：<ul>
<li>每个类的全限定名</li>
<li>每个类的直接超类的全限定名(可约束类型转换)</li>
<li>该类是类还是接口</li>
<li>该类型的访问修饰符</li>
<li>直接超接口的全限定名的有序列表</li>
</ul>
</li>
<li>已装载类的详细信息：<ul>
<li>运行时常量池：在方法区中，每个类型都对应一个常量池，存放该类型所用到的所有常量，常量池中存储了诸如文字字符串、final变量值、类名和方法名常量。它们以数组形式通过索引被访问，是外部调用与类联系及类型对象化的桥梁。（存的可能是个普通的字符串，然后经过常量池解析，则变成指向某个类的引用）</li>
<li>字段信息：字段信息存放类中声明的每一个字段的信息，包括字段的名、类型、修饰符。<br>字段名称指的是类或接口的实例变量或类变量，字段的描述符是一个指示字段的类型的字符串，如private A a=null;则a为字段名，A为描述符，private为修饰符。</li>
<li>方法信息：类中声明的每一个方法的信息，包括方法名、返回值类型、参数类型、修饰符、异常、方法的字节码。<br>(在编译的时候，就已经将方法的局部变量、操作数栈大小等确定并存放在字节码中，在装载的时候，随着类一起装入方法区。)</li>
<li>静态成员变量：类中的静态成员变量和静态代码块。</li>
<li>到类classloader的引用：到该类的类装载器的引用。</li>
<li>到类class的引用：虚拟机为每一个被装载的类型创建一个class实例，用来代表这个被装载的类。</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<p>具体可参考 <a href="http://www.jianshu.com/p/989c90f339b9" target="_blank" rel="external">传送门</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;在&lt;code&gt;JVM&lt;/code&gt;中，内存主要被分为5类&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4059338-8a05e9cb9a61a962.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;JVM内存结构.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://peijie-sh.github.io/categories/Java/"/>
    
    
      <category term="JVM" scheme="http://peijie-sh.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Spring MVC 统一异常处理总结</title>
    <link href="http://peijie-sh.github.io/2017/02/15/Spring%20MVC%20%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%80%BB%E7%BB%93/"/>
    <id>http://peijie-sh.github.io/2017/02/15/Spring MVC 统一异常处理总结/</id>
    <published>2017-02-15T08:11:13.000Z</published>
    <updated>2017-03-04T12:49:08.005Z</updated>
    
    <content type="html"><![CDATA[<p>在一个Spring MVC项目中，使用统一异常处理，可以使维护代码变得容易。下面总结一下常用的3种方法。</p>
<h1 id="实现HandlerExceptionResolver接口"><a href="#实现HandlerExceptionResolver接口" class="headerlink" title="实现HandlerExceptionResolver接口"></a>实现<code>HandlerExceptionResolver</code>接口</h1><p>实现<code>HandlerExceptionResolver</code>接口，实现<code>resolveException()</code>方法，根据传入的异常类型做出处理。</p>
<h1 id="继承AbstractHandlerExceptionResolver类"><a href="#继承AbstractHandlerExceptionResolver类" class="headerlink" title="继承AbstractHandlerExceptionResolver类"></a>继承<code>AbstractHandlerExceptionResolver</code>类</h1><p>继承<code>AbstractHandlerExceptionResolver</code>类，和第一种方式类似，因为<code>AbstractHandlerExceptionResolver</code>实现了<code>HandlerExceptionResolver</code>接口。<br>所以，我们继承之后也是重写<code>resolveException()</code>方法，再处理各种异常。</p>
<h1 id="使用注解-ControllerAdvice处理"><a href="#使用注解-ControllerAdvice处理" class="headerlink" title="使用注解@ControllerAdvice处理"></a>使用注解<code>@ControllerAdvice</code>处理</h1><p>推荐使用这种方法，比较直观。下面上代码：</p>
<a id="more"></a>
<p>首先是自定义异常类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceDoesNotExistException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">7833283455112352655L</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ResourceDoesNotExistException</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ResourceDoesNotExistException</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(message);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ResourceDoesNotExistException</span><span class="params">(String message, Throwable cause)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(message, cause);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ResourceDoesNotExistException</span><span class="params">(Throwable cause)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(cause);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">ResourceDoesNotExistException</span><span class="params">(String message, Throwable cause, <span class="keyword">boolean</span> enableSuppression, <span class="keyword">boolean</span> writableStackTrace)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(message, cause, enableSuppression, writableStackTrace);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后是全局异常统一处理类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ControllerAdvice</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@ExceptionHandler</span>(value = OtherException.class)</div><div class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">defaultErrorHandler</span><span class="params">(HttpServletRequest req, Exception ex)</span> </span>&#123;</div><div class="line">        <span class="comment">// 其他异常处理逻辑...</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@ExceptionHandler</span>(value = ResourceDoesNotExistException.class)</div><div class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">notFoundErrorHandler</span><span class="params">(HttpServletRequest req, ResourceDoesNotExistException ex)</span> </span>&#123;</div><div class="line">        ModelAndView mav = <span class="keyword">new</span> ModelAndView();</div><div class="line">        mav.setViewName(<span class="string">"404"</span>);</div><div class="line">        <span class="keyword">return</span> mav;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>添加<code>@ControllerAdvice</code>注解的类是集中处理异常的地方，可以同时存在多个这样的类，用来做更细粒度的划分。<br>在这个类中，我们可以对每一种异常编写一种处理逻辑，在方法上使用<code>@ExceptionHandler</code>注解修饰，传入指定的异常类型即可。<br>如果是RESTful风格，不返回视图，也可使用<code>@RestControllerAdvice</code>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在一个Spring MVC项目中，使用统一异常处理，可以使维护代码变得容易。下面总结一下常用的3种方法。&lt;/p&gt;
&lt;h1 id=&quot;实现HandlerExceptionResolver接口&quot;&gt;&lt;a href=&quot;#实现HandlerExceptionResolver接口&quot; class=&quot;headerlink&quot; title=&quot;实现HandlerExceptionResolver接口&quot;&gt;&lt;/a&gt;实现&lt;code&gt;HandlerExceptionResolver&lt;/code&gt;接口&lt;/h1&gt;&lt;p&gt;实现&lt;code&gt;HandlerExceptionResolver&lt;/code&gt;接口，实现&lt;code&gt;resolveException()&lt;/code&gt;方法，根据传入的异常类型做出处理。&lt;/p&gt;
&lt;h1 id=&quot;继承AbstractHandlerExceptionResolver类&quot;&gt;&lt;a href=&quot;#继承AbstractHandlerExceptionResolver类&quot; class=&quot;headerlink&quot; title=&quot;继承AbstractHandlerExceptionResolver类&quot;&gt;&lt;/a&gt;继承&lt;code&gt;AbstractHandlerExceptionResolver&lt;/code&gt;类&lt;/h1&gt;&lt;p&gt;继承&lt;code&gt;AbstractHandlerExceptionResolver&lt;/code&gt;类，和第一种方式类似，因为&lt;code&gt;AbstractHandlerExceptionResolver&lt;/code&gt;实现了&lt;code&gt;HandlerExceptionResolver&lt;/code&gt;接口。&lt;br&gt;所以，我们继承之后也是重写&lt;code&gt;resolveException()&lt;/code&gt;方法，再处理各种异常。&lt;/p&gt;
&lt;h1 id=&quot;使用注解-ControllerAdvice处理&quot;&gt;&lt;a href=&quot;#使用注解-ControllerAdvice处理&quot; class=&quot;headerlink&quot; title=&quot;使用注解@ControllerAdvice处理&quot;&gt;&lt;/a&gt;使用注解&lt;code&gt;@ControllerAdvice&lt;/code&gt;处理&lt;/h1&gt;&lt;p&gt;推荐使用这种方法，比较直观。下面上代码：&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://peijie-sh.github.io/categories/Java/"/>
    
    
      <category term="Spring" scheme="http://peijie-sh.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring Task定时任务的配置和使用</title>
    <link href="http://peijie-sh.github.io/2017/02/15/Spring%20Task%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>http://peijie-sh.github.io/2017/02/15/Spring Task定时任务的配置和使用/</id>
    <published>2017-02-15T03:33:12.000Z</published>
    <updated>2017-03-04T12:49:08.005Z</updated>
    
    <content type="html"><![CDATA[<p>记录下<code>Spring</code>自带的定时任务用法。</p>
<h1 id="spring中使用定时任务"><a href="#spring中使用定时任务" class="headerlink" title="spring中使用定时任务"></a>spring中使用定时任务</h1><h2 id="基于xml配置文件使用定时任务"><a href="#基于xml配置文件使用定时任务" class="headerlink" title="基于xml配置文件使用定时任务"></a>基于xml配置文件使用定时任务</h2><p>首先配置spring开启定时任务<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span>  </span></div><div class="line">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>   </div><div class="line">    <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span>  </div><div class="line">    <span class="attr">xmlns:task</span>=<span class="string">"http://www.springframework.org/schema/task"</span>  </div><div class="line">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span>  </div><div class="line">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span>   </div><div class="line">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans   </span></div><div class="line">    http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  </div><div class="line">    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd    </div><div class="line">    http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd    </div><div class="line">    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd    </div><div class="line">    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd    </div><div class="line">    http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.0.xsd"&gt;  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">task:annotation-driven</span> /&gt;</span> <span class="comment">&lt;!-- 定时器开关--&gt;</span>  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myTask"</span> <span class="attr">class</span>=<span class="string">"com.spring.task.MyTask"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">task:scheduled-tasks</span>&gt;</span>  </div><div class="line">        <span class="comment">&lt;!-- 这里表示的是每隔五秒执行一次 --&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">task:scheduled</span> <span class="attr">ref</span>=<span class="string">"myTask"</span> <span class="attr">method</span>=<span class="string">"show"</span> <span class="attr">cron</span>=<span class="string">"*/5 * * * * ?"</span> /&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">task:scheduled</span> <span class="attr">ref</span>=<span class="string">"myTask"</span> <span class="attr">method</span>=<span class="string">"print"</span> <span class="attr">cron</span>=<span class="string">"*/10 * * * * ?"</span>/&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">task:scheduled-tasks</span>&gt;</span>  </div><div class="line">      </div><div class="line">    <span class="comment">&lt;!-- 自动扫描的包名 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.spring.task"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>定义自己的任务执行逻辑</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.spring.task;  </div><div class="line">  </div><div class="line"><span class="comment">/** </span></div><div class="line"> * 定义任务 </div><div class="line"> */  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTask</span> </span>&#123;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;  </div><div class="line">        System.out.println(<span class="string">"show method 1"</span>);  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;  </div><div class="line">        System.out.println(<span class="string">"print method 1"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="基于注解使用定时任务"><a href="#基于注解使用定时任务" class="headerlink" title="基于注解使用定时任务"></a>基于注解使用定时任务</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.spring.task;  </div><div class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;  </div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;  </div><div class="line">  </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 基于注解的定时器  </div><div class="line"> */</div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTask2</span> </span>&#123;  </div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 定时计算。每天凌晨 01:00 执行一次</div><div class="line">     */</div><div class="line">    <span class="meta">@Scheduled</span>(cron = <span class="string">"0 0 1 * * *"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"show method 2"</span>);  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 启动时执行一次，之后每隔2秒执行一次  </div><div class="line">     */</div><div class="line">    <span class="meta">@Scheduled</span>(fixedRate = <span class="number">1000</span>*<span class="number">2</span>)   </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;  </div><div class="line">        System.out.println(<span class="string">"print method 2"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样，当项目启动，定时任务就会按照规则按时执行了。</p>
<h1 id="Spring-Boot中使用定时任务"><a href="#Spring-Boot中使用定时任务" class="headerlink" title="Spring Boot中使用定时任务"></a>Spring Boot中使用定时任务</h1><p>Spring Boot中使用更加方便。</p>
<h2 id="引入springboot-starter包"><a href="#引入springboot-starter包" class="headerlink" title="引入springboot starter包"></a>引入<code>springboot starter</code>包</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="在程序入口启动类添加-EnableScheduling，开启定时任务功能"><a href="#在程序入口启动类添加-EnableScheduling，开启定时任务功能" class="headerlink" title="在程序入口启动类添加@EnableScheduling，开启定时任务功能"></a>在程序入口启动类添加<code>@EnableScheduling</code>，开启定时任务功能</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableScheduling</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(Application.class, args);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="定义定时任务逻辑"><a href="#定义定时任务逻辑" class="headerlink" title="定义定时任务逻辑"></a>定义定时任务逻辑</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTask3</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count=<span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Scheduled</span>(cron=<span class="string">"*/6 * * * * ?"</span>)</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"this is scheduler task runing  "</span>+(count++));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="任务执行规则说明"><a href="#任务执行规则说明" class="headerlink" title="任务执行规则说明"></a>任务执行规则说明</h1><h2 id="注解参数说明"><a href="#注解参数说明" class="headerlink" title="注解参数说明"></a>注解参数说明</h2><p>先来看看<code>@Scheduled</code>注解的源码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD, ElementType.ANNOTATION_TYPE&#125;)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Repeatable</span>(Schedules.class)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Scheduled &#123;</div><div class="line"></div><div class="line">	<span class="function">String <span class="title">cron</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</div><div class="line"></div><div class="line">	<span class="function">String <span class="title">zone</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">long</span> <span class="title">fixedDelay</span><span class="params">()</span> <span class="keyword">default</span> -1</span>;</div><div class="line"></div><div class="line">	<span class="function">String <span class="title">fixedDelayString</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">long</span> <span class="title">fixedRate</span><span class="params">()</span> <span class="keyword">default</span> -1</span>;</div><div class="line"></div><div class="line">	<span class="function">String <span class="title">fixedRateString</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">long</span> <span class="title">initialDelay</span><span class="params">()</span> <span class="keyword">default</span> -1</span>;</div><div class="line"></div><div class="line">	<span class="function">String <span class="title">initialDelayString</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看出，注解中可以传8种参数：</p>
<ul>
<li>cron：指定cron表达式</li>
<li>zone：默认使用服务器默认时区。可以设置为<code>java.util.TimeZone</code>中的zoneId</li>
<li>fixedDelay：从上一个任务完成开始到下一个任务开始的间隔，单位毫秒</li>
<li>fixedDelayString：同上，时间值是<code>String</code>类型</li>
<li>fixedRate：从上一个任务开始到下一个任务开始的间隔，单位毫秒</li>
<li>fixedRateString：同上，时间值是<code>String</code>类型</li>
<li>initialDelay：任务首次执行延迟的时间，单位毫秒</li>
<li>initialDelayString：同上，时间值是<code>String</code>类型</li>
</ul>
<h2 id="cron表达式的用法"><a href="#cron表达式的用法" class="headerlink" title="cron表达式的用法"></a>cron表达式的用法</h2><p>Cron表达式是一个字符串，字符串以5或6个空格隔开，分为6或7个域，每一个域代表一个含义，Cron有如下两种语法格式： </p>
<ul>
<li>Seconds Minutes Hours DayofMonth Month DayofWeek Year </li>
<li>Seconds Minutes Hours DayofMonth Month DayofWeek</li>
</ul>
<p>每一个域可出现的字符如下： </p>
<ul>
<li>Seconds: 可出现”, - * /“四个字符，有效范围为0-59的整数 </li>
<li>Minutes: 可出现”, - * /“四个字符，有效范围为0-59的整数 </li>
<li>Hours: 可出现”, - * /“四个字符，有效范围为0-23的整数 </li>
<li>DayofMonth: 可出现”, - * / ? L W C”八个字符，有效范围为0-31的整数 </li>
<li>Month: 可出现”, - * /“四个字符，有效范围为1-12的整数或JAN-DEC </li>
<li>DayofWeek: 可出现”, - * / ? L C #”四个字符，有效范围为1-7的整数或SUN-SAT两个范围。1表示星期天，2表示星期一， 依次类推 </li>
<li>Year: 可出现”, - * /“四个字符，有效范围为1970-2099年</li>
</ul>
<p>每一个域都使用数字，但还可以出现如下特殊字符，它们的含义是： </p>
<ol>
<li><code>*</code>：表示匹配该域的任意值，假如在Minutes域使用*, 即表示每分钟都会触发事件。</li>
<li><code>?</code>：只能用在DayofMonth和DayofWeek两个域。它也匹配域的任意值，但实际不会。因为DayofMonth和 DayofWeek会相互影响。例如想在每月的20日触发调度，不管20日到底是星期几，则只能使用如下写法： 13 13 15 20 <em> ?, 其中最后一位只能用？，而不能使用</em>，如果使用*表示不管星期几都会触发，实际上并不是这样。 </li>
<li><code>-</code>：表示范围，例如在Minutes域使用5-20，表示从5分到20分钟每分钟触发一次。</li>
<li><code>/</code>：表示起始时间开始触发，然后每隔固定时间触发一次，例如在Minutes域使用5/20,则意味着5分钟触发一次，而25，45等分别触发一次。</li>
<li><code>,</code>：表示列出枚举值值。例如：在Minutes域使用5,20，则意味着在5和20分每分钟触发一次。 </li>
<li><code>L</code>：表示最后，只能出现在DayofWeek和DayofMonth域，如果在DayofWeek域使用5L,意味着在最后的一个星期四触发。</li>
<li><code>W</code>：表示有效工作日(周一到周五),只能出现在DayofMonth域，系统将在离指定日期的最近的有效工作日触发事件。例如：在 DayofMonth使用5W，如果5日是星期六，则将在最近的工作日：星期五，即4日触发。如果5日是星期天，则在6日(周一)触发；如果5日在星期一 到星期五中的一天，则就在5日触发。另外一点，W的最近寻找不会跨过月份。</li>
<li><code>LW</code>：这两个字符可以连用，表示在某个月最后一个工作日，即最后一个星期五。</li>
<li><code>#</code>：用于确定每个月第几个星期几，只能出现在DayofMonth域。例如在4#2，表示某月的第二个星期三。</li>
</ol>
<hr>
<p>参考 <a href="http://www.cnblogs.com/liuyitian/p/4108391.html" target="_blank" rel="external">cron表达式例子</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录下&lt;code&gt;Spring&lt;/code&gt;自带的定时任务用法。&lt;/p&gt;
&lt;h1 id=&quot;spring中使用定时任务&quot;&gt;&lt;a href=&quot;#spring中使用定时任务&quot; class=&quot;headerlink&quot; title=&quot;spring中使用定时任务&quot;&gt;&lt;/a&gt;spring中使用定时任务&lt;/h1&gt;&lt;h2 id=&quot;基于xml配置文件使用定时任务&quot;&gt;&lt;a href=&quot;#基于xml配置文件使用定时任务&quot; class=&quot;headerlink&quot; title=&quot;基于xml配置文件使用定时任务&quot;&gt;&lt;/a&gt;基于xml配置文件使用定时任务&lt;/h2&gt;&lt;p&gt;首先配置spring开启定时任务&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;beans&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;xmlns:p&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://www.springframework.org/schema/p&quot;&lt;/span&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;xmlns:task&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://www.springframework.org/schema/task&quot;&lt;/span&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;xmlns:context&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://www.springframework.org/schema/context&quot;&lt;/span&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;xmlns:aop&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://www.springframework.org/schema/aop&quot;&lt;/span&gt;   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://www.springframework.org/schema/beans   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.0.xsd&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;task:annotation-driven&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 定时器开关--&amp;gt;&lt;/span&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;myTask&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;com.spring.task.MyTask&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;task:scheduled-tasks&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 这里表示的是每隔五秒执行一次 --&amp;gt;&lt;/span&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;task:scheduled&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;ref&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;myTask&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;method&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;show&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;cron&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;*/5 * * * * ?&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;task:scheduled&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;ref&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;myTask&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;method&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;print&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;cron&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;*/10 * * * * ?&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;task:scheduled-tasks&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 自动扫描的包名 --&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;context:component-scan&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;base-package&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;com.spring.task&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;定义自己的任务执行逻辑&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://peijie-sh.github.io/categories/Java/"/>
    
    
      <category term="Spring" scheme="http://peijie-sh.github.io/tags/Spring/"/>
    
      <category term="SpringBoot" scheme="http://peijie-sh.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>使用Spring Boot Actuator监控应用</title>
    <link href="http://peijie-sh.github.io/2017/02/13/%E4%BD%BF%E7%94%A8Spring%20Boot%20Actuator%E7%9B%91%E6%8E%A7%E5%BA%94%E7%94%A8/"/>
    <id>http://peijie-sh.github.io/2017/02/13/使用Spring Boot Actuator监控应用/</id>
    <published>2017-02-13T04:25:34.000Z</published>
    <updated>2017-03-04T12:49:08.008Z</updated>
    
    <content type="html"><![CDATA[<p>Actuator是Spring Boot提供的对应用系统的自省和监控的集成功能，可以对应用系统进行配置查看、相关功能统计等。</p>
<h1 id="使用Actuator"><a href="#使用Actuator" class="headerlink" title="使用Actuator"></a>使用Actuator</h1><p>引入依赖即可</p>
<ul>
<li><p><code>Maven</code>：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>Gradle</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile(&apos;org.springframework.boot:spring-boot-starter-actuator&apos;)</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="Endpoints"><a href="#Endpoints" class="headerlink" title="Endpoints"></a>Endpoints</h1><p>列举一些主要的endpoints<br><a id="more"></a><br><img src="http://img.blog.csdn.net/20170213112756666" alt="endpoints"></p>
<h1 id="配置文件属性介绍"><a href="#配置文件属性介绍" class="headerlink" title="配置文件属性介绍"></a>配置文件属性介绍</h1><h3 id="地址和端口的配置"><a href="#地址和端口的配置" class="headerlink" title="地址和端口的配置"></a>地址和端口的配置</h3><ul>
<li><code>management.port</code>：指定访问这些监控方法的端口，与逻辑接口端口分离。如果不想将这些暴露在http中，可以设置 management.port = -1</li>
<li><code>management.address</code>：指定地址，比如只能通过本机监控，可以设置 management.address = 127.0.0.1</li>
</ul>
<h3 id="敏感信息访问限制"><a href="#敏感信息访问限制" class="headerlink" title="敏感信息访问限制"></a>敏感信息访问限制</h3><p>根据上面表格，鉴权为<code>false</code>的，表示不敏感，可以随意访问，否则就是做了一些保护，不能随意访问。</p>
<blockquote>
<p>endpoints.mappings.sensitive=false</p>
</blockquote>
<p>这样需要对每一个都设置，比较麻烦。敏感方法默认是需要用户拥有<code>ACTUATOR</code>角色，因此，也可以设置关闭安全限制：</p>
<blockquote>
<p>management.security.enabled=false</p>
</blockquote>
<p>或者配合<code>Spring Security</code>做细粒度控制。</p>
<h3 id="自定义系统信息"><a href="#自定义系统信息" class="headerlink" title="自定义系统信息"></a>自定义系统信息</h3><p>可以通过访问<code>/info</code>获取信息，需要在配置文件设置<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="attr">info:</span></div><div class="line"><span class="attr">  aaa:</span></div><div class="line"><span class="attr">    name:</span> xxx</div><div class="line"><span class="attr">    email:</span> xxx@qq.com</div><div class="line"><span class="attr">  bbb:</span></div><div class="line"><span class="attr">    age:</span> <span class="number">25</span></div><div class="line"><span class="attr">    hobbies:</span> running</div><div class="line"><span class="attr">  build:</span></div><div class="line"><span class="attr">    artifact:</span> <span class="string">"@project.artifactId@"</span></div><div class="line"><span class="attr">    name:</span> <span class="string">"@project.name@"</span></div><div class="line"><span class="attr">    version:</span> <span class="string">"@project.version@"</span></div></pre></td></tr></table></figure></p>
<p>此时访问<a href="localhost:8080/info" target="_blank" rel="external">localhost:8080/info</a>返回一下信息<br><img src="http://img.blog.csdn.net/20170213115530800?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTg1MTQ3OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>如果使用<code>maven</code>，可以访问pom.xml文件的信息，用法如下:</p>
<blockquote>
<p>// 获取pom.xml中project节点下artifactId属性<br>artifact: “@project.artifactId@”</p>
</blockquote>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p><code>/shutdown</code>这个需要post方式，通过请求来关闭应用。<br>这个操作比较敏感，要想真正生效，需要以下配置:</p>
<blockquote>
<p>endpoints.shutdown.enabled: true</p>
</blockquote>
<ul>
<li>我们可以通过实现<code>HealthIndicator</code>接口，编写自己的<code>/health</code>方法逻辑。也可以增加自定义监控方法。</li>
<li>查看详细介绍，请移步 <a href="http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#production-ready" target="_blank" rel="external">官方文档</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Actuator是Spring Boot提供的对应用系统的自省和监控的集成功能，可以对应用系统进行配置查看、相关功能统计等。&lt;/p&gt;
&lt;h1 id=&quot;使用Actuator&quot;&gt;&lt;a href=&quot;#使用Actuator&quot; class=&quot;headerlink&quot; title=&quot;使用Actuator&quot;&gt;&lt;/a&gt;使用Actuator&lt;/h1&gt;&lt;p&gt;引入依赖即可&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Maven&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-actuator&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Gradle&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;compile(&amp;apos;org.springframework.boot:spring-boot-starter-actuator&amp;apos;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Endpoints&quot;&gt;&lt;a href=&quot;#Endpoints&quot; class=&quot;headerlink&quot; title=&quot;Endpoints&quot;&gt;&lt;/a&gt;Endpoints&lt;/h1&gt;&lt;p&gt;列举一些主要的endpoints&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://peijie-sh.github.io/categories/Java/"/>
    
    
      <category term="SpringBoot" scheme="http://peijie-sh.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>在SpringBoot中使用Logback管理日志</title>
    <link href="http://peijie-sh.github.io/2017/02/11/%E5%9C%A8SpringBoot%E4%B8%AD%E4%BD%BF%E7%94%A8Logback%E7%AE%A1%E7%90%86%E6%97%A5%E5%BF%97/"/>
    <id>http://peijie-sh.github.io/2017/02/11/在SpringBoot中使用Logback管理日志/</id>
    <published>2017-02-11T07:31:35.000Z</published>
    <updated>2017-03-04T12:49:08.009Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot的默认日志配置"><a href="#SpringBoot的默认日志配置" class="headerlink" title="SpringBoot的默认日志配置"></a>SpringBoot的默认日志配置</h1><p><code>SpringBoot</code>开箱即用，默认帮你配置了日志框架，使用 <code>Commons Logging</code> ，但是默认配置也提供了对常用日志的支持，如： Java Util Logging ， Log4J , Log4J2 和 Logback。每种Logger都可以通过配置使用控制台或者文件输出日志内容。</p>
<h2 id="控制台输出"><a href="#控制台输出" class="headerlink" title="控制台输出"></a>控制台输出</h2><p>关于log日志，首先说说的5个日志级别 LEVEL：<br>从高到低分别是<code>FATAL</code>、<code>ERROR</code>、<code>WARN</code>、<code>INFO</code>、<code>DEBUG</code><br>低级别的会输出高级别信息，高级别不会输出低级别信息。例如：等级设为<code>ERROR</code>的话，<code>WARN</code>、<code>INFO</code>、<code>DEBUG</code>的信息是不会输出的。<br>在<code>SpringBoot</code>中默认配置了 <code>ERROR</code> 、 <code>WARN</code> 和 <code>INFO</code> 级别的日志输出到控制台。</p>
<a id="more"></a>
<h2 id="我们可以通过两种方式切换至-DEBUG-级别："><a href="#我们可以通过两种方式切换至-DEBUG-级别：" class="headerlink" title="我们可以通过两种方式切换至 DEBUG 级别："></a>我们可以通过两种方式切换至 DEBUG 级别：</h2><ul>
<li>在运行命令后加入 –debug 标志，如： $ java -jar myapp.jar –debug</li>
<li>在 <code>application.properties</code> 中配置 debug=true ，该属性置为true的时候，核心Logger（包含嵌入式容器、hibernate、spring）会输出更多内容，但是你自己应用的日志并不会输出为DEBUG级别。</li>
</ul>
<h2 id="多彩输出"><a href="#多彩输出" class="headerlink" title="多彩输出"></a>多彩输出</h2><p><code>SpringBoot</code>从1.4.0版本开始支持彩色日志输出了。<br>如果你的终端支持ANSI，设置彩色输出会让日志更具可读性。通过在 <code>application.properties</code> 中设置 <code>spring.output.ansi.enabled</code> 参数来支持。</p>
<ul>
<li><code>NEVER</code>：禁用ANSI-colored输出（默认项）</li>
<li><code>DETECT</code>：会检查终端是否支持ANSI，是的话就采用彩色输出（推荐项）</li>
<li><code>ALWAYS</code>：总是使用ANSI-colored格式输出，若终端不支持的时候，会有很多干扰信息，不推荐使用</li>
</ul>
<h2 id="文件输出"><a href="#文件输出" class="headerlink" title="文件输出"></a>文件输出</h2><p><code>SpringBoot</code>默认配置只会输出到控制台，并不会记录到文件中，但是我们通常生产环境使用时都需要以文件方式记录。</p>
<p>若要增加文件输出，需要在 <code>application.properties</code> 中配置 <code>logging.file</code> 或 <code>logging.path</code> 属性。</p>
<ul>
<li><code>logging.file</code>:设置文件，可以是绝对路径，也可以是相对路径。如： logging.file=my.log</li>
<li><code>logging.path</code>:设置目录，会在该目录下创建spring.log文件，并写入日志内容，如： logging.path=/var/log</li>
</ul>
<p><strong>日志文件会在10Mb大小的时候被截断，产生新的日志文件，默认级别为：ERROR、WARN、INFO</strong></p>
<h2 id="级别控制"><a href="#级别控制" class="headerlink" title="级别控制"></a>级别控制</h2><p>在<code>SpringBoot</code>中只需要在 <code>application.properties</code> 中进行配置完成日志记录的级别控制。</p>
<p>配置格式： logging.level.*=LEVEL</p>
<ul>
<li><code>logging.level</code> ：日志级别控制前缀， * 为包名或Logger名</li>
<li><code>LEVEL</code> ：选项TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF</li>
</ul>
<p>举例：</p>
<ul>
<li>logging.level.com.didispace=DEBUG ： com.didispace 包下所有class以DEBUG级别输出</li>
<li>logging.level.root=WARN ：root日志以WARN级别输出</li>
</ul>
<h1 id="自定义日志配置"><a href="#自定义日志配置" class="headerlink" title="自定义日志配置"></a>自定义日志配置</h1><p>如果不想使用默认配置，只要加入自己的日志配置文件就行了。<br>由于日志服务一般都在<code>ApplicationContext</code>创建前就初始化了，它并不是必须通过<code>Spring</code>的配置文件控制。因此通过系统属性和传统的<code>Spring Boot</code>外部配置文件依然可以很好的支持日志控制和管理。</p>
<p>根据不同的日志系统，你可以按如下规则组织配置文件名，就能被正确加载：</p>
<ul>
<li>Logback： logback-spring.xml , logback-spring.groovy , logback.xml , logback.groovy</li>
<li>Log4j： log4j-spring.properties , log4j-spring.xml , log4j.properties , log4j.xml</li>
<li>Log4j2： log4j2-spring.xml , log4j2.xml</li>
<li>JDK (Java Util Logging)： logging.properties</li>
</ul>
<p><code>SpringBoot</code>官方推荐优先使用带有 <code>-spring</code> 的文件名作为你的日志配置（如使用 logback-spring.xml ，而不是 logback.xml ）</p>
<h2 id="自定义输出格式"><a href="#自定义输出格式" class="headerlink" title="自定义输出格式"></a>自定义输出格式</h2><p>在<code>SpringBoot</code>中可以通过在 <code>application.properties</code> 配置如下参数控制输出格式：</p>
<ul>
<li><code>logging.pattern.console</code>：定义输出到控制台的样式（不支持JDK Logger）</li>
<li><code>logging.pattern.file</code>：定义输出到文件的样式（不支持JDK Logger）</li>
</ul>
<p>也可以直接在日志配置文件中定义这些格式，而不是在应用配置文件中。</p>
<h2 id="常用的Logback配置文件模板"><a href="#常用的Logback配置文件模板" class="headerlink" title="常用的Logback配置文件模板"></a>常用的Logback配置文件模板</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_HOME"</span> <span class="attr">value</span>=<span class="string">"d:/logs"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 彩色日志依赖的渲染类 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">"clr"</span> <span class="attr">converterClass</span>=<span class="string">"org.springframework.boot.logging.logback.ColorConverter"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">"wex"</span></span></div><div class="line">                    <span class="attr">converterClass</span>=<span class="string">"org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"</span>/&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">"wEx"</span></span></div><div class="line">                    <span class="attr">converterClass</span>=<span class="string">"org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"</span>/&gt;</div><div class="line">    <span class="comment">&lt;!-- 彩色日志格式 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"CONSOLE_LOG_PATTERN"</span></span></div><div class="line">              <span class="attr">value</span>=<span class="string">"$&#123;CONSOLE_LOG_PATTERN:-%clr(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;)&#123;faint&#125; %clr($&#123;LOG_LEVEL_PATTERN:-%5p&#125;) %clr($&#123;PID:- &#125;)&#123;magenta&#125; %clr(--)&#123;faint&#125; %clr([%15.15t])&#123;faint&#125; %clr(%-40.40logger&#123;39&#125;)&#123;cyan&#125; %clr(:)&#123;faint&#125; %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;"</span>/&gt;</div><div class="line">    <span class="comment">&lt;!-- Console 输出设置 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"console"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">encoder</span>&gt;</span></div><div class="line">			<span class="comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span></div><div class="line">			<span class="comment">&lt;!--&lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n&lt;/pattern&gt;--&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">charset</span>&gt;</span>utf8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">appender</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 按照每天生成日志文件 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!--日志文件输出的文件名--&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/mixedSys.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 日志logger(包.类)的输出级别 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span> &gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"console"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"file"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">logger</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.springframework.boot"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 为 Hibernate sql 定制 --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- &lt;logger name="org.hibernate.type.descriptor.sql.BasicBinder"  level="TRACE" /&gt;</span></div><div class="line">    &lt;logger name="org.hibernate.type.descriptor.sql.BasicExtractor"  level="DEBUG" /&gt;</div><div class="line">    &lt;logger name="org.hibernate.SQL" level="DEBUG" /&gt;</div><div class="line">    &lt;logger name="org.hibernate.engine.QueryParameters" level="DEBUG" /&gt;</div><div class="line">    &lt;logger name="org.hibernate.engine.query.HQLQueryPlan" level="DEBUG" /&gt;  --&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 日志输出级别 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span> <span class="comment">&lt;!-- 此时debug级别的信息会被过滤 --&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"console"</span> /&gt;</span>   </div><div class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"file"</span> /&gt;</span>   </div><div class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span> </div><div class="line">    </div><div class="line">	<span class="comment">&lt;!--日志异步到数据库 --&gt;</span>    </div><div class="line">    <span class="comment">&lt;!-- &lt;appender name="DB" class="ch.qos.logback.classic.db.DBAppender"&gt;  </span></div><div class="line">        日志异步到数据库   </div><div class="line">        &lt;connectionSource class="ch.qos.logback.core.db.DriverManagerConnectionSource"&gt;  </div><div class="line">            连接池   </div><div class="line">            &lt;dataSource class="com.mchange.v2.c3p0.ComboPooledDataSource"&gt;  </div><div class="line">              &lt;driverClass&gt;com.mysql.jdbc.Driver&lt;/driverClass&gt;  </div><div class="line">              &lt;url&gt;jdbc:mysql://127.0.0.1:3306/databaseName&lt;/url&gt;  </div><div class="line">              &lt;user&gt;root&lt;/user&gt;  </div><div class="line">              &lt;password&gt;root&lt;/password&gt;  </div><div class="line">            &lt;/dataSource&gt;  </div><div class="line">        &lt;/connectionSource&gt;  </div><div class="line">    &lt;/appender&gt; --&gt;</div><div class="line">	</div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringBoot的默认日志配置&quot;&gt;&lt;a href=&quot;#SpringBoot的默认日志配置&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot的默认日志配置&quot;&gt;&lt;/a&gt;SpringBoot的默认日志配置&lt;/h1&gt;&lt;p&gt;&lt;code&gt;SpringBoot&lt;/code&gt;开箱即用，默认帮你配置了日志框架，使用 &lt;code&gt;Commons Logging&lt;/code&gt; ，但是默认配置也提供了对常用日志的支持，如： Java Util Logging ， Log4J , Log4J2 和 Logback。每种Logger都可以通过配置使用控制台或者文件输出日志内容。&lt;/p&gt;
&lt;h2 id=&quot;控制台输出&quot;&gt;&lt;a href=&quot;#控制台输出&quot; class=&quot;headerlink&quot; title=&quot;控制台输出&quot;&gt;&lt;/a&gt;控制台输出&lt;/h2&gt;&lt;p&gt;关于log日志，首先说说的5个日志级别 LEVEL：&lt;br&gt;从高到低分别是&lt;code&gt;FATAL&lt;/code&gt;、&lt;code&gt;ERROR&lt;/code&gt;、&lt;code&gt;WARN&lt;/code&gt;、&lt;code&gt;INFO&lt;/code&gt;、&lt;code&gt;DEBUG&lt;/code&gt;&lt;br&gt;低级别的会输出高级别信息，高级别不会输出低级别信息。例如：等级设为&lt;code&gt;ERROR&lt;/code&gt;的话，&lt;code&gt;WARN&lt;/code&gt;、&lt;code&gt;INFO&lt;/code&gt;、&lt;code&gt;DEBUG&lt;/code&gt;的信息是不会输出的。&lt;br&gt;在&lt;code&gt;SpringBoot&lt;/code&gt;中默认配置了 &lt;code&gt;ERROR&lt;/code&gt; 、 &lt;code&gt;WARN&lt;/code&gt; 和 &lt;code&gt;INFO&lt;/code&gt; 级别的日志输出到控制台。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://peijie-sh.github.io/categories/Java/"/>
    
    
      <category term="SpringBoot" scheme="http://peijie-sh.github.io/tags/SpringBoot/"/>
    
      <category term="Logback" scheme="http://peijie-sh.github.io/tags/Logback/"/>
    
  </entry>
  
  <entry>
    <title>用SpringMVC搭建web应用</title>
    <link href="http://peijie-sh.github.io/2016/12/13/%E7%94%A8SpringMVC%E6%90%AD%E5%BB%BAweb%E5%BA%94%E7%94%A8/"/>
    <id>http://peijie-sh.github.io/2016/12/13/用SpringMVC搭建web应用/</id>
    <published>2016-12-13T03:15:35.000Z</published>
    <updated>2017-03-04T12:49:08.010Z</updated>
    
    <content type="html"><![CDATA[<p>在使用<code>SpringMVC</code>时，最重要的2个类就是<code>DispatcherServlet</code>和<code>ContextLoaderListener</code>。<code>DispatcherServlet</code>加载包含Web组件的bean，如控制器、视图解析器以及处理器映射，<code>ContextLoaderListener</code>加载应用中的其他bean(通常是驱动应用后端的中间层和数据层组件)。</p>
<h1 id="Servlet-3-0之后"><a href="#Servlet-3-0之后" class="headerlink" title="Servlet 3.0之后"></a>Servlet 3.0之后</h1><p>servlet3.0规范出来后，spring3.2有了一种简便的搭建方式。<br>直接继承<code>AbstractAnnotationConfigDispatcherServletInitializer</code>即可。<br>这个类会自动创建DispatcherServlet和ContextLoaderListener。这种方式不再需要web.xml，非常方便。</p>
<a id="more"></a>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>在Servlet 3.0环境中，容器会在类路径中查找实现javax.servlet.ServletContainerInitializer接口的类，如果能发现的话，就会用它来配置Servlet容器。<br>Spring提供了这个接口的实现，名为SpringServletContainerInitializer，这个类反过来又会查找实现WebApplicationInitializer的类并将配置的任务交给它们来完成。<br>Spring 3.2引入了一个便利的WebApplicationInitializer基础实现，也就是AbstractAnnotationConfigDispatcherServletInitializer。<br>所以我们只要继承AbstractAnnotationConfigDispatcherServletInitializer（同时也就实现了WebApplicationInitializer），在部署到Servlet 3.0容器中的时候，容器会自动发现它，并用它来配置Servlet上下文。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebInitializer</span> <span class="keyword">extends</span> <span class="title">AbstractAnnotationConfigDispatcherServletInitializer</span> </span>&#123;</div><div class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Class&lt;?&gt;[]&#123;RootConfig.class&#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 指定配置类</span></div><div class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Class&lt;?&gt;[]&#123;WebConfig.class&#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 将DispatcherServlet映射到"/"</span></div><div class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[]&#123;<span class="string">"/"</span>&#125;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Servlet-3-0之前"><a href="#Servlet-3-0之前" class="headerlink" title="Servlet 3.0之前"></a>Servlet 3.0之前</h1><p>如果你要部署在不支持servlet3.0的容器，比如tomcat6和以下版本，那就只能通过web.xml来配置了。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">version</span>=<span class="string">"2.5"</span> </span></div><div class="line">  <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">  <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></div><div class="line">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee</span></div><div class="line">      http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"&gt;</div><div class="line">  </div><div class="line">	<span class="comment">&lt;!-- 配置根上下文 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 注册Spring监听器 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">listener</span>&gt;</span> </div><div class="line">    </div><div class="line">	<span class="comment">&lt;!-- SpringMVC前端控制器 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- contextConfigLocation配置springmvc加载的配置文件（配置处理器、映射器、适配器等等） </span></div><div class="line">		如果不配置contextConfigLocation，默认加载的是/WEB-INF/servlet名称- serlvet.xml（springmvc-servlet.xml） --&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 指定servlet加载顺序，整数越小优先越高 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">	</div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用&lt;code&gt;SpringMVC&lt;/code&gt;时，最重要的2个类就是&lt;code&gt;DispatcherServlet&lt;/code&gt;和&lt;code&gt;ContextLoaderListener&lt;/code&gt;。&lt;code&gt;DispatcherServlet&lt;/code&gt;加载包含Web组件的bean，如控制器、视图解析器以及处理器映射，&lt;code&gt;ContextLoaderListener&lt;/code&gt;加载应用中的其他bean(通常是驱动应用后端的中间层和数据层组件)。&lt;/p&gt;
&lt;h1 id=&quot;Servlet-3-0之后&quot;&gt;&lt;a href=&quot;#Servlet-3-0之后&quot; class=&quot;headerlink&quot; title=&quot;Servlet 3.0之后&quot;&gt;&lt;/a&gt;Servlet 3.0之后&lt;/h1&gt;&lt;p&gt;servlet3.0规范出来后，spring3.2有了一种简便的搭建方式。&lt;br&gt;直接继承&lt;code&gt;AbstractAnnotationConfigDispatcherServletInitializer&lt;/code&gt;即可。&lt;br&gt;这个类会自动创建DispatcherServlet和ContextLoaderListener。这种方式不再需要web.xml，非常方便。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://peijie-sh.github.io/categories/Java/"/>
    
    
      <category term="Spring" scheme="http://peijie-sh.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>解决Linux下DNS配置重启失效问题</title>
    <link href="http://peijie-sh.github.io/2016/12/02/%E8%A7%A3%E5%86%B3Linux%E4%B8%8BDNS%E9%85%8D%E7%BD%AE%E9%87%8D%E5%90%AF%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/"/>
    <id>http://peijie-sh.github.io/2016/12/02/解决Linux下DNS配置重启失效问题/</id>
    <published>2016-12-02T03:59:31.000Z</published>
    <updated>2017-03-04T12:49:08.010Z</updated>
    
    <content type="html"><![CDATA[<p>有时候能<code>ping</code>通ip地址，却<code>ping</code>不通域名，这就是<code>dns</code>没有配置的缘故。<br>但是DNS配置文件 <code>/etc/resolv.conf</code> 每次重启就会失效。<br>打开这个配置文件，发现有注释提示：</p>
<blockquote>
<h1 id="Dynamic-resolv-conf-5-file-for-glibc-resolver-3-generated-by-resolvconf-8-DO-NOT-EDIT-THIS-FILE-BY-HAND-—-YOUR-CHANGES-WILL-BE-OVERWRITTEN"><a href="#Dynamic-resolv-conf-5-file-for-glibc-resolver-3-generated-by-resolvconf-8-DO-NOT-EDIT-THIS-FILE-BY-HAND-—-YOUR-CHANGES-WILL-BE-OVERWRITTEN" class="headerlink" title="Dynamic resolv.conf(5) file for glibc resolver(3) generated by resolvconf(8)# DO NOT EDIT THIS FILE BY HAND — YOUR CHANGES WILL BE OVERWRITTEN"></a>Dynamic resolv.conf(5) file for glibc resolver(3) generated by resolvconf(8)# DO NOT EDIT THIS FILE BY HAND — YOUR CHANGES WILL BE OVERWRITTEN</h1></blockquote>
<p>原来系统已经提示我们不要手动改此文件，因为这里每次重启会被覆盖。</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><h1 id="那么问题来了，怎么解决每次都要配置的问题呢？"><a href="#那么问题来了，怎么解决每次都要配置的问题呢？" class="headerlink" title="那么问题来了，怎么解决每次都要配置的问题呢？"></a>那么问题来了，怎么解决每次都要配置的问题呢？</h1><h2 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h2><ul>
<li>执行<code>sudo vim /etc/network/interfaces</code></li>
<li>添加一行DNS配置，比如<code>dns-nameservers 8.8.8.8</code></li>
</ul>
<h2 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h2><ul>
<li>执行<code>sudo vim /etc/resolvconf/resolv.conf.d/base</code></li>
<li>添加DNS配置，比如<code>nameserver 8.8.8.8</code></li>
<li>如果有多个DNS就添加多行，一行一个</li>
<li>保存后执行<code>resolvconf -u</code><br>此时，再打开<code>/etc/resolv.conf</code>会发现刚才添加的DNS配置了。<br>以后在重启就没问题了  ^_^</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有时候能&lt;code&gt;ping&lt;/code&gt;通ip地址，却&lt;code&gt;ping&lt;/code&gt;不通域名，这就是&lt;code&gt;dns&lt;/code&gt;没有配置的缘故。&lt;br&gt;但是DNS配置文件 &lt;code&gt;/etc/resolv.conf&lt;/code&gt; 每次重启就会失效。&lt;br&gt;打开这个配置文件，发现有注释提示：&lt;/p&gt;
&lt;blockquote&gt;
&lt;h1 id=&quot;Dynamic-resolv-conf-5-file-for-glibc-resolver-3-generated-by-resolvconf-8-DO-NOT-EDIT-THIS-FILE-BY-HAND-—-YOUR-CHANGES-WILL-BE-OVERWRITTEN&quot;&gt;&lt;a href=&quot;#Dynamic-resolv-conf-5-file-for-glibc-resolver-3-generated-by-resolvconf-8-DO-NOT-EDIT-THIS-FILE-BY-HAND-—-YOUR-CHANGES-WILL-BE-OVERWRITTEN&quot; class=&quot;headerlink&quot; title=&quot;Dynamic resolv.conf(5) file for glibc resolver(3) generated by resolvconf(8)# DO NOT EDIT THIS FILE BY HAND — YOUR CHANGES WILL BE OVERWRITTEN&quot;&gt;&lt;/a&gt;Dynamic resolv.conf(5) file for glibc resolver(3) generated by resolvconf(8)# DO NOT EDIT THIS FILE BY HAND — YOUR CHANGES WILL BE OVERWRITTEN&lt;/h1&gt;&lt;/blockquote&gt;
&lt;p&gt;原来系统已经提示我们不要手动改此文件，因为这里每次重启会被覆盖。&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://peijie-sh.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://peijie-sh.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux虚拟机设置静态IP</title>
    <link href="http://peijie-sh.github.io/2016/11/15/Linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81IP/"/>
    <id>http://peijie-sh.github.io/2016/11/15/Linux虚拟机设置静态IP/</id>
    <published>2016-11-15T03:08:34.000Z</published>
    <updated>2017-03-04T12:49:08.002Z</updated>
    
    <content type="html"><![CDATA[<p>照着网上的方法试了，总有几个步骤不对，反复试了几次，终于成功了，做下笔记。</p>
<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>我是win7系统（这个无所谓），本地VMWare装了Ubuntu 16.04 LTS  64位虚拟机。想在win7用xshell操作本地虚拟机。</p>
<h1 id="设置方法"><a href="#设置方法" class="headerlink" title="设置方法"></a>设置方法</h1><h2 id="配置VMware网络环境"><a href="#配置VMware网络环境" class="headerlink" title="配置VMware网络环境"></a>配置VMware网络环境</h2><p>VMware在默认安装完成之后，会创建三个虚拟的网络环境：</p>
<ul>
<li>VMnet0 ：桥接网络</li>
<li>VMnet1 ：Host-only</li>
<li>VMnet8 ：NAT</li>
</ul>
<p>其中，NAT表示VMWware内安装的Ubuntu将会在一个子网中，VMware通过网络地址转换，通过物理机的IP上网。<br>我们选择NAT方式实现Ubuntu的静态IP地址配置。<br><a id="more"></a></p>
<ol>
<li>打开VMware，在顶部依次选择：编辑 &gt; 虚拟网路编辑器，打开虚拟网路编辑器：<br><img src="http://img.blog.csdn.net/20161115104554327" alt="这里写图片描述"></li>
<li>去掉VMnet0和VMnet1，只保留VMnet8。</li>
<li>然后，去掉如下图中的“使用本地DHCP服务奖IP地址分配给虚拟机”：<br><img src="http://img.blog.csdn.net/20161115104659176" alt="这里写图片描述"></li>
<li>这里的子网IP为：192.168.8.0，子网掩码为：255.255.255.0，因此，在Ubuntu中，设置IP地址的时候，可以设置为192.168.8.x，x可以为1~255。</li>
<li>选择“NAT设置”，打开NAT设置面板：<br><img src="http://img.blog.csdn.net/20161115104851753" alt="这里写图片描述"><br>查看自己的网关地址，例如，此处的网关应该为：192.168.8.2。</li>
<li>最后，在VMWare的虚拟机管理界面，选择Ubuntu的“编辑虚拟机设置”，打开Ubuntu这个虚拟的设置界面。</li>
</ol>
<p>选择网络适配器，然后确定网络连接选中的是“自定义”中的VMnet8(NAT模式)：<br><img src="http://img.blog.csdn.net/20161115104937850" alt="这里写图片描述"></p>
<p>VMWare设置完毕。</p>
<h2 id="Ubuntu网络设置"><a href="#Ubuntu网络设置" class="headerlink" title="Ubuntu网络设置"></a>Ubuntu网络设置</h2><ol>
<li>在Ubuntu桌面的右上角，点击网络图标，然后选择“Edit Connections”：<br><img src="http://img.blog.csdn.net/20161115105137304" alt="这里写图片描述"></li>
<li><p>点击Edit按钮，在IPv4Settings选项卡中，Method选择<code>Manual</code>，点击add，编辑ip地址<br><img src="http://img.blog.csdn.net/20161115105455524" alt="这里写图片描述"><br>设置的IP地址为： IP： 192.168.8.100 子网掩码： 255.255.255.0 网关： 192.168.8.2<br>然后保存。</p>
</li>
<li><p>最后，点击Ubuntu桌面右上角的网络图标，选择<code>Disconnect</code>，断开连接。然后再打开该菜单，选择<code>Connect</code>，即可连接上网。 </p>
</li>
</ol>
<h2 id="终端配置"><a href="#终端配置" class="headerlink" title="终端配置"></a>终端配置</h2><h3 id="打开Terminal，配置静态ip"><a href="#打开Terminal，配置静态ip" class="headerlink" title="打开Terminal，配置静态ip"></a>打开Terminal，配置静态ip</h3><blockquote>
<p>sudo vi  /etc/network/interfaces</p>
</blockquote>
<p>内容改为如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">auto lo </div><div class="line">iface lo inet loopback</div><div class="line"></div><div class="line">auto ens33 </div><div class="line">iface ens33 inet static </div><div class="line">address 192.168.8.100 </div><div class="line">netmask 255.255.255.0 </div><div class="line">gateway 192.168.8.2</div></pre></td></tr></table></figure></p>
<p>这边说明一下，ubuntu15开始，网卡名<code>eth0</code>改成了<code>ens33</code>。</p>
<h3 id="配置dns"><a href="#配置dns" class="headerlink" title="配置dns"></a>配置dns</h3><blockquote>
<p>sudo vi /etc/resolv.conf</p>
</blockquote>
<p>在里面填入DNS，比如阿里的dns：223.5.5.5<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nameserver 223.5.5.5</div></pre></td></tr></table></figure></p>
<p>设置完毕。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>有的网上说要执行<code>sudo /etc/init.d/networking restart</code>重启网络。<br>但是我们之前vmware设置选择自定义的nat模式，所以执行以上命令会出错，只要vmware改为<code>桥接模式直接连接物理网络</code>，勾选<code>复制物理网络连接状态</code>，在执行就可以。</p>
<p>但是这样会导致虚拟机连不到网络，所以我最后又将连接模式改为自定义NAT模式，发现这时候，主机可以ssh连接本地虚拟机了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;照着网上的方法试了，总有几个步骤不对，反复试了几次，终于成功了，做下笔记。&lt;/p&gt;
&lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;p&gt;我是win7系统（这个无所谓），本地VMWare装了Ubuntu 16.04 LTS  64位虚拟机。想在win7用xshell操作本地虚拟机。&lt;/p&gt;
&lt;h1 id=&quot;设置方法&quot;&gt;&lt;a href=&quot;#设置方法&quot; class=&quot;headerlink&quot; title=&quot;设置方法&quot;&gt;&lt;/a&gt;设置方法&lt;/h1&gt;&lt;h2 id=&quot;配置VMware网络环境&quot;&gt;&lt;a href=&quot;#配置VMware网络环境&quot; class=&quot;headerlink&quot; title=&quot;配置VMware网络环境&quot;&gt;&lt;/a&gt;配置VMware网络环境&lt;/h2&gt;&lt;p&gt;VMware在默认安装完成之后，会创建三个虚拟的网络环境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VMnet0 ：桥接网络&lt;/li&gt;
&lt;li&gt;VMnet1 ：Host-only&lt;/li&gt;
&lt;li&gt;VMnet8 ：NAT&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中，NAT表示VMWware内安装的Ubuntu将会在一个子网中，VMware通过网络地址转换，通过物理机的IP上网。&lt;br&gt;我们选择NAT方式实现Ubuntu的静态IP地址配置。&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://peijie-sh.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://peijie-sh.github.io/tags/Linux/"/>
    
      <category term="Ubuntu" scheme="http://peijie-sh.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Redis入门</title>
    <link href="http://peijie-sh.github.io/2016/11/11/Redis%E5%85%A5%E9%97%A8/"/>
    <id>http://peijie-sh.github.io/2016/11/11/Redis入门/</id>
    <published>2016-11-11T06:27:34.000Z</published>
    <updated>2017-03-04T12:49:08.005Z</updated>
    
    <content type="html"><![CDATA[<p>redis官方不支持windows系统，所以我将redis装在linux下。<br>我用的Ubuntu 16 64位系统。</p>
<h1 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h1><blockquote>
<p>sudo apt-get install redis-server</p>
</blockquote>
<p>非常方便，一句话搞定。</p>
<h1 id="配置Redis"><a href="#配置Redis" class="headerlink" title="配置Redis"></a>配置Redis</h1><p>由于要远程连接Redis，所以要修改Redis的默认配置文件。<br>修改<code>/etc/redis/redis.conf</code>，把<code>bind 127.0.0.1</code>注释掉即可</p>
<blockquote>
<h1 id="bind-127-0-0-1"><a href="#bind-127-0-0-1" class="headerlink" title="bind 127.0.0.1"></a>bind 127.0.0.1</h1></blockquote>
<h1 id="启动和关闭Redis服务"><a href="#启动和关闭Redis服务" class="headerlink" title="启动和关闭Redis服务"></a>启动和关闭Redis服务</h1><p>如果是用<code>apt-get</code>或者<code>yum install</code>安装的redis，可以直接通过下面的命令停止/启动/重启：</p>
<blockquote>
<p>/etc/init.d/redis-server stop<br>/etc/init.d/redis-server start<br>/etc/init.d/redis-server restart</p>
</blockquote>
<a id="more"></a>
<p>如果是通过源码安装的redis，则可以通过redis的客户端程序<code>redis-cli</code>的<code>shutdown</code>命令来重启redis：</p>
<blockquote>
<p>redis-cli -h 127.0.0.1 -p 6379 shutdown</p>
</blockquote>
<p>如果上述方式都没有成功停止redis，则可以使用终极武器 <code>kill -9</code>直接杀进程。</p>
<h1 id="Redis数据类型"><a href="#Redis数据类型" class="headerlink" title="Redis数据类型"></a>Redis数据类型</h1><p>redis有5种数据类型：</p>
<ul>
<li><code>string</code>（字符串）</li>
<li><code>hash</code>（哈希）</li>
<li><code>list</code>（列表）</li>
<li><code>set</code>（集合）</li>
<li><code>zset</code>(sorted set：有序集合)</li>
</ul>
<h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><p>string是redis最基本的类型，你可以理解成与Memcached一模一样的类型，一个key对应一个value。<br>string类型是二进制安全的。意思是redis的string可以包含任何数据。比如jpg图片或者序列化的对象 。<br>string类型是Redis最基本的数据类型，一个键最大能存储512MB。</p>
<h2 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h2><p>Redis hash 是一个键值对集合。<br>Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。</p>
<h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><p>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。</p>
<h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><p>Redis的Set是string类型的无序集合。<br>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。</p>
<h2 id="zset"><a href="#zset" class="headerlink" title="zset"></a>zset</h2><p>Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。<br>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。<br>zset的成员是唯一的,但分数(score)却可以重复。</p>
<h1 id="Java操作Redis"><a href="#Java操作Redis" class="headerlink" title="Java操作Redis"></a>Java操作Redis</h1><h2 id="引入redis驱动包"><a href="#引入redis驱动包" class="headerlink" title="引入redis驱动包"></a>引入redis驱动包</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="创建连接"><a href="#创建连接" class="headerlink" title="创建连接"></a>创建连接</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"192.168.1.185"</span>);</div><div class="line">System.out.println(<span class="string">"Connection to server sucessfully"</span>);</div><div class="line"><span class="comment">//查看服务是否运行</span></div><div class="line">System.out.println(<span class="string">"Server is running: "</span> + jedis.ping());</div></pre></td></tr></table></figure>
<p>看到如下输出，说明连接成功</p>
<blockquote>
<p>Connection to server sucessfully<br>Server is running: PONG</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;redis官方不支持windows系统，所以我将redis装在linux下。&lt;br&gt;我用的Ubuntu 16 64位系统。&lt;/p&gt;
&lt;h1 id=&quot;安装Redis&quot;&gt;&lt;a href=&quot;#安装Redis&quot; class=&quot;headerlink&quot; title=&quot;安装Redis&quot;&gt;&lt;/a&gt;安装Redis&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;sudo apt-get install redis-server&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;非常方便，一句话搞定。&lt;/p&gt;
&lt;h1 id=&quot;配置Redis&quot;&gt;&lt;a href=&quot;#配置Redis&quot; class=&quot;headerlink&quot; title=&quot;配置Redis&quot;&gt;&lt;/a&gt;配置Redis&lt;/h1&gt;&lt;p&gt;由于要远程连接Redis，所以要修改Redis的默认配置文件。&lt;br&gt;修改&lt;code&gt;/etc/redis/redis.conf&lt;/code&gt;，把&lt;code&gt;bind 127.0.0.1&lt;/code&gt;注释掉即可&lt;/p&gt;
&lt;blockquote&gt;
&lt;h1 id=&quot;bind-127-0-0-1&quot;&gt;&lt;a href=&quot;#bind-127-0-0-1&quot; class=&quot;headerlink&quot; title=&quot;bind 127.0.0.1&quot;&gt;&lt;/a&gt;bind 127.0.0.1&lt;/h1&gt;&lt;/blockquote&gt;
&lt;h1 id=&quot;启动和关闭Redis服务&quot;&gt;&lt;a href=&quot;#启动和关闭Redis服务&quot; class=&quot;headerlink&quot; title=&quot;启动和关闭Redis服务&quot;&gt;&lt;/a&gt;启动和关闭Redis服务&lt;/h1&gt;&lt;p&gt;如果是用&lt;code&gt;apt-get&lt;/code&gt;或者&lt;code&gt;yum install&lt;/code&gt;安装的redis，可以直接通过下面的命令停止/启动/重启：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;/etc/init.d/redis-server stop&lt;br&gt;/etc/init.d/redis-server start&lt;br&gt;/etc/init.d/redis-server restart&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="NoSQL" scheme="http://peijie-sh.github.io/categories/NoSQL/"/>
    
    
      <category term="Linux" scheme="http://peijie-sh.github.io/tags/Linux/"/>
    
      <category term="Redis" scheme="http://peijie-sh.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>HTTP协议学习笔记</title>
    <link href="http://peijie-sh.github.io/2016/11/08/HTTP%E5%8D%8F%E8%AE%AE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://peijie-sh.github.io/2016/11/08/HTTP协议学习笔记/</id>
    <published>2016-11-08T07:05:34.000Z</published>
    <updated>2017-03-04T12:49:08.001Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTTP基本概念"><a href="#HTTP基本概念" class="headerlink" title="HTTP基本概念"></a>HTTP基本概念</h1><ul>
<li>HTTP是Hyper Text Transfer Protocol（超文本传输协议）的缩写。</li>
<li>HTTP是一个应用层协议，由请求和响应构成，是一个标准的客户端服务器模型。</li>
<li>HTTP是一个无状态的协议。</li>
</ul>
<h1 id="在TCP-IP协议栈中的位置"><a href="#在TCP-IP协议栈中的位置" class="headerlink" title="在TCP/IP协议栈中的位置"></a>在TCP/IP协议栈中的位置</h1><p>HTTP协议通常承载于TCP协议之上，有时也承载于TLS或SSL协议层之上，这个时候，就成了我们常说的HTTPS。如下图所示：<br><img src="http://img.blog.csdn.net/20161108133850318" alt="这里写图片描述"><br><a id="more"></a><br><strong>默认HTTP的端口号为80，HTTPS的端口号为443。</strong></p>
<h1 id="HTTP的请求响应模型"><a href="#HTTP的请求响应模型" class="headerlink" title="HTTP的请求响应模型"></a>HTTP的请求响应模型</h1><p>HTTP协议永远都是客户端发起请求，服务器回送响应。见下图：<br><img src="http://img.blog.csdn.net/20161108134113119" alt="这里写图片描述"></p>
<p>这样就限制了使用HTTP协议，无法实现在客户端没有发起请求的时候，服务器将消息推送给客户端。HTML5定义了WebSocket协议，它实现了浏览器与服务器全双工通信(full-duplex)，可以借助它实现服务器向客户端推送消息。</p>
<h1 id="HTTP工作流程"><a href="#HTTP工作流程" class="headerlink" title="HTTP工作流程"></a>HTTP工作流程</h1><p>一次HTTP操作称为一个事务，其工作过程可分为四步：</p>
<ol>
<li>首先客户机与服务器需要建立连接。只要单击某个超级链接，HTTP的工作开始。</li>
<li>建立连接后，客户机发送一个请求给服务器，请求方式的格式为：统一资源标识符（URL）、协议版本号，后边是MIME信息包括请求修饰符、客户机信息和可能的内容。</li>
<li>服务器接到请求后，给予相应的响应信息，其格式为一个状态行，包括信息的协议版本号、一个成功或错误的代码，后边是MIME信息包括服务器信息、实体信息和可能的内容。</li>
<li>客户端接收服务器所返回的信息通过浏览器显示在用户的显示屏上，然后客户机与服务器断开连接。<br>如果在以上过程中的某一步出现错误，那么产生错误的信息将返回到客户端，有显示屏输出。对于用户来说，这些过程是由HTTP自己完成的，用户只要用鼠标点击，等待信息显示就可以了。</li>
</ol>
<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>HTTP支持几种不同的的请求命令，成为 HTTP方法。每一个请求报文中都包含一个方法，告诉服务器执行什么动作。</p>
<table>
<thead>
<tr>
<th style="text-align:left">常见http方法</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">GET</td>
<td style="text-align:left">向特定的资源发出请求，获取指定资源</td>
</tr>
<tr>
<td style="text-align:left">POST</td>
<td style="text-align:left">发送客户端数据到服务器（如表单提交）</td>
</tr>
<tr>
<td style="text-align:left">DELETE</td>
<td style="text-align:left">从服务器删除指定资源</td>
</tr>
<tr>
<td style="text-align:left">PUT</td>
<td style="text-align:left">向服务器指定资源上传最新数据（完整替换数据）</td>
</tr>
<tr>
<td style="text-align:left">PATCH</td>
<td style="text-align:left">向服务器指定资源上传最新数据（局部更新数据）</td>
</tr>
</tbody>
</table>
<p>此外，还有<code>head</code>，<code>trace</code>，<code>options</code>等。</p>
<h1 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h1><p>当服务器收到请求，返回的响应报文中会带有一个3位数字的状态码，告诉客户端请求是否成功。状态码分5类：</p>
<table>
<thead>
<tr>
<th style="text-align:center">整体范围</th>
<th style="text-align:center">已定义范围</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">100-199</td>
<td style="text-align:center">100-101</td>
<td style="text-align:center">信息提示</td>
</tr>
<tr>
<td style="text-align:center">200-299</td>
<td style="text-align:center">200-206</td>
<td style="text-align:center">成功</td>
</tr>
<tr>
<td style="text-align:center">300-399</td>
<td style="text-align:center">300-305</td>
<td style="text-align:center">重定向</td>
</tr>
<tr>
<td style="text-align:center">400-499</td>
<td style="text-align:center">400-415</td>
<td style="text-align:center">客户端错误</td>
</tr>
<tr>
<td style="text-align:center">500-599</td>
<td style="text-align:center">500-505</td>
<td style="text-align:center">服务器错误</td>
</tr>
</tbody>
</table>
<p>常见的状态：<code>200</code>表示成功； <code>302</code>表示重定向；<code>404</code>表示找不到资源。</p>
<h1 id="HTTP报文"><a href="#HTTP报文" class="headerlink" title="HTTP报文"></a>HTTP报文</h1><h2 id="报文格式"><a href="#报文格式" class="headerlink" title="报文格式"></a>报文格式</h2><p>报文是具有固定格式的数据块，由3部分组成：</p>
<ul>
<li>对报文进行描述的起始行（start line）</li>
<li>包含属性的首部块（header）</li>
<li>可选的，包含数据的主体部分（body）</li>
</ul>
<p>请求报文格式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;method&gt; &lt;request-URL&gt; &lt;version&gt;</div><div class="line">&lt;headers&gt;</div><div class="line"></div><div class="line">&lt;entity-body&gt;</div></pre></td></tr></table></figure></p>
<p>响应报文格式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;version&gt; &lt;status&gt; &lt;reason-phrase&gt;</div><div class="line">&lt;headers&gt;</div><div class="line"></div><div class="line">&lt;entity-body&gt;</div></pre></td></tr></table></figure></p>
<p>只有起始行不同，主体是可选的。下图是一个报文例子：<br><img src="http://img.blog.csdn.net/20161108144346350" alt="这里写图片描述"></p>
<h2 id="Content-Type-字段"><a href="#Content-Type-字段" class="headerlink" title="Content-Type 字段"></a>Content-Type 字段</h2><p>头信息必须是 ASCII 码，后面的数据可以是任何格式。因此，服务器回应的时候，必须告诉客户端，数据是什么格式，所以有了<code>Content-Type</code>这个字段。<br>常见的类型:</p>
<ul>
<li>text/plain</li>
<li>text/html</li>
<li>text/css</li>
<li>image/jpeg</li>
<li>image/png</li>
<li>video/mp4</li>
<li>audio/mp4</li>
<li>application/javascript</li>
<li>application/json</li>
</ul>
<p>这些数据类型总称为<code>MIME type</code>，每个值包括一级类型和二级类型，之间用斜杠分隔。<br>除了预定义的类型，厂商也可以自定义类型：</p>
<blockquote>
<p>application/vnd.debian.binary-package</p>
</blockquote>
<p>上面的类型表明，发送的是Debian系统的二进制数据包。<br>MIME type还可以在尾部使用分号，添加参数。</p>
<blockquote>
<p>Content-Type: text/html; charset=utf-8</p>
</blockquote>
<p>上面的类型表明，发送的是网页，而且编码是UTF-8。<br>客户端请求的时候，可以使用Accept字段声明自己可以接受哪些数据格式。</p>
<blockquote>
<p>Accept: <em>/</em></p>
</blockquote>
<p>上面代码中，客户端声明自己可以接受任何格式的数据。<br>MIME type不仅用在HTTP协议，还可以用在其他地方，比如HTML网页。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;</div><div class="line">&lt;!-- 等同于 --&gt;</div><div class="line">&lt;meta charset=&quot;utf-8&quot; /&gt;</div></pre></td></tr></table></figure></p>
<h2 id="Content-Encoding-字段"><a href="#Content-Encoding-字段" class="headerlink" title="Content-Encoding 字段"></a>Content-Encoding 字段</h2><p>由于发送的数据可以是任何格式，因此可以把数据压缩后再发送。Content-Encoding字段说明数据的压缩方法。</p>
<ul>
<li>Content-Encoding: gzip</li>
<li>Content-Encoding: compress</li>
<li>Content-Encoding: deflate</li>
</ul>
<p>客户端在请求时，用Accept-Encoding字段说明自己可以接受哪些压缩方法。</p>
<blockquote>
<p>Accept-Encoding: gzip, deflate</p>
</blockquote>
<p>参考资料：<br>《HTTP权威指南》<br><a href="http://www.ruanyifeng.com/blog/2016/08/http.html" target="_blank" rel="external">阮一峰-http入门</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HTTP基本概念&quot;&gt;&lt;a href=&quot;#HTTP基本概念&quot; class=&quot;headerlink&quot; title=&quot;HTTP基本概念&quot;&gt;&lt;/a&gt;HTTP基本概念&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;HTTP是Hyper Text Transfer Protocol（超文本传输协议）的缩写。&lt;/li&gt;
&lt;li&gt;HTTP是一个应用层协议，由请求和响应构成，是一个标准的客户端服务器模型。&lt;/li&gt;
&lt;li&gt;HTTP是一个无状态的协议。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;在TCP-IP协议栈中的位置&quot;&gt;&lt;a href=&quot;#在TCP-IP协议栈中的位置&quot; class=&quot;headerlink&quot; title=&quot;在TCP/IP协议栈中的位置&quot;&gt;&lt;/a&gt;在TCP/IP协议栈中的位置&lt;/h1&gt;&lt;p&gt;HTTP协议通常承载于TCP协议之上，有时也承载于TLS或SSL协议层之上，这个时候，就成了我们常说的HTTPS。如下图所示：&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20161108133850318&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="工具杂谈" scheme="http://peijie-sh.github.io/categories/%E5%B7%A5%E5%85%B7%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="Http" scheme="http://peijie-sh.github.io/tags/Http/"/>
    
  </entry>
  
  <entry>
    <title>使用Hexo搭建个人博客</title>
    <link href="http://peijie-sh.github.io/2016/10/27/%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://peijie-sh.github.io/2016/10/27/使用Hexo搭建个人博客/</id>
    <published>2016-10-27T08:39:34.000Z</published>
    <updated>2017-03-04T12:49:08.007Z</updated>
    
    <content type="html"><![CDATA[<p>最近闲着没事，用<code>hexo</code>搭建了一个个人博客，部署在 <a href="https://peijie-sh.github.io/">github</a> 和 <a href="https://peijie-sh.github.io/">oschina</a>上，欢迎大家来我博客踩踩~ ^_^<br>下面总结一下搭建过程：</p>
<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>hexo是一个简单地、轻量地、基于Node的一个静态博客框架，可以方便的生成静态网页托管在github和Heroku上<br>引用Hexo作者 @tommy351 的话：</p>
<blockquote>
<p>快速、简单且功能强大的 Node.js 博客框架。A fast, simple &amp; powerful blog framework, powered by Node.js.</p>
</blockquote>
<p>所以，第一步，就是下载node的安装包并安装，附上<a href="https://nodejs.org/en/download/" target="_blank" rel="external">node下载地址</a>。<br>安装好node，会默认一起安装好npm包管理器，这可是一个神器啊。<br>可以打开终端cmd，执行一下命令确认安装完毕。</p>
<blockquote>
<p>node -v<br>npm -version</p>
</blockquote>
<p>另外一个，就是git了。git也没什么好说的，官网下载，选择自己操作系统的版本，一路next就装好了。<br><a id="more"></a></p>
<h1 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h1><p>在<code>git</code>终端或者<code>cmd</code>执行安装<code>hexo</code></p>
<blockquote>
<p>npm install hexo-cli -g</p>
</blockquote>
<p>以windows系统为例，在你想要安装的盘新建一个目录，比如<code>d:/blog</code>,在此目录下右键打开<code>git</code>的终端(就是<code>Git Bash Here</code>),然后执行</p>
<blockquote>
<p>hexo init</p>
</blockquote>
<p>初始化博客目录，然后执行</p>
<blockquote>
<p>npm install</p>
</blockquote>
<p>会下载需要的库。之后执行</p>
<blockquote>
<p>hexo server</p>
</blockquote>
<p>简便语法：<code>hexo s</code><br>启动本地服务器，在浏览器打开<code>localhost:4000</code>就可以看到效果了。<br>关闭本地服务：<code>ctrl + c</code><br>有不明白可以看<a href="https://hexo.io/" target="_blank" rel="external">hexo官网</a>,官网讲的很详细了。</p>
<h1 id="创建Github仓库"><a href="#创建Github仓库" class="headerlink" title="创建Github仓库"></a>创建Github仓库</h1><p>本地博客搭建完，只要部署在github上就ok啦。</p>
<ul>
<li>登录github，没有的自己注册。</li>
<li>创建一个Repository，名字必须为【你的用户名.github.io】。</li>
</ul>
<h1 id="配置博客部署信息"><a href="#配置博客部署信息" class="headerlink" title="配置博客部署信息"></a>配置博客部署信息</h1><p>博客的根目录<code>d:/blog</code>下有一个配置文件<code>_config.yml</code>，这里可以配置你的github的地址等信息，配置完，执行</p>
<blockquote>
<p>hexo g</p>
</blockquote>
<p>生成静态文件，然后</p>
<blockquote>
<p>hexo d</p>
</blockquote>
<p>就部署到github上了，然后在浏览器打开 【你的用户名.github.io】就可以了。</p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>这个过程你会遇到许多问题，这边放上几篇参考，可以解决你的困惑。</p>
<ul>
<li><a href="http://www.jianshu.com/p/465830080ea9" target="_blank" rel="external">http://www.jianshu.com/p/465830080ea9</a></li>
<li><a href="http://www.tuicool.com/articles/ueI7naV" target="_blank" rel="external">http://www.tuicool.com/articles/ueI7naV</a></li>
<li>这些不能解决你的问题，请自行google</li>
</ul>
<h1 id="DIY博客"><a href="#DIY博客" class="headerlink" title="DIY博客"></a>DIY博客</h1><p><code>hexo</code>默认主题是<code>landscape</code>，不喜欢，可以自己替换主题，这当然需要自己配置许多东西，我用的是<code>NexT</code>主题，放上一点参考吧<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">NexT官网</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近闲着没事，用&lt;code&gt;hexo&lt;/code&gt;搭建了一个个人博客，部署在 &lt;a href=&quot;https://peijie-sh.github.io/&quot;&gt;github&lt;/a&gt; 和 &lt;a href=&quot;https://peijie-sh.github.io/&quot;&gt;oschina&lt;/a&gt;上，欢迎大家来我博客踩踩~ ^_^&lt;br&gt;下面总结一下搭建过程：&lt;/p&gt;
&lt;h1 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h1&gt;&lt;p&gt;hexo是一个简单地、轻量地、基于Node的一个静态博客框架，可以方便的生成静态网页托管在github和Heroku上&lt;br&gt;引用Hexo作者 @tommy351 的话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;快速、简单且功能强大的 Node.js 博客框架。A fast, simple &amp;amp; powerful blog framework, powered by Node.js.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以，第一步，就是下载node的安装包并安装，附上&lt;a href=&quot;https://nodejs.org/en/download/&quot;&gt;node下载地址&lt;/a&gt;。&lt;br&gt;安装好node，会默认一起安装好npm包管理器，这可是一个神器啊。&lt;br&gt;可以打开终端cmd，执行一下命令确认安装完毕。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;node -v&lt;br&gt;npm -version&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;另外一个，就是git了。git也没什么好说的，官网下载，选择自己操作系统的版本，一路next就装好了。&lt;br&gt;
    
    </summary>
    
      <category term="Web前端" scheme="http://peijie-sh.github.io/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Hexo" scheme="http://peijie-sh.github.io/tags/Hexo/"/>
    
      <category term="Node.Js" scheme="http://peijie-sh.github.io/tags/Node-Js/"/>
    
      <category term="Git" scheme="http://peijie-sh.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>OkHttp的基本使用——替代Apache HttpClient</title>
    <link href="http://peijie-sh.github.io/2016/10/26/OkHttp%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94%E6%9B%BF%E4%BB%A3Apache%20HttpClient/"/>
    <id>http://peijie-sh.github.io/2016/10/26/OkHttp的基本使用——替代Apache HttpClient/</id>
    <published>2016-10-26T04:27:34.000Z</published>
    <updated>2017-03-04T12:49:08.004Z</updated>
    
    <content type="html"><![CDATA[<p>http是现在主流应用使用的网络请求方式, 用来交换数据和内容, 有效的使用HTTP可以使你的APP 变的更快和减少流量的使用。</p>
<p>OkHttp 是一个很棒HTTP客户端:</p>
<ul>
<li>支持SPDY, 可以合并多个到同一个主机的请求</li>
<li>使用连接池技术减少请求的延迟(如果SPDY是可用的话)</li>
<li>使用GZIP压缩减少传输的数据量</li>
<li>缓存响应避免重复的网络请求</li>
</ul>
<p>OkHttp可以替换Apache的HttpClient<br>OkHttp支持2.3和以上版本，对于java，需要jdk1.7 ，OkHttp需要依赖Okio包</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><p>下面上demo</p>
<h2 id="使用get方式请求，获取响应"><a href="#使用get方式请求，获取响应" class="headerlink" title="使用get方式请求，获取响应"></a>使用get方式请求，获取响应</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> okhttp3.OkHttpClient;</div><div class="line"><span class="keyword">import</span> okhttp3.Request;</div><div class="line"><span class="keyword">import</span> okhttp3.Response;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetExample</span> </span>&#123;</div><div class="line">  OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</div><div class="line"></div><div class="line">  <span class="function">String <span class="title">run</span><span class="params">(String url)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    Request request = <span class="keyword">new</span> Request.Builder()</div><div class="line">        .url(url)</div><div class="line">        .build();</div><div class="line"></div><div class="line">    <span class="keyword">try</span> (Response response = client.newCall(request).execute()) &#123;</div><div class="line">      <span class="keyword">return</span> response.body().string();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    GetExample example = <span class="keyword">new</span> GetExample();</div><div class="line">    String response = example.run(<span class="string">"https://raw.github.com/square/okhttp/master/README.md"</span>);</div><div class="line">    System.out.println(response);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用post向服务器发送请求"><a href="#使用post向服务器发送请求" class="headerlink" title="使用post向服务器发送请求"></a>使用post向服务器发送请求</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> okhttp3.MediaType;</div><div class="line"><span class="keyword">import</span> okhttp3.OkHttpClient;</div><div class="line"><span class="keyword">import</span> okhttp3.Request;</div><div class="line"><span class="keyword">import</span> okhttp3.RequestBody;</div><div class="line"><span class="keyword">import</span> okhttp3.Response;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PostExample</span> </span>&#123;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> MediaType JSON</div><div class="line">      = MediaType.parse(<span class="string">"application/json; charset=utf-8"</span>);</div><div class="line"></div><div class="line">  OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</div><div class="line"></div><div class="line">  <span class="function">String <span class="title">post</span><span class="params">(String url, String json)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    RequestBody body = RequestBody.create(JSON, json);</div><div class="line">    Request request = <span class="keyword">new</span> Request.Builder()</div><div class="line">        .url(url)</div><div class="line">        .post(body)</div><div class="line">        .build();</div><div class="line">    <span class="keyword">try</span> (Response response = client.newCall(request).execute()) &#123;</div><div class="line">      <span class="keyword">return</span> response.body().string();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function">String <span class="title">bowlingJson</span><span class="params">(String player1, String player2)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"&#123;'winCondition':'HIGH_SCORE',"</span></div><div class="line">        + <span class="string">"'name':'Bowling',"</span></div><div class="line">        + <span class="string">"'round':4,"</span></div><div class="line">        + <span class="string">"'lastSaved':1367702411696,"</span></div><div class="line">        + <span class="string">"'dateStarted':1367702378785,"</span></div><div class="line">        + <span class="string">"'players':["</span></div><div class="line">        + <span class="string">"&#123;'name':'"</span> + player1 + <span class="string">"','history':[10,8,6,7,8],'color':-13388315,'total':39&#125;,"</span></div><div class="line">        + <span class="string">"&#123;'name':'"</span> + player2 + <span class="string">"','history':[6,10,5,10,10],'color':-48060,'total':41&#125;"</span></div><div class="line">        + <span class="string">"]&#125;"</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    PostExample example = <span class="keyword">new</span> PostExample();</div><div class="line">    String json = example.bowlingJson(<span class="string">"Jesse"</span>, <span class="string">"Jake"</span>);</div><div class="line">    String response = example.post(<span class="string">"http://www.roundsapp.com/post"</span>, json);</div><div class="line">    System.out.println(response);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;http是现在主流应用使用的网络请求方式, 用来交换数据和内容, 有效的使用HTTP可以使你的APP 变的更快和减少流量的使用。&lt;/p&gt;
&lt;p&gt;OkHttp 是一个很棒HTTP客户端:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持SPDY, 可以合并多个到同一个主机的请求&lt;/li&gt;
&lt;li&gt;使用连接池技术减少请求的延迟(如果SPDY是可用的话)&lt;/li&gt;
&lt;li&gt;使用GZIP压缩减少传输的数据量&lt;/li&gt;
&lt;li&gt;缓存响应避免重复的网络请求&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OkHttp可以替换Apache的HttpClient&lt;br&gt;OkHttp支持2.3和以上版本，对于java，需要jdk1.7 ，OkHttp需要依赖Okio包&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="工具杂谈" scheme="http://peijie-sh.github.io/categories/%E5%B7%A5%E5%85%B7%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="Http" scheme="http://peijie-sh.github.io/tags/Http/"/>
    
      <category term="OkHttp" scheme="http://peijie-sh.github.io/tags/OkHttp/"/>
    
  </entry>
  
  <entry>
    <title>VIM编辑器的基本使用</title>
    <link href="http://peijie-sh.github.io/2016/10/26/VIM%E7%BC%96%E8%BE%91%E5%99%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>http://peijie-sh.github.io/2016/10/26/VIM编辑器的基本使用/</id>
    <published>2016-10-26T04:27:34.000Z</published>
    <updated>2017-03-04T12:49:08.006Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VIM的运行模式"><a href="#VIM的运行模式" class="headerlink" title="VIM的运行模式"></a>VIM的运行模式</h1><ul>
<li>编辑模式：等待编辑命令输入</li>
<li>插入模式：编辑模式下，输入 i 进入插入模式，插入文本信息，<code>esc</code>退出</li>
<li>命令模式：在编辑模式下，输入 “：” 进行命令模式</li>
</ul>
<h1 id="VIM-常用命令"><a href="#VIM-常用命令" class="headerlink" title="VIM 常用命令"></a>VIM 常用命令</h1><ul>
<li>：q 直接退出vi</li>
<li>：wq保存后退出vi ，并可以新建文件</li>
<li>：q! 强制退出</li>
<li>：w file 将当前内容保存成某个文件</li>
<li>：set number 在编辑文件显示行号</li>
<li>：set nonumber  在编辑文件不显示行号</li>
</ul>
<a id="more"></a>
<h1 id="VIM命令大全"><a href="#VIM命令大全" class="headerlink" title="VIM命令大全"></a>VIM命令大全</h1><p><img src="http://img.blog.csdn.net/20161115114043493" alt="这里写图片描述"></p>
<h2 id="进入vi的命令"><a href="#进入vi的命令" class="headerlink" title="进入vi的命令"></a>进入vi的命令</h2><ul>
<li>vi filename :打开或新建文件，并将光标置于第一行首</li>
<li>vi +n filename ：打开文件，并将光标置于第n行首</li>
<li>vi + filename ：打开文件，并将光标置于最后一行首</li>
<li>vi +/pattern filename：打开文件，并将光标置于第一个与pattern匹配的串处</li>
<li>vi -r filename ：在上次正用vi编辑时发生系统崩溃，恢复filename</li>
<li>vi filename….filename ：打开多个文件，依次进行编辑</li>
</ul>
<h2 id="移动光标类命令"><a href="#移动光标类命令" class="headerlink" title="移动光标类命令"></a>移动光标类命令</h2><ul>
<li>h ：光标左移一个字符</li>
<li>l ：光标右移一个字符</li>
<li>space：光标右移一个字符</li>
<li>Backspace：光标左移一个字符</li>
<li>k或Ctrl+p：光标上移一行</li>
<li>j或Ctrl+n ：光标下移一行 </li>
<li>Enter ：光标下移一行</li>
<li>w或W ：光标右移一个字至字首 </li>
<li>b或B ：光标左移一个字至字首 </li>
<li>e或E ：光标右移一个字至字尾 </li>
<li>) ：光标移至句尾 </li>
<li>( ：光标移至句首 </li>
<li>}：光标移至段落开头 </li>
<li>{：光标移至段落结尾 </li>
<li>nG：光标移至第n行首</li>
<li>n+：光标下移n行</li>
<li>n-：光标上移n行</li>
<li>n$：光标移至第n行尾</li>
<li>H ：光标移至屏幕顶行</li>
<li>M ：光标移至屏幕中间行</li>
<li>L ：光标移至屏幕最后行</li>
<li>0：（注意是数字零）光标移至当前行首</li>
<li>$：光标移至当前行尾 </li>
</ul>
<h2 id="屏幕翻滚类命令"><a href="#屏幕翻滚类命令" class="headerlink" title="屏幕翻滚类命令"></a>屏幕翻滚类命令</h2><ul>
<li>Ctrl+u：向文件首翻半屏</li>
<li>Ctrl+d：向文件尾翻半屏</li>
<li>Ctrl+f：向文件尾翻一屏</li>
<li>Ctrl＋b；向文件首翻一屏</li>
<li>nz：将第n行滚至屏幕顶部，不指定n时将当前行滚至屏幕顶部。</li>
</ul>
<h2 id="插入文本类命令"><a href="#插入文本类命令" class="headerlink" title="插入文本类命令"></a>插入文本类命令</h2><ul>
<li>i ：在光标前 </li>
<li>I ：在当前行首 </li>
<li>a：光标后 </li>
<li>A：在当前行尾 </li>
<li>o：在当前行之下新开一行</li>
<li>O：在当前行之上新开一行</li>
<li>r：替换当前字符 </li>
<li>R：替换当前字符及其后的字符，直至按ESC键</li>
<li>s：从当前光标位置处开始，以输入的文本替代指定数目的字符</li>
<li>S：删除指定数目的行，并以所输入文本代替之</li>
<li>ncw或nCW：修改指定数目的字</li>
<li>nCC：修改指定数目的行</li>
</ul>
<h2 id="删除命令"><a href="#删除命令" class="headerlink" title="删除命令"></a>删除命令</h2><ul>
<li>ndw或ndW：删除光标处开始及其后的n-1个字</li>
<li>do：删至行首 </li>
<li>d$：删至行尾 </li>
<li>ndd：删除当前行及其后n-1行</li>
<li>x或X：删除一个字符，x删除光标后的，而X删除光标前的</li>
<li>Ctrl+u：删除输入方式下所输入的文本</li>
</ul>
<h2 id="搜索及替换命令"><a href="#搜索及替换命令" class="headerlink" title="搜索及替换命令"></a>搜索及替换命令</h2><ul>
<li>/pattern：从光标开始处向文件尾搜索pattern</li>
<li>?pattern：从光标开始处向文件首搜索pattern</li>
<li>n：在同一方向重复上一次搜索命令</li>
<li>N：在反方向上重复上一次搜索命令</li>
<li>：s/p1/p2/g：将当前行中所有p1均用p2替代</li>
<li>：n1,n2s/p1/p2/g：将第n1至n2行中所有p1均用p2替代</li>
<li>：g/p1/s//p2/g：将文件中所有p1均用p2替换</li>
</ul>
<h2 id="选项设置"><a href="#选项设置" class="headerlink" title="选项设置"></a>选项设置</h2><ul>
<li>all：列出所有选项设置情况</li>
<li>term：设置终端类型</li>
<li>ignorance：在搜索中忽略大小写</li>
<li>list：显示制表位(Ctrl+I)和行尾标志（$)</li>
<li>number：显示行号</li>
<li>report：显示由面向行的命令修改过的数目</li>
<li>terse：显示简短的警告信息</li>
<li>warn：在转到别的文件时若没保存当前文件则显示NO write信息</li>
<li>nomagic：允许在搜索模式中，使用前面不带“\”的特殊字符</li>
<li>nowrapscan：禁止vi在搜索到达文件两端时，又从另一端开始</li>
<li>mesg：允许vi显示其他用户用write写到自己终端上的信息</li>
</ul>
<h2 id="最后行方式命令"><a href="#最后行方式命令" class="headerlink" title="最后行方式命令"></a>最后行方式命令</h2><ul>
<li>：n1,n2 co n3：将n1行到n2行之间的内容拷贝到第n3行下</li>
<li>：n1,n2 m n3：将n1行到n2行之间的内容移至到第n3行下</li>
<li>：n1,n2 d ：将n1行到n2行之间的内容删除</li>
<li>：w ：保存当前文件</li>
<li>：e filename：打开文件filename进行编辑</li>
<li>：x：保存当前文件并退出</li>
<li>：q：退出vi</li>
<li>：q!：不保存文件并退出vi</li>
<li>：!command：执行shell命令command</li>
<li>：n1,n2 w!command：将文件中n1行至n2行的内容作为command的输入并执行之，若不指定n1，n2，则表示将整个文件内容作为command的输入</li>
<li>：r!command：将命令command的输出结果放到当前行</li>
</ul>
<hr>
<p><a href="http://www.cnblogs.com/mfc-itblog/p/5895395.html" target="_blank" rel="external">更多使用参考</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;VIM的运行模式&quot;&gt;&lt;a href=&quot;#VIM的运行模式&quot; class=&quot;headerlink&quot; title=&quot;VIM的运行模式&quot;&gt;&lt;/a&gt;VIM的运行模式&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;编辑模式：等待编辑命令输入&lt;/li&gt;
&lt;li&gt;插入模式：编辑模式下，输入 i 进入插入模式，插入文本信息，&lt;code&gt;esc&lt;/code&gt;退出&lt;/li&gt;
&lt;li&gt;命令模式：在编辑模式下，输入 “：” 进行命令模式&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;VIM-常用命令&quot;&gt;&lt;a href=&quot;#VIM-常用命令&quot; class=&quot;headerlink&quot; title=&quot;VIM 常用命令&quot;&gt;&lt;/a&gt;VIM 常用命令&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;：q 直接退出vi&lt;/li&gt;
&lt;li&gt;：wq保存后退出vi ，并可以新建文件&lt;/li&gt;
&lt;li&gt;：q! 强制退出&lt;/li&gt;
&lt;li&gt;：w file 将当前内容保存成某个文件&lt;/li&gt;
&lt;li&gt;：set number 在编辑文件显示行号&lt;/li&gt;
&lt;li&gt;：set nonumber  在编辑文件不显示行号&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="工具杂谈" scheme="http://peijie-sh.github.io/categories/%E5%B7%A5%E5%85%B7%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="Linux" scheme="http://peijie-sh.github.io/tags/Linux/"/>
    
      <category term="Vim" scheme="http://peijie-sh.github.io/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>Oracle入门</title>
    <link href="http://peijie-sh.github.io/2016/10/25/Oracle%E5%85%A5%E9%97%A8/"/>
    <id>http://peijie-sh.github.io/2016/10/25/Oracle入门/</id>
    <published>2016-10-25T08:39:31.000Z</published>
    <updated>2017-03-04T12:49:08.004Z</updated>
    
    <content type="html"><![CDATA[<p>今天学习了Oracle的基本使用，做下总结：</p>
<h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><p>以Oracle 11g为例，安装好以后，普通账户都是未解锁的，不能使用，只能使用超级管理员登录。</p>
<blockquote>
<p>sqlplus / as sysdba</p>
</blockquote>
<p>这样就用超级管理员登录了，无需密码。<br>然后解锁普通用户之后，就可以使用使用普通用户了。<br>举例：<br><a id="more"></a></p>
<blockquote>
<p>– – 解锁用户 scott<br>alter user scott account unlock;<br>– – 设置密码为 tiger<br>alter user scott identified by tiger;<br>– – 退出登录<br>exit<br>– – 使用普通用户 scott 登录<br>sqlplus scott/tiger</p>
</blockquote>
<ul>
<li><p>普通用户修改密码，需要验证旧密码，然后根据提示修改即可。</p>
<blockquote>
<p>password</p>
</blockquote>
</li>
<li><p>查询当前用户是谁         </p>
<blockquote>
<p>show user;</p>
</blockquote>
</li>
<li><p>查询scott用户下的所有对象（表），使用tab表，tab表每个用户都有</p>
<blockquote>
<p>select * from tab;</p>
</blockquote>
</li>
<li><p>设置显示的列宽（字符型varchar2、日期型date），10个宽度位，a表示字符型，大小写均可</p>
<blockquote>
<p>column ename format a12;</p>
</blockquote>
</li>
<li><p>设置显示的列宽（数值型number），9表示数字型，一个9表示一个数字位，四个9表示四个数字位，只能用9</p>
<blockquote>
<p>column empno format 9999;</p>
</blockquote>
</li>
<li><p>设置一页显示60条记录的高度</p>
<blockquote>
<p>set pagesize 60;</p>
</blockquote>
</li>
<li><p>使用/杠，执行最近一次的SQL语句</p>
<blockquote>
<p>/</p>
</blockquote>
</li>
<li><p>清屏，属于SQL*PLUS工具中的命令</p>
<blockquote>
<p>host cls;</p>
</blockquote>
</li>
<li><p>查询emp表的结构</p>
<blockquote>
<p>desc emp;</p>
</blockquote>
</li>
<li><p>使用dual哑表或者伪表，使用字符串连接符号||，输出”hello world”，在oracle中from是必须写的</p>
<blockquote>
<p>select ‘hello’ || ‘ world’ “结果” from dual;</p>
</blockquote>
</li>
<li><p>使用sysdate，显示系统当前时间，在默认情况下，oracle只显示日期，而不显示时间，格式：26-4月-15</p>
<blockquote>
<p>select sysdate from dual;</p>
</blockquote>
</li>
<li><p>使用spool命令，保存SQL语句到硬盘文件e:/oracle-day01.sql，并创建sql文件</p>
<blockquote>
<p>spool e:/oracle-day01.sql;</p>
</blockquote>
</li>
<li><p>使用spool off命令，保存SQL语句到硬盘文件e:/oracle-day01.sql，并创建sql文件，结束语句</p>
<blockquote>
<p>spool off;</p>
</blockquote>
</li>
<li><p>使用<code>@</code>命令，将硬盘文件e:/crm.sql，读到orcl实例中，并执行文件中的sql语句</p>
<blockquote>
<p>@ e:/crm.sql; </p>
</blockquote>
</li>
<li><p>使用<code>--</code>符号，设置单行注释</p>
</li>
<li>使用<code>/* */</code>符号，设置多行注释</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>SQL语句的特点</p>
<ol>
<li>是SQL92/99的ANSI官方标准，只要按照该标准来写，在任何的关系型数据库中都可以直接执行</li>
<li>SQL语句的关健字不能简写，例如：select，where，from</li>
<li>大小写不敏感，提倡大写 </li>
<li>能够对表数据进行增删改查操作</li>
<li>必须以分号结束</li>
<li>通常称做语句</li>
</ol>
<p>SQLPLUS命令的特点</p>
<ol>
<li>是oracle自带的一款工具，在该工具中执行的命令叫SQLPLUS命令</li>
<li>SQLPLUS工具的命令中的关健字可以简写，也可以不简写，例如：col ename for a10;</li>
<li>大小写不敏感，提倡大写</li>
<li>不能够对表数据进行增删改查操作，只能完成显示格式控制，例如：设置显示列宽，清屏，记录执行结果</li>
<li>可以不用分号结束，也可以用分号结束，个人提倡不管SQL或SQLPLUS，都以分号结束</li>
<li>通常称做命令，是SQLPLUS工具中的命令<br><strong>注意：SQLPLUS命令是SQLPLUS工具中特有的语句</strong></li>
</ol>
<p>单引号出现的地方如下：</p>
<ol>
<li>字符串型，例如：’hello’ || ‘ world’</li>
<li>日期型，例如’25-4月-15’</li>
</ol>
<p>双引号出现的地方如下：</p>
<ol>
<li>列别名，例如：sal<em>12 “年 薪”，或 sal</em>12 年薪，个人提倡用<code>&quot;&quot;</code>双引号作列别名</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天学习了Oracle的基本使用，做下总结：&lt;/p&gt;
&lt;h1 id=&quot;基本操作&quot;&gt;&lt;a href=&quot;#基本操作&quot; class=&quot;headerlink&quot; title=&quot;基本操作&quot;&gt;&lt;/a&gt;基本操作&lt;/h1&gt;&lt;p&gt;以Oracle 11g为例，安装好以后，普通账户都是未解锁的，不能使用，只能使用超级管理员登录。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sqlplus / as sysdba&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这样就用超级管理员登录了，无需密码。&lt;br&gt;然后解锁普通用户之后，就可以使用使用普通用户了。&lt;br&gt;举例：&lt;br&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://peijie-sh.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="Oracle" scheme="http://peijie-sh.github.io/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>Maven学习笔记（3） --- 生命周期</title>
    <link href="http://peijie-sh.github.io/2016/10/25/Maven%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%883%EF%BC%89%20---%20%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>http://peijie-sh.github.io/2016/10/25/Maven学习笔记（3） --- 生命周期/</id>
    <published>2016-10-25T07:28:37.000Z</published>
    <updated>2017-03-04T12:49:08.004Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Maven的3个生命周期："><a href="#Maven的3个生命周期：" class="headerlink" title="Maven的3个生命周期："></a>Maven的3个生命周期：</h1><p>Maven的生命周期就是对所有的构建过程进行抽象和统一。包含了项目的清理、初始化、编译、测试、打包、集成测试、验证、部署和站点生成等几乎所有的构建步骤。</p>
<p>Maven的生命周期是抽象的，即生命周期不做任何实际的工作，实际任务由插件完成，类似于设计模式中的模板方法。<br>每个生命周期包含一些阶段（phase），阶段是有顺序的，后面的阶段依赖于前面的阶段。</p>
<ul>
<li>clean生命周期：清理项目，phase如下。<ul>
<li><code>pre-clean</code>：执行清理前需要完成的工作</li>
<li><code>clean</code>：清理上一次构建生成的文件</li>
<li><code>post-clean</code>：执行清理后需要完成的工作</li>
</ul>
</li>
</ul>
<a id="more"></a>    
<ul>
<li><p>default生命周期：构建项目，phase如下。</p>
<ul>
<li><code>validate</code>：验证工程是否正确，所有需要的资源是否可用。</li>
<li><code>initialize</code>：初始化</li>
<li><code>generate-sources</code>：</li>
<li><code>process-sources</code>：处理资源文件 【src/main/resources】</li>
<li><code>generate-resources</code>：</li>
<li><code>process-resources</code>：</li>
<li><code>compile</code>：编译项目的源代码。【src/main/java】</li>
<li><code>process-classes</code>：处理编译后的class文件</li>
<li><code>generate-test-sources</code>：</li>
<li><code>process-test-sources</code>：处理测试资源文件【src/test/resources】</li>
<li><code>generate-test-resources</code>：</li>
<li><code>process-test-resources</code>：</li>
<li><code>test-compile</code>：编译测试文件【src/test/java】</li>
<li><code>process-test-classes</code>：处理编译后的测试class文件</li>
<li><code>test</code>：使用单元测试框架来测试已编译的源代码。测试代码不会被打包或布署。</li>
<li><code>pre-package</code>：打包之前要做的准备工作</li>
<li><code>package</code>：把已编译的代码打包成可发布的格式，比如jar。</li>
<li><code>pre-integration-test</code>：</li>
<li><code>integration-test</code>：如有需要，将包处理和发布到一个能够进行集成测试的环境。</li>
<li><code>post-integration-test</code>：</li>
<li><code>verify</code>：运行所有检查，验证包是否有效且达到质量标准。</li>
<li><code>install</code>：把包安装到maven本地仓库，可以被其他工程作为依赖来使用。</li>
<li><code>deploy</code>：在集成或者发布环境下执行，将最终版本的包拷贝到远程的repository，使得其他的开发者或者工程可以共享。</li>
</ul>
</li>
<li><p>site生命周期：建立和发布项目站点，phase如下。</p>
<ul>
<li><code>pre-site</code>：生成项目站点之前需要完成的工作</li>
<li><code>site</code>：生成项目站点文档</li>
<li><code>post-site</code>：生成项目站点之后需要完成的工作</li>
<li><code>site-deploy</code>：将项目站点发布到服务器</li>
</ul>
</li>
</ul>
<h1 id="命令行与生命周期"><a href="#命令行与生命周期" class="headerlink" title="命令行与生命周期"></a>命令行与生命周期</h1><ul>
<li><code>mvn clean</code> ：调用clean生命周期的clean阶段，实际执行pre-clean和clean阶段。</li>
<li><code>mvn test</code>：调用default生命周期的test阶段，实际执行test以及之前所有阶段。</li>
<li><code>mvn clean install</code>：调用clean生命周期的clean阶段和default的install阶段，实际执行pre-clean和clean，install以及之前所有阶段。</li>
<li><code>mvn clean deploy site-deploy</code>：调用clean生命周期的clean阶段，default生命周期的deploy阶段和site生命周期的site-deploy阶段。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Maven的3个生命周期：&quot;&gt;&lt;a href=&quot;#Maven的3个生命周期：&quot; class=&quot;headerlink&quot; title=&quot;Maven的3个生命周期：&quot;&gt;&lt;/a&gt;Maven的3个生命周期：&lt;/h1&gt;&lt;p&gt;Maven的生命周期就是对所有的构建过程进行抽象和统一。包含了项目的清理、初始化、编译、测试、打包、集成测试、验证、部署和站点生成等几乎所有的构建步骤。&lt;/p&gt;
&lt;p&gt;Maven的生命周期是抽象的，即生命周期不做任何实际的工作，实际任务由插件完成，类似于设计模式中的模板方法。&lt;br&gt;每个生命周期包含一些阶段（phase），阶段是有顺序的，后面的阶段依赖于前面的阶段。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;clean生命周期：清理项目，phase如下。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pre-clean&lt;/code&gt;：执行清理前需要完成的工作&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clean&lt;/code&gt;：清理上一次构建生成的文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;post-clean&lt;/code&gt;：执行清理后需要完成的工作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Java" scheme="http://peijie-sh.github.io/categories/Java/"/>
    
    
      <category term="Maven" scheme="http://peijie-sh.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Docker安装与基础命令</title>
    <link href="http://peijie-sh.github.io/2016/10/25/Docker%E5%AE%89%E8%A3%85%E4%B8%8E%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
    <id>http://peijie-sh.github.io/2016/10/25/Docker安装与基础命令/</id>
    <published>2016-10-25T07:28:37.000Z</published>
    <updated>2017-03-04T12:49:08.001Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h1><p>我是在Ubuntu 16上安装的docker，linux安装docker只需要一个命令：</p>
<blockquote>
<p>sudo apt-get install docker.io</p>
</blockquote>
<p>运行完后，可以在终端输入docker看到以下信息证明我们安装成功了<br>注：提示权限问题就添加sudo</p>
<a id="more"></a>
<blockquote>
<p>docker<br>Usage: docker [OPTIONS] COMMAND [arg…]<br>       docker daemon [ –help | … ]<br>       docker [ –help | -v | –version ]</p>
<p>A self-sufficient runtime for containers.</p>
<p>Options:</p>
<p>  –config=~/.docker              Location of client config files<br>  -D, –debug                     Enable debug mode<br>  -H, –host=[]                   Daemon socket(s) to connect to<br>  -h, –help                      Print usage<br>  -l, –log-level=info            Set the logging level<br>  –tls                           Use TLS; implied by –tlsverify<br>  –tlscacert=~/.docker/ca.pem    Trust certs signed only by this CA<br>  –tlscert=~/.docker/cert.pem    Path to TLS certificate file<br>  –tlskey=~/.docker/key.pem      Path to TLS key file<br>  –tlsverify                     Use TLS and verify the remote<br>  -v, –version                   Print version information and quit</p>
<p>Commands:<br>    attach    Attach to a running container<br>    build     Build an image from a Dockerfile<br>    commit    Create a new image from a container’s changes<br>    cp        Copy files/folders between a container and the local filesystem<br>    create    Create a new container<br>    diff      Inspect changes on a container’s filesystem<br>    events    Get real time events from the server<br>    exec      Run a command in a running container<br>    export    Export a container’s filesystem as a tar archive<br>    history   Show the history of an image<br>    images    List images<br>    import    Import the contents from a tarball to create a filesystem image<br>    info      Display system-wide information<br>    inspect   Return low-level information on a container or image<br>    kill      Kill a running container<br>    load      Load an image from a tar archive or STDIN<br>    login     Register or log in to a Docker registry<br>    logout    Log out from a Docker registry<br>    logs      Fetch the logs of a container<br>    network   Manage Docker networks<br>    pause     Pause all processes within a container<br>    port      List port mappings or a specific mapping for the CONTAINER<br>    ps        List containers<br>    pull      Pull an image or a repository from a registry<br>    push      Push an image or a repository to a registry<br>    rename    Rename a container<br>    restart   Restart a container<br>    rm        Remove one or more containers<br>    rmi       Remove one or more images<br>    run       Run a command in a new container<br>    save      Save an image(s) to a tar archive<br>    search    Search the Docker Hub for images<br>    start     Start one or more stopped containers<br>    stats     Display a live stream of container(s) resource usage statistics<br>    stop      Stop a running container<br>    tag       Tag an image into a repository<br>    top       Display the running processes of a container<br>    unpause   Unpause all processes within a container<br>    update    Update resources of one or more containers<br>    version   Show the Docker version information<br>    volume    Manage Docker volumes<br>    wait      Block until a container stops, then print its exit code</p>
<p>Run ‘docker COMMAND –help’ for more information on a command.</p>
</blockquote>
<p>安装完以后，也可运行以下命令查看版本信息：</p>
<blockquote>
<p>docker -v<br>docker version<br>docker info</p>
</blockquote>
<p>当利用 docker run 来创建容器时，Docker 在后台运行的标准操作包括：</p>
<ul>
<li>检查本地是否存在指定的镜像，不存在就从公有仓库下载</li>
<li>利用镜像创建并启动一个容器</li>
<li>分配一个文件系统，并在只读的镜像层外面挂载一层可读写层</li>
<li>从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去</li>
<li>从地址池配置一个 ip 地址给容器</li>
<li>执行用户指定的应用程序</li>
<li>执行完毕后容器被终止</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Docker安装&quot;&gt;&lt;a href=&quot;#Docker安装&quot; class=&quot;headerlink&quot; title=&quot;Docker安装&quot;&gt;&lt;/a&gt;Docker安装&lt;/h1&gt;&lt;p&gt;我是在Ubuntu 16上安装的docker，linux安装docker只需要一个命令：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo apt-get install docker.io&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;运行完后，可以在终端输入docker看到以下信息证明我们安装成功了&lt;br&gt;注：提示权限问题就添加sudo&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://peijie-sh.github.io/categories/Linux/"/>
    
    
      <category term="Docker" scheme="http://peijie-sh.github.io/tags/Docker/"/>
    
      <category term="Linux" scheme="http://peijie-sh.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Maven学习笔记（2） --- 依赖</title>
    <link href="http://peijie-sh.github.io/2016/10/25/Maven%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%882%EF%BC%89%20---%20%E4%BE%9D%E8%B5%96/"/>
    <id>http://peijie-sh.github.io/2016/10/25/Maven学习笔记（2） --- 依赖/</id>
    <published>2016-10-25T07:05:57.000Z</published>
    <updated>2017-03-04T12:49:08.003Z</updated>
    
    <content type="html"><![CDATA[<h2 id="maven依赖"><a href="#maven依赖" class="headerlink" title="maven依赖"></a>maven依赖</h2><p>在maven项目中，我们会在pom.xml文件中引入我们需要用到的依赖，一般用<code>groupId</code>,<code>artifactId</code>,<code>version</code>就够了，如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>有时，也会指定依赖范围，比如：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>maven有3套classpath，编译classpath，运行classpath，测试classpath。</p>
<h2 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h2><p>依赖范围有以下几种：</p>
<ul>
<li><code>compile</code> 编译依赖范围。默认是这种范围。对3中classpath都有效。典型例子是<code>spring-core</code>，在编译，运行，测试时都需要。 </li>
<li><code>test</code> 测试依赖范围。只对测试classpath有效。典型例子是<code>junit</code>，它只在测试期间需要。</li>
<li><code>provided</code> 已提供依赖范围。对编译classpath和测试classpath有效，运行classpath无效。典型例子是<code>servlet-api</code>，运行的时候容器会提供，所以运行时不需要。</li>
<li><code>runtime</code> 运行时依赖范围。对运行classpath和测试classpath有效。典型例子是<code>jdbc</code>驱动实现，编译的时候只要有jdk的jdbc接口即可。</li>
<li><code>system</code> 系统依赖范围。和<code>provided</code>一样，对3中classpath都有效。但是，使用时必须通过systemPath元素显式指定依赖文件的路径。限制比较多，一般不使用。</li>
<li><code>import</code> 导入依赖范围。对3中classpath都没实际影响。</li>
</ul>
<h2 id="依赖机制"><a href="#依赖机制" class="headerlink" title="依赖机制"></a>依赖机制</h2><ol>
<li>依赖会传播：A依赖B，B依赖C，那么maven解析的时候会找到B，发现B依赖C，又去把C引入，然后在引入B</li>
<li>有相同依赖的时候，优先选路径最近的：比如A-&gt;B-&gt;C-&gt;X(1.0), A-&gt;D-&gt;X(2.0),这时候有2个X，会冲突，maven会选择最近的，也就是X(2.0)</li>
<li>在依赖路径长度相同时，优先选先声明的：比如A-&gt;B-&gt;Y(1.0), A-&gt;C-&gt;Y(2.0),在maven2.0.9之后，maven会选在pom中先声明的那个。即如果C的依赖声明在B之前，就选Y(2.0) </li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;maven依赖&quot;&gt;&lt;a href=&quot;#maven依赖&quot; class=&quot;headerlink&quot; title=&quot;maven依赖&quot;&gt;&lt;/a&gt;maven依赖&lt;/h2&gt;&lt;p&gt;在maven项目中，我们会在pom.xml文件中引入我们需要用到的依赖，一般用&lt;code&gt;groupId&lt;/code&gt;,&lt;code&gt;artifactId&lt;/code&gt;,&lt;code&gt;version&lt;/code&gt;就够了，如下：&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-core&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;4.1.7.RELEASE&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;有时，也会指定依赖范围，比如：&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;junit&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;junit&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;4.12&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;test&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://peijie-sh.github.io/categories/Java/"/>
    
    
      <category term="Maven" scheme="http://peijie-sh.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Maven学习笔记（1） --- 仓库</title>
    <link href="http://peijie-sh.github.io/2016/10/25/Maven%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89%20---%20%E4%BB%93%E5%BA%93/"/>
    <id>http://peijie-sh.github.io/2016/10/25/Maven学习笔记（1） --- 仓库/</id>
    <published>2016-10-25T06:42:24.000Z</published>
    <updated>2017-03-04T12:49:08.002Z</updated>
    
    <content type="html"><![CDATA[<h1 id="maven坐标"><a href="#maven坐标" class="headerlink" title="maven坐标"></a>maven坐标</h1><p>maven的构件（jar包）是根据坐标来确定其在仓库的保存位置的。<br>maven的坐标是通过以下元素来定义的：</p>
<ul>
<li>groupId : 一般是当前项目的公司名和项目组</li>
<li>artifactId : 项目名称</li>
<li>version : 项目版本</li>
<li>packaging : 打包方式，默认是<code>jar</code>,也可以是<code>war</code></li>
<li>classifier : 定义构建输出的一些附属构件，不常用</li>
</ul>
<p>形如<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.company.group<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>MyApp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h1 id="maven仓库"><a href="#maven仓库" class="headerlink" title="maven仓库"></a>maven仓库</h1><p>顾名思义，仓库就是存放依赖（jar包）的地方。<br>maven仓库分为<code>本地仓库</code>，<code>中央仓库</code>，<code>远程仓库</code>，和<code>私服</code>4种。</p>
<h2 id="本地仓库"><a href="#本地仓库" class="headerlink" title="本地仓库"></a>本地仓库</h2><p>通俗的说，本地仓库就是我们本地电脑中的一个文件夹，用来存放jar包的仓库。<br>本地仓库的默认位置：无论是Windows还是Linux，在用户的目录下都有一个.m2/repository/的仓库目录。<br>可通过修改maven安装目录下的settings.xml文件来修改本地仓库位置。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:\repo<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></div><div class="line">``` </div><div class="line"></div><div class="line">## 中央仓库</div><div class="line">中央仓库是默认的远程仓库，它包含了绝大多数流行的开源Java构件，以及源码、作者信息、SCM、信息、许可证信息等。id是central，url地址是http://repo1.maven.org/maven2</div><div class="line"></div><div class="line">## 远程仓库</div><div class="line">在很多情况下，默认的中央仓库无法满足项目的需求，可能项目需要的构件存在于另外一个远程仓库中，如:JBoss，Maven仓库。这时，可以在POM中配置该仓库，比如：</div><div class="line">``` xml</div><div class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span>  </div><div class="line">  ...  </div><div class="line">  <span class="tag">&lt;<span class="name">repositories</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span>  </div><div class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>jboss<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </div><div class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>JBoss Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </div><div class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repository.jboss.com/maven2/<span class="tag">&lt;/<span class="name">url</span>&gt;</span>  </div><div class="line">      <span class="tag">&lt;<span class="name">releases</span>&gt;</span></div><div class="line">	    <span class="comment">&lt;!-- 更新频率never,always,interval,daily --&gt;</span>   </div><div class="line">        <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>daily<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></div><div class="line">          <span class="comment">&lt;!-- 检查和检验文件的策略,fail,warn,ignore --&gt;</span>   </div><div class="line">        <span class="tag">&lt;<span class="name">checksumPolicy</span>&gt;</span>warn<span class="tag">&lt;/<span class="name">checksumPolicy</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">releases</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span>  </div><div class="line">      <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">layout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">layout</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span>  </div><div class="line">  ...  </div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在repositories元素下，用repository子元素声明一个或者多个远程仓库。该例中声明了一个id为jboss，名称为JBoss Repository的仓库。任何一个仓库声明的id必须是唯一的，尤其需要注意的是，maven自带的中央仓库使用的id为<code>central</code>，如果其他的仓库声明也使用该id，就会覆盖中央仓库的配置。该配置中的url值指向了仓库的地址，一般来说，该地址都基于http协议，maven用户都可以在浏览器中打开仓库地址浏览构件。<br>该例配置中的releases和snapshots元素比较重要，它们用来控制Maven对于发布版构件和快照版构件的下载。该例中releases的enabled值为true，表示开启JBoss仓库的发布版本下载支持，而snapshots的enabled值为false，表示关闭JBoss仓库的快照版本的下载支持。该例中的layout元素值default表示仓库的布局是Maven2及Maven3的默认布局，而不是Maven1的布局。</p>
<h3 id="远程仓库的认证"><a href="#远程仓库的认证" class="headerlink" title="远程仓库的认证"></a>远程仓库的认证</h3><p>远程仓库默认无须认证就可访问，有时出于安全需要，可配置认证访问。<br>配置认证信息和配置仓库信息不同，仓库信息可以直接配置在POM文件中，但是认证信息必须配置在settings.xml文件中。这是因为POM往往是被提交到代码仓库中供所有成员访问的，而settings.xml一般只放在本机。因此，settings.xml中配置认证信息更为安全。<br>假设为id为my-proj的仓库配置认证信息，编辑settings.xml文件如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span>  </div><div class="line">  ...  </div><div class="line">  <span class="tag">&lt;<span class="name">servers</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span>  </div><div class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>my-proj<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </div><div class="line">      <span class="tag">&lt;<span class="name">username</span>&gt;</span>repo-user<span class="tag">&lt;/<span class="name">username</span>&gt;</span>  </div><div class="line">      <span class="tag">&lt;<span class="name">password</span>&gt;</span>repo-pwd<span class="tag">&lt;/<span class="name">password</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;/<span class="name">servers</span>&gt;</span>  </div><div class="line">  ...  </div><div class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>  注：settings.xml中server元素的id必须与POM中需要认证的repository元素的id完全一致。 </strong></p>
<h3 id="私服"><a href="#私服" class="headerlink" title="私服"></a>私服</h3><p>私服是架设在局域网的特殊远程仓库。一般maven自己的中央仓库存放了主流的jar包，但是有时候自己的编写的jar包就没办法在中央仓库找到了，这时候就需要配置一个远程仓库，就是所谓的“私服”，就可以将我们自己的jar包存放到远程仓库中，这样当maven需要下载jar包的时候，就可以先请求私服，如果私服上找不到，就会从maven的中央仓库再下载，之后也会缓存在私服上供以后使用。</p>
<h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><p>这里另外说一下镜像。国内访问国外的仓库，你懂的，所以有必要配置镜像。在maven安装目录下的settings.xml配置文件中，可以配置镜像，在<code>&lt;Mirrors&gt;</code>元素中，可配置一个或多个<code>&lt;mirror&gt;</code>镜像。比如：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-osc<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus osc<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </div><div class="line">	<span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.oschina.net/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><code>mirrorOf</code>中写的是哪个仓库的镜像，例子中表明是中央仓库的镜像，这样，一切往中央仓库的请求，都会转发到去请求这个镜像的地址。所以，<code>mirrorOf</code>中不能乱写。<br>镜像也可以配置基于id的仓库认证。<br><code>mirrorOf</code>中可以写<code>*</code>,表示对一切的请求都会转到这个镜像。</p>
<p><strong> 为了满足复杂的规则，maven支持高级的镜像配置： </strong></p>
<ol>
<li><code>&lt;mirrorOf&gt;*&lt;mirrorOf&gt;</code>: 匹配所有仓库</li>
<li><code>&lt;mirrorOf&gt;external:*&lt;mirrorOf&gt;</code>: 匹配所有不在本机上的远程仓库</li>
<li><code>&lt;mirrorOf&gt;repo1,repo2&lt;mirrorOf&gt;</code>: 匹配repo1和repo2，多个仓库用逗号隔开</li>
<li><code>&lt;mirrorOf&gt;*,!repo3&lt;mirrorOf&gt;</code>: 匹配所有仓库，除了repo3</li>
</ol>
<p><strong><code>*</code>匹配所有，这个镜像建议放在最后，否则maven循环匹配，匹配到第一个就是*，满足，直接就结束了，其他镜像就不生效了。</strong></p>
<h2 id="仓库搜索"><a href="#仓库搜索" class="headerlink" title="仓库搜索"></a>仓库搜索</h2><p>在工作中，我们需要知道摸个依赖的坐标来使用，可以使用仓库搜索。<br>附上几个常用的搜索地址：</p>
<ul>
<li><a href="https://repository.sonatype.org/" target="_blank" rel="external">https://repository.sonatype.org/</a></li>
<li><a href="http://mvnbrowser.com/" target="_blank" rel="external">http://mvnbrowser.com/</a></li>
<li><a href="http://mvnrepository.com/" target="_blank" rel="external">http://mvnrepository.com/</a> </li>
</ul>
<h1 id="最后总结："><a href="#最后总结：" class="headerlink" title="最后总结："></a>最后总结：</h1><p>在pom中加入依赖声明后，maven会优先根据坐标去我们本地仓库查找，如果找到就用了。如果找不到，就会默认去中央仓库查找，然后下载到本地，然后使用。如果我们配置了私服或者其他远程仓库，就会从远程仓库查找，下载。如果我们有配置对应的镜像，就会从镜像下载使用了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;maven坐标&quot;&gt;&lt;a href=&quot;#maven坐标&quot; class=&quot;headerlink&quot; title=&quot;maven坐标&quot;&gt;&lt;/a&gt;maven坐标&lt;/h1&gt;&lt;p&gt;maven的构件（jar包）是根据坐标来确定其在仓库的保存位置的。&lt;br&gt;maven的坐标是通过以下元素来定义的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;groupId : 一般是当前项目的公司名和项目组&lt;/li&gt;
&lt;li&gt;artifactId : 项目名称&lt;/li&gt;
&lt;li&gt;version : 项目版本&lt;/li&gt;
&lt;li&gt;packaging : 打包方式，默认是&lt;code&gt;jar&lt;/code&gt;,也可以是&lt;code&gt;war&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;classifier : 定义构建输出的一些附属构件，不常用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;形如&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.company.group&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;MyApp&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;packaging&lt;/span&gt;&amp;gt;&lt;/span&gt;war&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;packaging&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://peijie-sh.github.io/categories/Java/"/>
    
    
      <category term="Maven" scheme="http://peijie-sh.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC重定向传参数的实现</title>
    <link href="http://peijie-sh.github.io/2016/10/23/SpringMVC%E9%87%8D%E5%AE%9A%E5%90%91%E4%BC%A0%E5%8F%82%E6%95%B0%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://peijie-sh.github.io/2016/10/23/SpringMVC重定向传参数的实现/</id>
    <published>2016-10-23T02:31:35.000Z</published>
    <updated>2017-03-04T12:49:08.006Z</updated>
    
    <content type="html"><![CDATA[<p>在spring的一个controller中要把参数传到页面，只要配置视图解析器，把参数添加到Model中，在页面用el表达式就可以取到。但是，这样使用的是forward方式，浏览器的地址栏是不变的，如果这时候浏览器F5刷新，就会造成表单重复提交的情况。所以，我们可以使用重定向的方式，改变浏览器的地址栏，防止表单因为刷新重复提交。</p>
<blockquote>
<p>jsp文件：</p>
</blockquote>
<a id="more"></a>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span></span></div><div class="line">    <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</div><div class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">prefix</span>=<span class="string">"c"</span> <span class="attr">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span></div><div class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>login<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"form1"</span> <span class="attr">action</span>=<span class="string">"/demo/user/login"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">		账号:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> /&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></div><div class="line">		密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> /&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"submit"</span>/&gt;</span></div><div class="line">		</div><div class="line">	<span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>controller：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.demo.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.ui.Model;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> lpj</div><div class="line"> * <span class="doctag">@date</span> 2016年7月10日</div><div class="line"> */</div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/login"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(@RequestParam Map&lt;String, String&gt; user, Model model)</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"用户提交了一次表单"</span>);</div><div class="line">		String username;</div><div class="line">		<span class="keyword">if</span> (user.get(<span class="string">"name"</span>).isEmpty()) &#123;</div><div class="line">			username = <span class="string">"Tom"</span>;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			username = user.get(<span class="string">"name"</span>);</div><div class="line">		&#125;</div><div class="line">		model.addAttribute(<span class="string">"msg"</span>, username);</div><div class="line"><span class="comment">//		  return "home";//此方式跳转，页面刷新会重复提交表单</span></div><div class="line">		<span class="keyword">return</span> <span class="string">"redirect:/home.jsp"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<p>由于重定向相当于2次请求，所以无法把参数加在model中传过去。在上面例子中，页面获取不到msg参数。要想获取参数，可以手动拼url，把参数带在后面。<br>Spring 3.1 提供了一个很好用的类：RedirectAttributes。 使用这个类，我们可以把参数随着重定向传到页面，不需自己拼url了。<br>把上面方法参数中的Model换成RedirectAttributes，参数就自动跟在url后了。<br><img src="http://img.blog.csdn.net/20160710205655347?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img-1"></p>
<hr>
<p>但是，这样页面不能用el获取到，还要另外处理，所以，我们还有一种方式，不拼url，用el获取参数，就像普通转发一样。<br>还是使用RedirectAttributes，但是这次不用addAttribute方法，spring为我们准备了新方法，addFlashAttribute（）。<br>这个方法原理是放到session中，session在跳到页面后马上移除对象。所以你刷新一下后这个值就会丢失。<br>controller代码改为如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.demo.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.ui.Model;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ModelAttribute;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.support.RedirectAttributes;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> lpj</div><div class="line"> * <span class="doctag">@date</span> 2016年7月10日</div><div class="line"> */</div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/login"</span>)</div><div class="line"><span class="comment">//	public String login(@RequestParam Map&lt;String, String&gt; user, Model model) &#123;</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(@RequestParam Map&lt;String, String&gt; user, RedirectAttributes model)</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"用户提交了一次表单"</span>);</div><div class="line">		String username;</div><div class="line">		<span class="keyword">if</span> (user.get(<span class="string">"name"</span>).isEmpty()) &#123;</div><div class="line">			username = <span class="string">"Tom"</span>;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			username = user.get(<span class="string">"name"</span>);</div><div class="line">		&#125;</div><div class="line">		model.addFlashAttribute(<span class="string">"msg"</span>, username);</div><div class="line"><span class="comment">//		return "home";//此方式跳转，页面刷新会重复提交表单</span></div><div class="line">		<span class="keyword">return</span> <span class="string">"redirect:/user/toHome"</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/toHome"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">home</span><span class="params">(@ModelAttribute(<span class="string">"msg"</span>)</span> String msg, Model model) </span>&#123;</div><div class="line">		System.out.println(<span class="string">"拿到重定向得到的参数msg:"</span> + msg);</div><div class="line">		model.addAttribute(<span class="string">"msg"</span>, msg);</div><div class="line">		<span class="keyword">return</span> <span class="string">"home"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这边我们使用@ModelAttribute注解，获取之前addFlashAttribute添加的数据，之后就可以正常使用啦。<br>需要例子代码的可以点此下载：<a href="http://download.csdn.net/detail/u011851478/9572366" target="_blank" rel="external">demo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在spring的一个controller中要把参数传到页面，只要配置视图解析器，把参数添加到Model中，在页面用el表达式就可以取到。但是，这样使用的是forward方式，浏览器的地址栏是不变的，如果这时候浏览器F5刷新，就会造成表单重复提交的情况。所以，我们可以使用重定向的方式，改变浏览器的地址栏，防止表单因为刷新重复提交。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;jsp文件：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java" scheme="http://peijie-sh.github.io/categories/Java/"/>
    
    
      <category term="Spring" scheme="http://peijie-sh.github.io/tags/Spring/"/>
    
  </entry>
  
</feed>
